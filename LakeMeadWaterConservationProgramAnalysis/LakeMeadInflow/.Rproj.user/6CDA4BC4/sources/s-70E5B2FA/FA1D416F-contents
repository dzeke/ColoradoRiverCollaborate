---
title: "Lake Mead Inflow"
author: "David E. Rosenberg"
date: "July 26, 2024"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Description

This is an R Markdown document. This document shows/estimates Lake Mead inflow using 4 different methods. Each method gives different values. The 4 methods are:

1. Add U.S. Geological Service data from stream gages 
    A. Colorado River nr Peach Springs [9404200; https://waterdata.usgs.gov/monitoring-location/09404200/#parameterCode=00065&timeSeriesId=6324&period=P7D] (1990 to present)
    B. Virgin River at Littlefield [9415000; https://waterdata.usgs.gov/monitoring-location/09415000/#parameterCode=00065&period=P7D] (1930 to present)
    C. Las Vegas Wash Below LAKE LAS VEGAS NR BOULDER CITY, NV [09419800; https://waterdata.usgs.gov/monitoring-location/09419800/] (2002 to present)
    D. Mead Inflow = A + B + C    

2. Inflow data provided from the USBR Application Programming Interface (USBR API). Note this inflow data only goes from January 2015 to present. This data is retrieved from              https://www.usbr.gov/lc/region/g4000/riverops/_HdbWebQuery.html. In order to use this, you will need to know the region and Site Datatype ID (SDID). The lake Mead data will be with the Lower Colorado Regional Offices HDB. For the different values you mentioned, the SDID's you will need are as follows: Evaporation (SDID=1776), Inflow (SDID=2091), Storage (SDID=1721), and Release (SDID=1874). From there you can select the timestep you want, Instantaneous, Hourly, Daily, Monthly, as well as for what time span you want. A query looks like: https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=lchdb&sdi=1776%2C2091%2C1721%2C1874&tstp=MN&t1=2022-01-01T00:00&t2=2024-05-01T00:00&table=R&mrid=0&format=html.
This query dynamically builds the end date as most recent month with full data.`

3. Back calculate from Lake Mead storage, release, Nevada Diversion, and Lake Mead evaporation data retrieved from the same API as Method #2 (1990 to present).
       Lake Mead Inflow = [Change in Storage] + [Release] +[Nevada Diversion] + [Evaporation]

4. Back calculate from Lake Mead storage, release, Nevada Diversion, and Lake Mead evaporation (1990 to present). Here we use evaporation data from elevation-storag-area relationship from Colorado River Simulation System (CRSS) model

## Figures

1. Lake Mead Inflow, Evaporation, Available Water, and water conservation credits
2. Inflow timeseries by the first four inflow methods.
3. Inflow box-and-whiskers for the first four inflow methods.
4. Inflow histograms for the first four inflow methods.
5. Correlation between USGS Gaged flow, Reclamation Inflow, and Inflow estimated by back calculation of inflow. Includes linear regressions.
6. Difference in Lake Mead Inflow USGS Gages and Reclamation API
7. Correlation between evaporation reported by USBR API and Evaporation estimated by table
8. Time series of USGS gaged inflow
9. ICS account balances
10. ICS deposits.

## Data Sources

1. U.S.G.S. Application Program Interface (https://waterdata.usgs.gov/monitoring-location/)
2. Lake Mead Inflow, Evaporation, and Storage read in from USBR Application Programming Interface (API).  https://www.usbr.gov/lc/region/g4000/riverops/_HdbWebQuery.html
                 API query - https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=lchdb&sdi=1776%2C2091%2C1721%2C1874&tstp=MN&t1=2022-01-01T00:00&t2=2024-05-01T00:00&table=R&mrid=0&format=html
3. Lake Mead conservation account balances: USBR (2024). "Boulder Canyon Operations Office - Program and Activities: Water Accounting Reports".  https://www.usbr.gov/lc/region/g4000/wtracct.html. These annual reports are aggregated in the Excel file IntentionallyCreatedSurplus-Summary.xlsx.


## Requested Citation
David E. Rosenberg (2020). "Lake Mead Inflow". Utah State University. Logan, Utah. https://github.com/dzeke/ColoradoRiverCollaborate/tree/main/LakeMeadWaterConservationProgramAnalysis/LakeMeadInflow.


```{r LakeMeadInflow1, echo=FALSE, warning=FALSE, message=FALSE}

rm(list = ls())  #Clear history

#Load packages in one go
  #List of packages
  load.lib <- c("tidyverse", "readxl", "RColorBrewer", "dplyr", "expss", "reshape2", "pracma", "lubridate", "directlabels", "plyr", "stringr", "ggplot2", "ggpubr", "rvest", "tidyr", "dataRetrieval")
# Then we select only the packages that aren't currently installed.
  install.lib <- load.lib[!load.lib %in% installed.packages()]
# And finally we install the missing packages, including their dependency.
  for(lib in install.lib) install.packages(lib,dependencies=TRUE)
  # After the installation process completes, we load all packages.
  sapply(load.lib,require,character=TRUE)

# New function interpNA to return NAs for values outside interpolation range (from https://stackoverflow.com/questions/47295879/using-interp1-in-r)
  interpNA <- function(x, y, xi = x, ...) {
    yi <- rep(NA, length(xi));
    sel <- which(xi >= range(x)[1] & xi <= range(x)[2]);
    yi[sel] <- interp1(x = x, y = y, xi = xi[sel], ...);
    return(yi);
  }  
  
#Labels for each method to use in grouping and plotting
cMethods <- c("USGS Gages", "USBR API Inflow", "USBR API Back Calc", "USBR Back Calc\nwith Evap from Table", "CRSS", "Wang-Schmidt")
cColors <- c("Blue", "Red", "Pink", "Purple", "Brown", "Black")

lFontSize <- 14

##############################
### Inflow Calc Method #1. Add U.S. Geological Service data from stream gages
# Read in the USGS gaged data

##### Need to change to calendar year
##### Read in data from API

# Retrieve data
# Dynamically read to the current date
CurrDate <- as.Date(Sys.Date())
cYear <- year(CurrDate)
cMonth <- month(CurrDate)

# Calculate the prior month
if (cMonth == 1) {
  # We want December of the prior year
  sDate <- sprintf("%d-%d-01", cYear-1, 12)
} else {
  # We take the prior month of the same year
  sDate <- sprintf("%d-%d-01", cYear, cMonth - 1)
}


siteNumbers <- c("09404200", "09415000", "09419800")
parameterCd <- "00060" # Discharge in cfs
start.date <- "1990-01-01"
end.date <- sDate

for(site in siteNumbers){
  site_info <- readNWISsite(site) 
  dataTemp <- readNWISdata(siteNumbers = site, parameterCd = parameterCd, startDate = start.date, endDate = end.date)
  dataTemp$StationName <- site_info$station_nm

    if(site == siteNumbers[1]) {
    dataUSGS <- dataTemp
    }
  else {
    dataUSGS <- rbind(dataUSGS, dataTemp)
    }
  }

# Save the API data to csv to improve reproducibility and in case no internet
write.csv(dataUSGS, "USGSFlowData-MeadInflow.csv")

#Rename the data column to a useful name
cColHeaders <- colnames(dataUSGS)
cColHeaders[4] <- "Flow.cfs"
colnames(dataUSGS) <- cColHeaders
dataUSGS$date <- as.Date(dataUSGS$dateTime)
dataUSGS$Flow.acft <- 1.983 * dataUSGS$Flow.cfs
# Cast so each stream gage is a column
dfInflowsWide <- dcast(dataUSGS, date ~ StationName, value.var = "Flow.acft")
# Replace NAs with 0s
dfInflowsWide <- dfInflowsWide %>% replace(is.na(.), 0)

dfInflowsWide$MeadInflow <- dfInflowsWide$`COLORADO RVR ABV DIAMOND CREEK NR PEACH SPRINGS AZ` + dfInflowsWide$`LV WASH BLW LAKE LAS VEGAS NR BOULDER CITY, NV` + dfInflowsWide$`VIRGIN RV AT LITTLEFIELD, AZ`
dfInflowsWide$Year <- year(dfInflowsWide$date)

dfGCFFlowsUSGS <- dfInflowsWide %>% dplyr::group_by(Year) %>% dplyr::summarise(MeadInflow = sum(MeadInflow)/1e6)

dfGCFFlowsUSGS$Method <- cMethods[1]

##############
#   2. Inflow data provided from the USBR Application Programming Interface. Note this inflow data only goes from January 2015 to present.
#
#             Use the HDB Data Service (usbr.gov) for Lake Mead inflow, evaporation, storage, and release.
#                 https://www.usbr.gov/lc/region/g4000/riverops/_HdbWebQuery.html
#
#                 In order to use this, you will need to know the region and Site Datatype ID (SDID). 
#                 The lake Mead data will be with the Lower Colorado Regional Offices HDB. For the different values you mentioned,
#                 the SDID's you will need are as follows: Evaporation (SDID=1776), Inflow (SDID=2091), Storage (SDID=1721), 
#                 and Release (SDID=1874). From there you can select the timestep you want,
#                  Instantaneous, Hourly, Daily, Monthly, as well as for what time span you want.
#
#                 API query - https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=lchdb&sdi=1776%2C2091%2C1721%2C1874&tstp=MN&t1=2022-01-01T00:00&t2=2024-05-01T00:00&table=R&mrid=0&format=html
#
# `                   This query dynamically builds the end date as most recent month with full data.`
#                      
#                 Returns an HTML page all on one line that looks like this:
#
#                     <HTML><HEAD><TITLE>Bureau of Reclamation HDB Data</TITLE></HEAD><BODY><TABLE BORDER=1><TR><TH>        DATETIME</TH><TH>     SDI_1776</TH><TH>     SDI_2091</TH><TH>     SDI_1721</TH><TH>     SDI_1874</TH></TR><TR><TD>01/01/2022 00:00</TD><TD> 25036.660109</TD><TD> 733181.246590</TD><TD>   8969839.40</TD><TD> 10400.87768820</TD></TR><TR><TD>02/01/2022 00:00</TD><TD> 22864.126967</TD><TD> 597592.564890</TD><TD>   8945556.40</TD><TD> 10631.16369050</TD></TR> .... <TR><TD>05/01/2024 00:00</TD><TD> 43219.74224840</TD><TD> 621530.394980</TD><TD>   8969054.80</TD><TD> 16139.41935480</TD></TR></TABLE></BODY></HTML>
#
#					        Scrape and parse the html page using the rvest and tidyr packages. Turn into a data frame.

##
##Old Code to downloaded from CSV file
##sExcelFileUSBRAPI <- "USBR-API-MeadData.csv"
##dfUSBR_API<- read_csv(sExcelFileUSBRAPI, skip = 6) 
##


if (TRUE){
  # Query the USBR API
  # Construct the USBR API call by reading data up to the prior month
  usbr_url <- paste0("https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=lchdb&sdi=1776%2C2091%2C1721%2C1874&tstp=MN&t1=1990-01-01T00:00&t2=", sDate, "T00:00&table=R&mrid=0&format=html")

  # Use the "rvest" and "tidyr" packages
  usbr_MeadData <- read_html(usbr_url)

  pkg_data <- usbr_MeadData |>
    html_element("table") |>
    html_table()

  # Convert acre-feet to million acre-feet
  dfUSBR_API <- data.frame(pkg_data)

  # Save the API data to csv to improve reproducibility and in case no internet
  write.csv(dfUSBR_API, "dfUSBR_API.csv")
  } else {

  # Read the data from the csv file
  dfUSBR_API <- read.csv("dfUSBR_API.csv")
  # Remove the 1st field
  dfUSBR_API <- dfUSBR_API[,2:6]
  }

#Turn the SDID Code # into meaningful variable names
dfSDIDcode <- data.frame(code = c(1776, 2091, 1721, 1874),
                         Field = c("Evaporation", "Inflow", "Storage", "Release"),
                         Units = c("acre-feet", "??", "acre-feet", "cfs"))

cSDID <- colnames(dfUSBR_API)
cSDID[2:5] <-dfSDIDcode$Field
colnames(dfUSBR_API) <- cSDID

#Convert DATETIME to time series format R understands
dfUSBR_API$Date <- as.Date(dfUSBR_API$DATETIME, "%m/%d/%Y %h:%m")
dfUSBR_API$Date <- mdy_hm(dfUSBR_API$DATETIME)

#Add month, year, and day variables
dfUSBR_API$Month <- month(dfUSBR_API$Date)
dfUSBR_API$Year <- year(dfUSBR_API$Date)
dfUSBR_API$Day <- day(dfUSBR_API$Date)
dfUSBR_API$DaysInMonth <- days_in_month(dfUSBR_API$Date)

# Conversions to million acre-feet
dfUSBR_API$Inflow <- dfUSBR_API$Inflow / 1e6
dfUSBR_API$Evaporation <- dfUSBR_API$Evaporation / 1e6
dfUSBR_API$Storage <- dfUSBR_API$Storage / 1e6

# Convert average cfs per month to million acre-feet per month 
dfUSBR_API$Release <- dfUSBR_API$Release * 1.983 * dfUSBR_API$DaysInMonth / 1e6

#Calculate water year
dfUSBR_API$WaterYear <- ifelse(dfUSBR_API$Month >= 10, dfUSBR_API$Year + 1, dfUSBR_API$Year)

# Set inflows for before Aug 1996 to NA because those numbers are crap
dfUSBR_API2 <- dfUSBR_API
dfUSBR_API2$Inflow[dfUSBR_API$Year <= 2014] <- NA

# Aggregate to Month and Year
dfUSBR_API_Agg <- dfUSBR_API2 %>% dplyr::group_by(Year) %>% dplyr::summarise(Evaporation = sum(Evaporation), Release = sum(Release), Inflow = sum(Inflow))
dfUSBR_API_Agg$MeadInflow <- dfUSBR_API_Agg$Inflow
dfUSBR_API_Agg$Method <- cMethods[2]

###############################
#       Inflow Calc Method #3. Back calculate from Lake Mead storage, release, Nevada Diversion, and Lake Mead evaporation (1990 to present)
#
#             Again use the Reclamation Application Program Interface 

#Pick the first day of October as day to take storage for the year
dfUSBR_Stor <- dfUSBR_API2 %>% select(Year, Month, Day, Storage ) %>% filter(Month == 1, Day == 1)

#Calculate the difference
dfUSBR_Stor$DeltaStorage <- c(diff(dfUSBR_Stor$Storage),0)

#Join the annual delta storage to the annual release and evaporation data
dfUSBR_API_Agg_BackCalc <- left_join(dfUSBR_API_Agg, dfUSBR_Stor, by = c("Year" = "Year"))

#Now calculate the inflow from release, evaporation, and change in storage
# Lake Mead Inflow = [Change in Storage] + [Release] + [Nevada Diversion] + [Evaporation]
# Use API evaporation data
dfUSBR_API_Agg_BackCalc$MeadInflow <- dfUSBR_API_Agg_BackCalc$DeltaStorage +  dfUSBR_API_Agg$Release +  dfUSBR_API_Agg$Evaporation
dfUSBR_API_Agg_BackCalc$Method <- cMethods[3]


########################
# Method #4. Back calculate from Lake Mead storage, release, Nevada Diversion, and Lake Mead evaporation (2004 to present)
#
#           Here we use evaporation data from elevation-storag-area relationship from Colorado River Simulation System (CRSS) model
# Use Evaporation table look up from storage

#### NOTE: need to move from annual to monthly evap calculation
# Create a new data frame
dfUSBR_FromEvapTable <- dfUSBR_API_Agg_BackCalc

dfMeadEvap <- read.csv(file = "EvapData/dfMeadEvap.csv", header = TRUE)
#Interpolate middle Evaporation from Mead Storage - Evap data
dfUSBR_FromEvapTable$EvaporationFromTable <- interpNA(xi = dfUSBR_FromEvapTable$Storage, x= dfMeadEvap$Total.Storage..ac.ft./1e6, y=dfMeadEvap$EvapVolMax/1e6)
#Interpolate range of Evap 
dfUSBR_FromEvapTable$EvaporationRange <- interpNA(xi = dfUSBR_FromEvapTable$Storage, x= dfMeadEvap$Total.Storage..ac.ft./1e6, y=dfMeadEvap$EvapVolMaxUp/1e6) - interpNA(xi = dfUSBR_FromEvapTable$Storage, x= dfMeadEvap$Total.Storage..ac.ft./1e6, y=dfMeadEvap$EvapVolMaxLo/1e6)

dfUSBR_FromEvapTable$MeadInflow <- dfUSBR_FromEvapTable$DeltaStorage +  dfUSBR_FromEvapTable$Release +  dfUSBR_FromEvapTable$EvaporationFromTable
dfUSBR_FromEvapTable$Method <- cMethods[4]


##############################
### Inflow Calc Method #5. Lake Mead.Inflow slot from Colorado River Simulation System (CRSS) historical trace (1907 to present)
#
#        A. file SingleTraceOut.xlsx
#

sExcelFileCRSS <- "SingleTraceOut.xlsx"
dfCRSSOutput<- read_excel(sExcelFileCRSS, sheet = 'RunTest') #  range = "A1:E32")

#Rename first column to Date
cCRSSColNames <- colnames(dfCRSSOutput)
cCRSSColNames[1] <- "CRSSDate"
colnames(dfCRSSOutput) <- cCRSSColNames

#Add a Water Year column
dfCRSSOutput$ModelYear <- year(dfCRSSOutput$CRSSDate)
dfCRSSOutput$Year <- dfCRSSOutput$ModelYear - 2022 + 1907
dfCRSSOutput$Month <- month(dfCRSSOutput$CRSSDate)
dfCRSSOutput$WaterYear <- ifelse(dfCRSSOutput$Month >= 10, dfCRSSOutput$Year + 1, dfCRSSOutput$Year)

# Aggregate to year
dfMeadInflowsCRSS <- dfCRSSOutput %>% dplyr::select(WaterYear, Month, Mead.Inflow) %>% dplyr::group_by(WaterYear) %>% dplyr::summarize(MeadInflow = sum(Mead.Inflow)/1e6)
dfMeadInflowsCRSS$Method <- cMethods[5]

##############################
### Inflow Calc Method #6. Wang / Schmidt - White Paper #5 [https://qcnr.usu.edu/coloradoriver/news/wp5] (2015 to 2020)
# Read in the Water Balance from the Supplemental spreadsheet => Tables => S18:X18
#
# IGNORE because year definitions are different and draw on same gage data
# 
sExcelFileWangSchmidt <- "Supplementary_file-WangSchmidt.xlsx"
dfMeadInflowsWSvals <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S18:W18")
dfMeadInflowsWSyears <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S4:W4")

#Read in values as headers. Reshape to long
cWSvalColNames <- colnames(dfMeadInflowsWSvals)
cWSyearsColNames <- colnames(dfMeadInflowsWSyears)
# Make a new dataframe
dfMeadInflowsWS <- data.frame(Year = cWSyearsColNames, MeadInflow = as.numeric(cWSvalColNames))
#Extract Water year from Year variable
dfMeadInflowsWS$WaterYear <- as.numeric(str_sub(dfMeadInflowsWS$Year,3,6)) + 1

dfMeadInflowsWS$Method <- cMethods[6]



#########
## Bind all the MeadInflow variables from the dataframes for the different methods
## This dataframe will have the structure WaterYear, MeadInflow, Method

# Methods 1 and 2
dfInflows <- rbind(dfGCFFlowsUSGS %>% select(Year, MeadInflow, Method), dfUSBR_API_Agg %>% select(Year, MeadInflow, Method) )
# Add Method 3 from API back calc
dfInflows <- rbind(dfInflows, dfUSBR_API_Agg_BackCalc %>% select(Year, MeadInflow, Method))
# Add Method 4 with evap from table
dfInflows <- rbind(dfInflows, dfUSBR_FromEvapTable %>% select(Year, MeadInflow, Method))

# Ignore methods 5 and 6
# Add CRSS method
#dfInflows <- rbind(dfInflows, dfMeadInflowsCRSS %>% select(WaterYear, MeadInflow, Method))

#Compare inflow values
dfInflowCompare <- dcast(dfInflows, Year ~ Method, value.var = "MeadInflow")

#Subset of methods to plot
cMethodsToPlot <- cMethods[1:4]
cColorsToPlot <- cColors[1:4]
dfInflowsToPlot <- dfInflows %>% filter(Method %in% cMethodsToPlot)

##### Compare ICS deposits to available water
#####
#Load in the ICS data
dfICSBalanceMelt <- read_csv(file = "dfICSBalanceMelt.csv", col_names = TRUE)
dfICSDeposit <- read_csv(file = "dfICSDeposit.csv", col_names = TRUE)
dfICSDepositMelt <- read_csv(file = "dfICSDepositMelt.csv", col_names = TRUE)


cColNames <- unique(dfICSBalanceMelt$variable) 
#Figure  - timeseries of bar plots of ICS balances
palBlues <- brewer.pal(9, "Blues")
palReds <- brewer.pal(9, "Reds")
palGreys <- brewer.pal(9, "Greys")

```

# Figure 1. Lake Mead Inflow, Evaporation, Available Water, and Conservation Credits
```{r LakeMeadInflowFig1, echo=FALSE, warning=FALSE, message=FALSE}

lHistorialAllocation <- 9 # Historical allocations for California, Nevada, Arizona, and Mexico
# Baseline to calculate values to show in figure
lBaselinePlot <- 6   # Baseline value on plot from where bars for ICS deposits will show

# Inflow method to use
cMethodUse <- cMethods[1]

## Join the Inflow and ICS dataframes
dfInflowICS <- left_join(dfInflows %>% filter(Method == cMethodUse, Year < cYear), dfICSDeposit, by = c("Year" = "Year"))
## Joint the Inflow, ICS, and evaporation data frames
dfInflowICS <- left_join(dfInflowICS, dfUSBR_API_Agg %>% select(Year, Evaporation) %>% filter(Year < cYear), by = c("Year" = "Year"))
#Convert ICS values to million-acre feet
dfInflowICS$Arizona <- dfInflowICS$Arizona / 1e6
dfInflowICS$California <- dfInflowICS$California / 1e6
dfInflowICS$Nevada <- dfInflowICS$Nevada / 1e6
dfInflowICS$Mexico <- dfInflowICS$Mexico / 1e6

#Calculate Total ICS deposits each year (sum of positive values)
dfInflowICS$TotalDeposit <- ifelse(dfInflowICS$Arizona > 0, dfInflowICS$Arizona, 0) +
  ifelse(dfInflowICS$California > 0, dfInflowICS$California, 0) +
  ifelse(dfInflowICS$Nevada > 0, dfInflowICS$Nevada, 0)

#Calculate available water as inflow minus evaporation
dfInflowICS$AvailableWater <- 0
dfInflowICS$AvailableWater <- dfInflowICS$MeadInflow - dfInflowICS$Evaporation

#Replace NAs with zeros
dfInflowICS$TotalDeposit <- replace_na(dfInflowICS$TotalDeposit,0)

# Calculate the ICS deposits to count when there was sufficient available water
# There are 3 cases:
#   1. Available water greater than historical allocations => Count all ICS deposits
#   2. Available water between historical allocation and ICS amount => Count part of the ICS deposit
#   3. Available water less than historical allocation minus ICS deposits => Count none
dfInflowICS$CountICSDeposit <- 
  # Case 1
  ifelse(dfInflowICS$AvailableWater >= lHistorialAllocation, dfInflowICS$TotalDeposit, 0) +
  # Case 2
  ifelse((dfInflowICS$AvailableWater < lHistorialAllocation) & (dfInflowICS$AvailableWater >= lHistorialAllocation - dfInflowICS$TotalDeposit), dfInflowICS$TotalDeposit - (lHistorialAllocation - dfInflowICS$AvailableWater), 0) +
  # Case 3
  ifelse(dfInflowICS$AvailableWater <= lHistorialAllocation - dfInflowICS$TotalDeposit, 0, 0)

# Calculate the ICS deposit not to count as difference between the TotalDeposit and Deposit counted
dfInflowICS$NotCountICSDeposit <- dfInflowICS$TotalDeposit - dfInflowICS$CountICSDeposit

sprintf("Total conservation credits all years: %.1f maf", sum(dfInflowICS$TotalDeposit))
sCreditTotals <- c(sprintf("Sufficient available water:\n%.1f maf", sum(dfInflowICS$CountICSDeposit)),
                   sprintf("Insufficient\navailable water:\n%.1f maf", sum(dfInflowICS$NotCountICSDeposit)))

#Melt the CountICSDeposit and NotCount columns into a new dataframe to plot as a stacked bar
cNamesInflowICS <- colnames(dfInflowICS)
nNumCols <- length(cNamesInflowICS)

dfICSCountMelt <- melt(data = dfInflowICS, id.vars = c("Year"), measure.vars = cNamesInflowICS[(nNumCols-1):nNumCols])


fig1 <- ggplot() +
  
  #Ribbon from Inflow to available water
  geom_ribbon(data = dfInflowICS, aes(x = Year, max = MeadInflow - lBaselinePlot, min = AvailableWater - lBaselinePlot, fill="Evaporation")) +
  
  #Inflow as line
  geom_line(data = dfInflowICS, aes(x= Year, y = MeadInflow - lBaselinePlot, color = "Inflow"), size = 1) + #color=Method shape=Method, size=6) +
  
  #Available water as line
  geom_line(data = dfInflowICS, aes(x= Year, y = AvailableWater - lBaselinePlot, color = "Available Water"), size = 1) + #color=Method shape=Method, size=6) +
  
  # ICS counts as stacked bar
  geom_bar(data=dfICSCountMelt, aes(fill=variable,y=-value,x=Year),position="stack", stat="identity") +
  
  scale_fill_manual(name="Guide1",values = c(palGreys[3], palReds[7], palReds[9]),breaks=cNamesInflowICS[c(10, (nNumCols-1):nNumCols)], labels = c("Evaporation", sCreditTotals)) +
  ###scale_color_manual(name="Guide2", values=c("Black")) +
  
  scale_color_manual(name="Guide2", values = c(palBlues[9], palBlues[7]), 
                     breaks = c("Inflow","Available Water"),
                     labels = c(paste0("Inflow (", cMethodUse,")"),"Available Water")) +
  #Add line for 9.0 maf
  geom_hline(yintercept = lHistorialAllocation - lBaselinePlot, color="black", linetype = "longdash", size = 1.5) +
  
  # Set x-axis limits
  xlim(min(dfUSBR_API_Agg$Year),max(dfUSBR_API_Agg$Year)) +
  # Set the y-axis limits and breaks
  scale_y_continuous(breaks=seq(-1,7,1), labels=c(1,0,seq(1,7,1) + lBaselinePlot)) +
  
  #Make one combined legend
  guides(color = guide_legend(""), fill = guide_legend("")) +
  
  #facet_wrap( ~ Source) +
  labs(x="", y="Volume\n(million acre-feet per year)") +
  #theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
  #      legend.position = c(0.8,0.7))
  
  theme_bw() +  
  theme(text = element_text(size=lFontSize))

fig1
ggsave("LakeMeadInflow-Figure1.png", fig1)

```





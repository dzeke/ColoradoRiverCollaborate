#Extract Water year from Year variable
dfMeadInflowsWS$WaterYear <- as.numeric(str_sub(dfMeadInflowsWS$Year,3,6)) + 1
dfMeadInflowsWS$Method <- cMethods[6]
#########
## Bind all the MeadInflow variables from the dataframes for the different methods
## This dataframe will have the structure WaterYear, MeadInflow, Method
# Methods 1 and 2
dfInflows <- rbind(dfGCFFlowsUSGS %>% select(Year, MeadInflow, Method), dfUSBR_API_Agg %>% select(Year, MeadInflow, Method) )
# Add Method 3 from API back calc
dfInflows <- rbind(dfInflows, dfUSBR_API_Agg_BackCalc %>% select(Year, MeadInflow, Method))
# Add Method 4 with evap from table
dfInflows <- rbind(dfInflows, dfUSBR_FromEvapTable %>% select(Year, MeadInflow, Method))
# Ignore methods 5 and 6
# Add CRSS method
#dfInflows <- rbind(dfInflows, dfMeadInflowsCRSS %>% select(WaterYear, MeadInflow, Method))
#Compare inflow values
dfInflowCompare <- dcast(dfInflows, Year ~ Method, value.var = "MeadInflow")
# #Natural flow - Not used but preserve
# dfGCFDataToUse <- dfGCFlowsByYear
# dfGCFDataToUse$GCFlow <- dfGCFDataToUse$GCFlow/1e6
# dfGCFDataToUse$MeadInflowNat <- dfGCFDataToUse$MeadInflowNat/1e6
# dfGCFDataToUse$LeeFerryNaturalFlow <- dfGCFDataToUse$LeeFerryNaturalFlow/1e6
# #Rename the MeadInflowNat column to MeadInflow for later use with rbind
# cColNames <- colnames(dfGCFDataToUse)
# cColNames[4] <- "MeadInflow"
# colnames(dfGCFDataToUse) <- cColNames
#
# dfGCFDataToUse$Source <- 'Natural Flow'
#
# #USGS data
# #Pull in the correct columns
# dfGCFDataToUse2 <- as.data.frame(dfGCFlowsUSGS[,c(1,5,6)])
# #Rename the 6th column MeadInflow
# dfGCFDataToUse2 <- dfGCFDataToUse2 %>% dplyr::rename(MeadInflow = MeadInflowUSGS)
# #Assign the Lee Ferry Natural Flow by year
# dfGCFDataToUse2 <- left_join(dfGCFDataToUse2, dfGCFDataToUse[,c("WaterYear","LeeFerryNaturalFlow")], by=c("WaterYear" = "WaterYear"))
# #Sort smallest year to largest year
# dfGCFDataToUse2 <- dfGCFDataToUse2[order(dfGCFDataToUse2$`WaterYear`),]
# dfGCFDataToUse2$Source <- 'USGS'
# #Swap the order of MeadInflow and LeeFerryNaturalFlow
# dfGCFDataToUse2 <- dfGCFDataToUse2 %>% dplyr::select(WaterYear, GCFlow, LeeFerryNaturalFlow, MeadInflow, Source)
#
# #Bind the two data sets together
# dfGCFDataToUse <- rbind(dfGCFDataToUse, dfGCFDataToUse2)
#Subset of methods to plot
cMethodsToPlot <- cMethods[1:4]
cColorsToPlot <- cColors[1:4]
dfInflowsToPlot <- dfInflows %>% filter(Method %in% cMethodsToPlot)
##### Compare ICS deposits to available water
#####
#Load in the ICS data
dfICSBalanceMelt <- read_csv(file = "dfICSBalanceMelt.csv", col_names = TRUE)
dfICSDeposit <- read_csv(file = "dfICSDeposit.csv", col_names = TRUE)
dfICSDepositMelt <- read_csv(file = "dfICSDepositMelt.csv", col_names = TRUE)
cColNames <- unique(dfICSBalanceMelt$variable)
#Figure  - timeseries of bar plots of ICS balances
palBlues <- brewer.pal(9, "Blues")
palReds <- brewer.pal(9, "Reds")
palGreys <- brewer.pal(9, "Greys")
##############
###   FIGURE 1
###   Plot inflow, available water, and ICS deposits as stacked area and stacked bar plots
###    Area for Inflow, Evaporation, Available Water
###    Bar for portion of ICS deposits to count/not count when there was sufficient available water
###############
lHistorialAllocation <- 9 # Historical allocations for California, Nevada, Arizona, and Mexico
# Baseline to calculate values to show in figure
lBaselinePlot <- 6   # Baseline value on plot from where bars for ICS deposits will show
# Inflow method to use
cMethodUse <- cMethods[1]
## Join the Inflow and ICS dataframes
dfInflowICS <- left_join(dfInflows %>% filter(Method == cMethodUse, Year < cYear), dfICSDeposit, by = c("Year" = "Year"))
## Joint the Inflow, ICS, and evaporation data frames
dfInflowICS <- left_join(dfInflowICS, dfUSBR_API_Agg %>% select(Year, Evaporation) %>% filter(Year < cYear), by = c("Year" = "Year"))
#Convert ICS values to million-acre feet
dfInflowICS$Arizona <- dfInflowICS$Arizona / 1e6
dfInflowICS$California <- dfInflowICS$California / 1e6
dfInflowICS$Nevada <- dfInflowICS$Nevada / 1e6
dfInflowICS$Mexico <- dfInflowICS$Mexico / 1e6
#Calculate Total ICS deposits each year (sum of positive values)
dfInflowICS$TotalDeposit <- ifelse(dfInflowICS$Arizona > 0, dfInflowICS$Arizona, 0) +
ifelse(dfInflowICS$California > 0, dfInflowICS$California, 0) +
ifelse(dfInflowICS$Nevada > 0, dfInflowICS$Nevada, 0)
#Calculate available water as inflow minus evaporation
dfInflowICS$AvailableWater <- 0
dfInflowICS$AvailableWater <- dfInflowICS$MeadInflow - dfInflowICS$Evaporation
#Replace NAs with zeros
dfInflowICS$TotalDeposit <- replace_na(dfInflowICS$TotalDeposit,0)
# Calculate the ICS deposits to count when there was sufficient available water
# There are 3 cases:
#   1. Available water greater than historical allocations => Count all ICS deposits
#   2. Available water between historical allocation and ICS amount => Count part of the ICS deposit
#   3. Available water less than historical allocation minus ICS deposits => Count none
dfInflowICS$CountICSDeposit <-
# Case 1
ifelse(dfInflowICS$AvailableWater >= lHistorialAllocation, dfInflowICS$TotalDeposit, 0) +
# Case 2
ifelse((dfInflowICS$AvailableWater < lHistorialAllocation) & (dfInflowICS$AvailableWater >= lHistorialAllocation - dfInflowICS$TotalDeposit), dfInflowICS$TotalDeposit - (lHistorialAllocation - dfInflowICS$AvailableWater), 0) +
# Case 3
ifelse(dfInflowICS$AvailableWater <= lHistorialAllocation - dfInflowICS$TotalDeposit, 0, 0)
# Calculate the ICS deposit not to count as difference between the TotalDeposit and Deposit counted
dfInflowICS$NotCountICSDeposit <- dfInflowICS$TotalDeposit - dfInflowICS$CountICSDeposit
sprintf("Total conservation credits all years: %.1f maf", sum(dfInflowICS$TotalDeposit))
sCreditTotals <- c(sprintf("Sufficient available water:\n%.1f maf", sum(dfInflowICS$CountICSDeposit)),
sprintf("Insufficient\navailable water:\n%.1f maf", sum(dfInflowICS$NotCountICSDeposit)))
#Melt the CountICSDeposit and NotCount columns into a new dataframe to plot as a stacked bar
cNamesInflowICS <- colnames(dfInflowICS)
nNumCols <- length(cNamesInflowICS)
dfICSCountMelt <- melt(data = dfInflowICS, id.vars = c("Year"), measure.vars = cNamesInflowICS[(nNumCols-1):nNumCols])
fig1 <- ggplot() +
#Ribbon from Inflow to available water
geom_ribbon(data = dfInflowICS, aes(x = Year, max = MeadInflow - lBaselinePlot, min = AvailableWater - lBaselinePlot, fill="Evaporation")) +
#Inflow as line
geom_line(data = dfInflowICS, aes(x= Year, y = MeadInflow - lBaselinePlot, color = "Inflow"), size = 1) + #color=Method shape=Method, size=6) +
#Available water as line
geom_line(data = dfInflowICS, aes(x= Year, y = AvailableWater - lBaselinePlot, color = "Available Water"), size = 1) + #color=Method shape=Method, size=6) +
# ICS counts as stacked bar
geom_bar(data=dfICSCountMelt, aes(fill=variable,y=-value,x=Year),position="stack", stat="identity") +
scale_fill_manual(name="Guide1",values = c(palGreys[3], palReds[7], palReds[9]),breaks=cNamesInflowICS[c(10, (nNumCols-1):nNumCols)], labels = c("Evaporation", sCreditTotals)) +
###scale_color_manual(name="Guide2", values=c("Black")) +
scale_color_manual(name="Guide2", values = c(palBlues[9], palBlues[7]),
breaks = c("Inflow","Available Water"),
labels = c(paste0("Inflow (", cMethodUse,")"),"Available Water")) +
#Add line for 9.0 maf
geom_hline(yintercept = lHistorialAllocation - lBaselinePlot, color="black", linetype = "longdash", size = 1.5) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$Year),max(dfUSBR_API_Agg$Year)) +
# Set the y-axis limits and breaks
scale_y_continuous(breaks=seq(-1,7,1), labels=c(1,0,seq(1,7,1) + lBaselinePlot)) +
#Make one combined legend
guides(color = guide_legend(""), fill = guide_legend("")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(million acre-feet per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
fig1
ggsave("LakeMeadInflow-Figure1.png", fig1)
##############
###   FIGURE 2
###   Plot Inflow by different methods as Time series
###############
ggplot() +
#Data after 1989
geom_line(data = dfInflowsToPlot %>% filter(Year < cYear), aes(x=Year , y=MeadInflow, color=Method, linetype=Method), size=1.5) +
theme_bw() +
scale_color_manual(values = cColorsToPlot) +
scale_linetype_manual(values = c("solid", "dotdash", "longdash", "dashed")) +
#Make one combined legend
guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="", y="Lake Mead Inflow\n(MAF per year)", color="") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20))
#################
###   FIGURE 3
###   Plot Mead Inflow as a box-and-whisker by different methods
#################
ggplot() +
geom_boxplot(data = dfInflowsToPlot, aes(x=Method , y=MeadInflow, fill=Method)) +
theme_bw() +
#Data before 1990
#geom_boxplot(data = dfGCFDataToUse %>% filter(WaterYear < 1990), aes(x="Before 1990 Natural Flow" , y=MeadInflow, fill="Before 1990 Natural Flow")) +
#scale_x_discrete(labels = c("Natural Flow" = "Natural Flow\n(1990 to 2016)", "Before 1990 Natural Flow" = "Natural Flow\n(1905 to 1989)", "USGS" = "USGS\n(1990 to 2016)") ) +
scale_fill_manual(values = cColorsToPlot) +
theme_bw() +
labs(x="", y="Lake Mead Inflow\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
##############
###   FIGURE 4
###   Plot Inflow as histogram
###############
ggplot() +
geom_histogram(data = dfInflowsToPlot %>% filter(Year < cYear), aes(x = MeadInflow), binwidth = 1, color = "Black", fill = "Blue") +
#geom_histogram(data = dfInflowsToPlot %>% filter(Method %in% cMethodsToPlot[2]), aes(x = MeadInflow), binwidth = 1, color = "Black", fill = "Red") +
facet_grid(. ~ Method) +
theme_bw() +
labs(x="Lake Mead Inflow\n(MAF per year)", y="Number of Years") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
#Reshape the data so Methods are in columns
dfInflowsWide <- dcast(dfInflowsToPlot, Year ~ Method, value.var = "MeadInflow")
dfInflowsWide$Diff <-  dfInflowsWide$`USGS Gages` - dfInflowsWide$`USBR Application Program Interface`
#################
###   FIGURE 5
###   Show the correlation between USGS and USBR estimates of inflow
#################
ggplot() +
geom_point(data = dfInflowCompare %>% filter(Year < cYear), aes(x= `USBR API Back Calc`, y=`USGS Gages`, color = 'API Back Calc'),  size = 5) + #color=Method shape=Method, size=6) +
geom_point(data = dfInflowCompare %>% filter(Year < cYear), aes(x= `USBR API Inflow`, y=`USGS Gages`, color = 'API Inflow'),  size = 5) + #color=Method shape=Method, size=6) +
#Add 1:1 line
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "black", size = 1) +
#Add linear regression line for Reclamation API Inflow
geom_smooth(data = dfInflowCompare %>% filter(Year < cYear), aes(x= `USBR API Inflow`, y=`USGS Gages`, color = 'API Inflow'),
method = "lm",
formula = y ~ x,
geom = "smooth") +
#Add regression equation for Reclamation API Inflow to plot
stat_regline_equation(data = dfInflowCompare %>% filter(Year < cYear), aes(x= `USBR API Inflow`, y=`USGS Gages`, color = 'API Inflow'),
label.x=8.5, label.y=12, size = 5, ) +
#Add linear regression line for Reclamation API Back Calculation
geom_smooth(data = dfInflowCompare %>% filter(Year < cYear), aes(x= `USBR API Back Calc`, y=`USGS Gages`, color = "API Back Calc"),
method = "lm",
formula = y ~ x,
geom = "smooth") +
#Add regression equation for Reclamation API Back Calculation to plot
stat_regline_equation(data = dfInflowCompare %>% filter(Year < cYear), aes(x= `USBR API Back Calc`, y=`USGS Gages`, color = "API Back Calc" ),
label.x=12, label.y=10.5, size = 5) +
#scale_shape_manual(values=c(17,16,16), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
scale_color_manual(values=c("Blue","Red"), breaks = c('API Inflow', 'API Back Calc')) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="Reclamation\n(MAF per year)", y="USGS Gages\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
#################
###   FIGURE 6
###   Show the difference between USGS and USBR methods to estimate inflow
#################
ggplot() +
#Points after 1990 in Blue and Red
#geom_point(data = dfInflowsWide, aes(x= `USBR Application Program Interface`, y=`USGS Gages`),  size = 6) + #color=Method shape=Method, size=6) +
geom_point(data = dfInflowCompare %>% filter(Year < cYear), aes(x= Year, y=`USGS Gages` - `USBR API Inflow`),  size = 6) + #color=Method shape=Method, size=6) +
#geom_point(data = dfGCFDataToUse %>% filter(WaterYear < 1990), aes(x= LeeFerryNaturalFlow, y=MeadInflow, color="Natural Flow pre 1990", shape="Natural Flow pre 1990"), size=6) +
#scale_shape_manual(values=c(17,16,16), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
#scale_color_manual(values=c("Blue","Red","Pink"), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
#Add 1:1 line
#geom_abline(intercept = 0, slope = 1, linetype = "dash", color = red, size = 1) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="", y="Difference in Lake Mead Inflow\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
##Compare API Evaporation to Evaporation vs Volume curve
#Read in the evaporation vs storage data from dfMeadEvap
##############
###   FIGURE 7
###   Plot API Evaporation vs Table Look up
#############
ggplot() +
geom_point(data = dfUSBR_FromEvapTable %>% filter(Year < cYear), aes(x= Evaporation, y = EvaporationFromTable),  size = 6) + #color=Method shape=Method, size=6) +
#Add error bars to data points
#Mead
geom_errorbar(data=dfUSBR_FromEvapTable %>% filter(Year < cYear), aes(x=Evaporation,ymin=EvaporationFromTable - EvaporationRange/2, ymax=EvaporationFromTable + EvaporationRange/2), width=.005,
position=position_dodge(0.2), color="black", show.legend = FALSE) +
#Add 1:1 line
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red", size = 1) +
#Add linear regression line
geom_smooth(data = dfUSBR_FromEvapTable %>% filter(Year < cYear), aes(x= Evaporation, y = EvaporationFromTable),
method = "lm",
formula = y ~ x,
geom = "smooth") +
#Add regression equation to plot
stat_regline_equation(data = dfUSBR_FromEvapTable %>% filter(Year < cYear), aes(x= Evaporation, y = EvaporationFromTable),
label.x= mean(dfUSBR_FromEvapTable$Evaporation), label.y=mean(dfUSBR_FromEvapTable$EvaporationFromTable), size = 6) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="Evaporation USBR API\n(MAF per year)", y="Evaporation from Table\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
##
#########################
# Figure 8. Time series of USGS inflow
ggplot(data=dfGCFFlowsUSGS %>% filter(Year < cYear)) +
geom_line(aes(x = Year, y = MeadInflow))
##############
###   FIGURE 9
###   Plot ICS account balances over time
###############
ggplot() +
geom_bar(data=dfICSBalanceMelt %>% filter(variable != "Mexico"), aes(fill=variable,y=value/1e6,x=Year),position="stack", stat="identity") +
#geom_hline(yintercept = nMaxBalance$Total[2]/1e6, size = 2) +
#geom_line(data=dfMaxBalance, aes(color="Max Balance", y=MaxBal/1e6,x=Year), size=2) +
scale_fill_manual(name="Guide1",values = c(palBlues[3],palBlues[6],palBlues[9]),breaks=cColNames[1:3]) +
scale_color_manual(name="Guide2", values=c("Black")) +
#scale_x_continuous(breaks=seq(min(dfICSBalanceMelt$Year),max(dfICSBalanceMelt$Year),by=2),labels=seq(min(dfICSBalanceMelt$Year),max(dfICSBalanceMelt$Year),by=2)) +
#Secondary scale with total max balance
#scale_y_continuous(breaks=seq(0,3,by=1),labels=seq(0,3,by=1), sec.axis = sec_axis(~. +0, name = "", breaks = c(nMaxBalance$Total[2])/1e6, labels = c("Max Balance"))) +
#Secondary scale with individual state max balances
scale_y_continuous(breaks=seq(0,3,by=1),labels=seq(0,3,by=1)) + #, sec.axis = sec_axis(~. +0, name = "Maximum Balance", breaks = dfMaxBalanceCum$CumVal/1e6, labels = dfMaxBalanceCum$StateAsChar)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1), color=FALSE) +
theme_bw() +
labs(x="", y="Intentionally Created Surplus\nAccount Balance\n(MAF)") +
theme(text = element_text(size=20),  legend.title = element_blank(),
legend.text=element_text(size=18),
legend.position= c(0.1,0.80))
##############
###   FIGURE 10
###   Plot ICS deposits over time
###############
ggplot() +
geom_bar(data=dfICSDepositMelt, aes(fill=variable,y=value/1e6,x=Year),position="stack", stat="identity") +
#geom_line(data=dfMaxAnnualAmounts, aes(y=MaxDeposit/1e6,x=Year), size=2) +
#geom_line(data=dfMaxAnnualAmounts, aes(color="Max Withdrawal", y=-MaxWithdraw/1e6,x=Year), size=2) +
scale_fill_manual(name="Guide1",values = c(palBlues[3],palBlues[6],palBlues[9]),breaks=cColNames[1:3]) +
scale_color_manual(name="Guide2", values=c("Black","Black")) +
scale_x_continuous(breaks=seq(min(dfICSDepositMelt$Year),max(dfICSDepositMelt$Year),by=2),labels=seq(min(dfICSDepositMelt$Year),max(dfICSDepositMelt$Year),by=2)) +
#scale_y_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = c(nMaxBalance$Total[1],-nMaxBalance$Total[3])/1e6, labels = c("Max Deposit","Max Withdraw"))) +
#scale_x_continuous(breaks = c(0,5,10,15,20,25),labels=c(0,5,10,15, 20,25), limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#                  sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$label)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1), color = FALSE) +
theme_bw() +
labs(x="", y="Deposit to Intentionally Created Surplus Account\n(MAF per year)") +
theme(text = element_text(size=20),  legend.title = element_blank(), legend.text=element_text(size=18),
legend.position= c(1.075,0.5))
####################################
######################################
# Not working beyond here
## Show the correlation matrix
mCorr <- cor(as.data.frame(dfInflowsWide %>% filter(WaterYear >= 2005, WaterYear < 2023) %>%  select(`USGS Gages`,`USBR Application Program Interface`) ))
print(paste("Correlation = ",round(mCorr[1,2],2)))
#### Additional Figures. Show the sequence average plot using Salehabadi code for Natural Flow data set and USGS data
############################################################################################################
###### Sequence Average Plot (Dotty Plot)                                                             ######
######  - creat the Sequence-Average plot (blue dots: full period,  red dots: post-yr period)         ######
######  - Add the long term average of the flow over the full and post-yr periods as horizontal lines ######
######                                                                                                ######
######  Homa Salehabadi                                                                               ######
############################################################################################################
# This may not be needed if already installed.
#install.packages("openxlsx")
library(openxlsx)
#####==================================================================================================================
##### Inputs (change them if needed) ==================================================================================
## Set working directory if necessary e.g.
# setwd("H:/Homa/PhD/Research/Works/SeqAvePlots")
##### n.lowest function: find the nth lowest value (or index) in x ====================================================
n.lowest <- function(x,n,value=TRUE){
s <- sort(x,index.return=TRUE)
if(value==TRUE)  {s$x[n]}  else  {s$ix[n]}    ## TRUE: n.lowest=value   FALSE: n.lowest=index
}
# Natural Flow Plot
## Input Files ------------------------------------------------------------------------------
#filename1 <- "R_InputData.xlsx"
#sheetname1 <-  "AnnualWYTotalNaturalFlow_LF2018"    ## Natural flow: "AnnualWYTotalNaturalFlow_LF2018"   ## Tree ring: "TR_Meko_2017-SK"
#A data frame to loop over
dfDataTypes <- data.frame(Source = c("USGS","Natural Flow"), minY = c(6,6), maxY = c(2,2))
for(iType in (1:nrow(dfDataTypes))) {
# iType <- 2
### Pull the data into the data data frame for plotting
data <- dfGCFDataToUse %>% filter(Source == dfDataTypes$Source[iType], WaterYear > 1906)
## Factor to change the current unit --------------------------------------------------------
unit_factor <- 1 #10^(-6)   ## ac-ft to MAF
## Maximum length of sequence (sequences will be from 1 to seq_yr) --------------------------
seq_yr <- 15 ## 25
## desired period ---------------------------------------------------------------------------
#yr1 <- 1990   ## NF:1906   TR:1416
#yr2 <- 2016   ## NF:2018   TR:2015
## A year to divide the period into two period.  --------------------------------------------
post_year <- 2000   ## post-year will be distinguished in plot
#desired period is the min and max water years
yr1 <- min(data$WaterYear)
yr2 <- max(data$WaterYear)
#data <- read.xlsx(filename1, sheet=sheetname1, colNames=TRUE)
#data <- read.csv(file = "GrandCanyonFlows.csv", header = TRUE, sep =",", strip.white = TRUE)
years <- yr1:yr2
n <- length(years)
#### Sequence Average plot ###########################################################################################
####   - creat the Sequence-Average plot
####   - add the long term average of the flow over the full and post-yr periods as horizontal lines
####
#### >> Check Legend if needed
## take the flow data ------------
flow <- data[ which(data[,1]==yr1):which(data[,1]==yr2) ,(4)]
## define empty matrixes -------------
Mean<- matrix(rep(NA), nrow=n , ncol=seq_yr)
lowest <- matrix(rep(NA), nrow=n , ncol=seq_yr)
lowest_index <- matrix(rep(NA), nrow=n , ncol=seq_yr)
lowest_year <- matrix(rep(NA), nrow=n , ncol=seq_yr)
## calculate the averages over the sequences---------------
## Loop: over the defined sequences
for (m_yr in 1:seq_yr){
print(m_yr)
mean_m_yr <- rep(NA)
sort <- rep(NA)
for (m in 1:(n-(m_yr-1))){
mean_m_yr[m] <- mean( flow[ m : (m+(m_yr-1)) ] )
Mean[m ,m_yr] <- mean_m_yr[m]
print(paste("m: ",m))
}
for (m in 1:(n-(m_yr-1))){
lowest[m ,m_yr] <- n.lowest( mean_m_yr,m,value=TRUE)
lowest_index[m ,m_yr] <- n.lowest(mean_m_yr,m,value=FALSE)
lowest_year[m ,m_yr] <- years[lowest_index[m ,m_yr]]
}
}
## change unit to MAF ----------------------
lowest_MAF <- lowest*unit_factor
###### Plot SeqAve (dotty plots) ==========================================================================
## the final dataframe that you want its dotty plot will be SeqAve
SeqAve <- lowest_MAF
## will be used to plot with a better scale:
#min <-  6 #floor(min(SeqAve, na.rm=TRUE))
max <- ceiling(max(SeqAve, na.rm=TRUE))
min <- dfDataTypes$minY[iType]
#max <- dfDataTypes$maxY[iType]
##### plot -----------------------------------------------------------
x <- c(1:seq_yr)
par(mar=c(5, 4, 3, 2) + 0.2 , mgp=c(2.5, 1, 0) )
## 1- For natural flow run this:
plot(x, SeqAve[1,], col="white", ylim=c(min, max) , xlim=c(1, seq_yr+1), xaxt="n" ,yaxt="n",
pch=16, cex=0.6, xlab="Length of sequence (year)", ylab="Lake Mead Inflow\n(maf per year)", cex.lab=1.3,
main=paste0("Lake Mead Inflow),  Period: " ,yr1,"-",yr2,paste0("\n",dfDataTypes$Source[iType]," Data")) )  ## , cex.main=1.3
### axis of the plot -------
axis(1, at=seq(1,seq_yr,1), cex.axis=1)
# axis(2, at=seq((min-2),max,0.25), cex.axis=1, las=1)  ## las=1 to rotate the y lables
axis(2, at=seq((min-2),max,1), cex.axis=1, las=1)  ## las=1 to rotate the y lables
### plot dots and seperate them to blue and red ones ---------
## full period
for (j in 1:seq_yr){
for (i in 1:(n-(j-1))){  #1:n
points(j, SeqAve[i,j], col= "lightskyblue2" ,pch=1, cex=0.5, lwd=1)
}
}
## specify post-yr period
for (j in 1:seq_yr){
for (i in 1:(n-(j-1))){  #1:n
if ( lowest_year[i,j]>=post_year) {
points(j, SeqAve[i,j], col= "black" ,bg="red" ,pch=21, cex=0.7, lwd=0.2)
}
}
}
### add a line representing the long-term average of flow during the full period -----------
ave_all <- mean(flow)* unit_factor
abline (ave_all, 0, col="steelblue2", lwd=1.2)
### add a line representing the long-term average of flow during the post-yr period
while(post_year<=yr2){
ave_post <- mean(flow[(which(years==post_year) : which(years==yr2))] ) * unit_factor
abline (ave_post, 0, col="red", lwd=1.2)
break}
### lable the two lines of long-term average -----------
if(post_year<=yr2){
if(ave_all>ave_post){
text((seq_yr+0.2),(ave_all+0.3), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)  ##, font=2
text((seq_yr+0.2),(ave_post-0.4), labels= paste(round(ave_post, digits=2)), pos = 4, cex=1, col="red", xpd=TRUE)
}
if(ave_all<ave_post){
text((seq_yr+0.2),(ave_all-0.4), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)  ##, font=2
text((seq_yr+0.2),(ave_post+0.4), labels= paste(round(ave_post, digits=2)), pos = 4, cex=1, col="red", xpd=TRUE)
}
} else {
text((seq_yr+0.2),(ave_all+0.3), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)
}
### lable the first and second lowest SeqAve ----------
text(SeqAve[1,]~x, labels=lowest_year[1,], pos = 1, cex=0.6, col="black", srt=0) ## the lowest     (vertical text: srt=90)
text(SeqAve[2,]~x, labels=lowest_year[2,], pos = 2, cex=0.5, col="gray47", srt=0)  ## the second lowest
### 1- Legend for natural flow 1906-2018 -----------
legend("topright", legend=c(paste0("Full Period (",yr1,"-",yr2,")"),paste0("Post-",post_year,"(",post_year,"-",yr2,")"), paste0("Long term mean (",yr1,"-",yr2,")"),  paste0("Long term mean (",post_year,"-", yr2,")")),
col=c("lightskyblue3","black","steelblue2","red"), pt.bg=c(NA,"red", NA,NA) , pch=c(1,21, NA, NA), pt.cex=c(0.6, 0.8),
lwd=1,  lty=c(0,0,1,1), inset=c(0.05, 0.03), bty = "n")
}
View(dfInflowsToPlot)
ggplot() +
geom_histogram(data = dfInflowsToPlot %>% filter(Year < cYear, Method == "USGS Gages"), aes(x = MeadInflow), binwidth = 1, color = "Black", fill = "Blue") +
#geom_histogram(data = dfInflowsToPlot %>% filter(Method %in% cMethodsToPlot[2]), aes(x = MeadInflow), binwidth = 1, color = "Black", fill = "Red") +
# facet_grid(. ~ Method) +
theme_bw() +
labs(x="Lake Mead Inflow\n(MAF per year)", y="Number of Years") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
ggplot() +
geom_histogram(data = dfInflowsToPlot %>% filter(Year < cYear, Method == "USGS Gages"), aes(x = MeadInflow), binwidth = 1, color = "Black", fill = "Blue") +
#geom_histogram(data = dfInflowsToPlot %>% filter(Method %in% cMethodsToPlot[2]), aes(x = MeadInflow), binwidth = 1, color = "Black", fill = "Red") +
# facet_grid(. ~ Method) +
scale_x_continuous(breaks = c(8,10,12,14,16)) +
theme_bw() +
labs(x="Lake Mead Inflow\n(MAF per year)", y="Number of Years") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
ggplot(data=dfGCFFlowsUSGS %>% filter(Year < cYear)) +
geom_line(aes(x = Year, y = MeadInflow)) +
labs(x="", y="Mead Inflow\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
ggplot(data=dfGCFFlowsUSGS %>% filter(Year < cYear)) +
geom_line(aes(x = Year, y = MeadInflow), width = 2) +
scale_x_continuous(breaks = seq(1990,2024,2)) +
labs(x="", y="Mead Inflow\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
ggplot(data=dfGCFFlowsUSGS %>% filter(Year < cYear)) +
geom_line(aes(x = Year, y = MeadInflow),  linewidth = 2) +
scale_x_continuous(breaks = seq(1990,2024,2)) +
labs(x="", y="Mead Inflow\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))

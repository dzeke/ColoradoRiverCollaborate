plot(x, SeqAve[1,], col="white", ylim=c(min, max) , xlim=c(1, seq_yr+1), xaxt="n" ,yaxt="n",
pch=16, cex=0.6, xlab="Length of sequence (year)", ylab="Lake Mead Inflow\n(maf per year)", cex.lab=1.3,
main=paste0("Lake Mead Inflow),  Period: " ,yr1,"-",yr2,paste0("\n",dfDataTypes$Source[iType]," Data")) )  ## , cex.main=1.3
### axis of the plot -------
axis(1, at=seq(1,seq_yr,1), cex.axis=1)
# axis(2, at=seq((min-2),max,0.25), cex.axis=1, las=1)  ## las=1 to rotate the y lables
axis(2, at=seq((min-2),max,2), cex.axis=1, las=1)  ## las=1 to rotate the y lables
### plot dots and seperate them to blue and red ones ---------
## full period
for (j in 1:seq_yr){
for (i in 1:(n-(j-1))){  #1:n
points(j, SeqAve[i,j], col= "lightskyblue2" ,pch=1, cex=0.5, lwd=1)
}
}
## specify post-yr period
for (j in 1:seq_yr){
for (i in 1:(n-(j-1))){  #1:n
if ( lowest_year[i,j]>=post_year) {
points(j, SeqAve[i,j], col= "black" ,bg="red" ,pch=21, cex=0.7, lwd=0.2)
}
}
}
### add a line representing the long-term average of flow during the full period -----------
ave_all <- mean(flow)* unit_factor
abline (ave_all, 0, col="steelblue2", lwd=1.2)
### add a line representing the long-term average of flow during the post-yr period
while(post_year<=yr2){
ave_post <- mean(flow[(which(years==post_year) : which(years==yr2))] ) * unit_factor
abline (ave_post, 0, col="red", lwd=1.2)
break}
### lable the two lines of long-term average -----------
if(post_year<=yr2){
if(ave_all>ave_post){
text((seq_yr+0.2),(ave_all+0.3), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)  ##, font=2
text((seq_yr+0.2),(ave_post-0.4), labels= paste(round(ave_post, digits=2)), pos = 4, cex=1, col="red", xpd=TRUE)
}
if(ave_all<ave_post){
text((seq_yr+0.2),(ave_all-0.4), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)  ##, font=2
text((seq_yr+0.2),(ave_post+0.4), labels= paste(round(ave_post, digits=2)), pos = 4, cex=1, col="red", xpd=TRUE)
}
} else {
text((seq_yr+0.2),(ave_all+0.3), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)
}
### lable the first and second lowest SeqAve ----------
text(SeqAve[1,]~x, labels=lowest_year[1,], pos = 1, cex=0.6, col="black", srt=0) ## the lowest     (vertical text: srt=90)
text(SeqAve[2,]~x, labels=lowest_year[2,], pos = 2, cex=0.5, col="gray47", srt=0)  ## the second lowest
### 1- Legend for natural flow 1906-2018 -----------
legend("topright", legend=c(paste0("Full Period (",yr1,"-",yr2,")"),paste0("Post-",post_year,"(",post_year,"-",yr2,")"), paste0("Long term mean (",yr1,"-",yr2,")"),  paste0("Long term mean (",post_year,"-", yr2,")")),
col=c("lightskyblue3","black","steelblue2","red"), pt.bg=c(NA,"red", NA,NA) , pch=c(1,21, NA, NA), pt.cex=c(0.6, 0.8),
lwd=1,  lty=c(0,0,1,1), inset=c(0.05, 0.03), bty = "n")
}
for(iType in (1:nrow(dfDataTypes))) {
# iType <- 2
### Pull the data into the data data frame for plotting
data <- dfGCFDataToUse %>% filter(Source == dfDataTypes$Source[iType], WaterYear > 1906)
## Factor to change the current unit --------------------------------------------------------
unit_factor <- 1 #10^(-6)   ## ac-ft to MAF
## Maximum length of sequence (sequences will be from 1 to seq_yr) --------------------------
seq_yr <- 15 ## 25
## desired period ---------------------------------------------------------------------------
#yr1 <- 1990   ## NF:1906   TR:1416
#yr2 <- 2016   ## NF:2018   TR:2015
## A year to divide the period into two period.  --------------------------------------------
post_year <- 2000   ## post-year will be distinguished in plot
#desired period is the min and max water years
yr1 <- min(data$WaterYear)
yr2 <- max(data$WaterYear)
#data <- read.xlsx(filename1, sheet=sheetname1, colNames=TRUE)
#data <- read.csv(file = "GrandCanyonFlows.csv", header = TRUE, sep =",", strip.white = TRUE)
years <- yr1:yr2
n <- length(years)
#### Sequence Average plot ###########################################################################################
####   - creat the Sequence-Average plot
####   - add the long term average of the flow over the full and post-yr periods as horizontal lines
####
#### >> Check Legend if needed
## take the flow data ------------
flow <- data[ which(data[,1]==yr1):which(data[,1]==yr2) ,(4)]
## define empty matrixes -------------
Mean<- matrix(rep(NA), nrow=n , ncol=seq_yr)
lowest <- matrix(rep(NA), nrow=n , ncol=seq_yr)
lowest_index <- matrix(rep(NA), nrow=n , ncol=seq_yr)
lowest_year <- matrix(rep(NA), nrow=n , ncol=seq_yr)
## calculate the averages over the sequences---------------
## Loop: over the defined sequences
for (m_yr in 1:seq_yr){
print(m_yr)
mean_m_yr <- rep(NA)
sort <- rep(NA)
for (m in 1:(n-(m_yr-1))){
mean_m_yr[m] <- mean( flow[ m : (m+(m_yr-1)) ] )
Mean[m ,m_yr] <- mean_m_yr[m]
print(paste("m: ",m))
}
for (m in 1:(n-(m_yr-1))){
lowest[m ,m_yr] <- n.lowest( mean_m_yr,m,value=TRUE)
lowest_index[m ,m_yr] <- n.lowest(mean_m_yr,m,value=FALSE)
lowest_year[m ,m_yr] <- years[lowest_index[m ,m_yr]]
}
}
## change unit to MAF ----------------------
lowest_MAF <- lowest*unit_factor
###### Plot SeqAve (dotty plots) ==========================================================================
## the final dataframe that you want its dotty plot will be SeqAve
SeqAve <- lowest_MAF
## will be used to plot with a better scale:
#min <-  6 #floor(min(SeqAve, na.rm=TRUE))
max <- ceiling(max(SeqAve, na.rm=TRUE))
min <- dfDataTypes$minY[iType]
#max <- dfDataTypes$maxY[iType]
##### plot -----------------------------------------------------------
x <- c(1:seq_yr)
par(mar=c(5, 4, 3, 2) + 0.2 , mgp=c(2.5, 1, 0) )
## 1- For natural flow run this:
plot(x, SeqAve[1,], col="white", ylim=c(min, max) , xlim=c(1, seq_yr+1), xaxt="n" ,yaxt="n",
pch=16, cex=0.6, xlab="Length of sequence (year)", ylab="Lake Mead Inflow\n(maf per year)", cex.lab=1.3,
main=paste0("Lake Mead Inflow),  Period: " ,yr1,"-",yr2,paste0("\n",dfDataTypes$Source[iType]," Data")) )  ## , cex.main=1.3
### axis of the plot -------
axis(1, at=seq(1,seq_yr,1), cex.axis=1)
# axis(2, at=seq((min-2),max,0.25), cex.axis=1, las=1)  ## las=1 to rotate the y lables
axis(2, at=seq((min-2),max,2), cex.axis=1, las=1)  ## las=1 to rotate the y lables
### plot dots and seperate them to blue and red ones ---------
## full period
for (j in 1:seq_yr){
for (i in 1:(n-(j-1))){  #1:n
points(j, SeqAve[i,j], col= "lightskyblue2" ,pch=1, cex=0.5, lwd=1)
}
}
## specify post-yr period
for (j in 1:seq_yr){
for (i in 1:(n-(j-1))){  #1:n
if ( lowest_year[i,j]>=post_year) {
points(j, SeqAve[i,j], col= "black" ,bg="red" ,pch=21, cex=0.7, lwd=0.2)
}
}
}
### add a line representing the long-term average of flow during the full period -----------
ave_all <- mean(flow)* unit_factor
abline (ave_all, 0, col="steelblue2", lwd=1.2)
### add a line representing the long-term average of flow during the post-yr period
while(post_year<=yr2){
ave_post <- mean(flow[(which(years==post_year) : which(years==yr2))] ) * unit_factor
abline (ave_post, 0, col="red", lwd=1.2)
break}
### lable the two lines of long-term average -----------
if(post_year<=yr2){
if(ave_all>ave_post){
text((seq_yr+0.2),(ave_all+0.3), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)  ##, font=2
text((seq_yr+0.2),(ave_post-0.4), labels= paste(round(ave_post, digits=2)), pos = 4, cex=1, col="red", xpd=TRUE)
}
if(ave_all<ave_post){
text((seq_yr+0.2),(ave_all-0.4), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)  ##, font=2
text((seq_yr+0.2),(ave_post+0.4), labels= paste(round(ave_post, digits=2)), pos = 4, cex=1, col="red", xpd=TRUE)
}
} else {
text((seq_yr+0.2),(ave_all+0.3), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)
}
### lable the first and second lowest SeqAve ----------
text(SeqAve[1,]~x, labels=lowest_year[1,], pos = 1, cex=0.6, col="black", srt=0) ## the lowest     (vertical text: srt=90)
text(SeqAve[2,]~x, labels=lowest_year[2,], pos = 2, cex=0.5, col="gray47", srt=0)  ## the second lowest
### 1- Legend for natural flow 1906-2018 -----------
legend("topright", legend=c(paste0("Full Period (",yr1,"-",yr2,")"),paste0("Post-",post_year,"(",post_year,"-",yr2,")"), paste0("Long term mean (",yr1,"-",yr2,")"),  paste0("Long term mean (",post_year,"-", yr2,")")),
col=c("lightskyblue3","black","steelblue2","red"), pt.bg=c(NA,"red", NA,NA) , pch=c(1,21, NA, NA), pt.cex=c(0.6, 0.8),
lwd=1,  lty=c(0,0,1,1), inset=c(0.05, 0.03), bty = "n")
}
for(iType in (1:nrow(dfDataTypes))) {
# iType <- 2
### Pull the data into the data data frame for plotting
data <- dfGCFDataToUse %>% filter(Source == dfDataTypes$Source[iType], WaterYear > 1906)
## Factor to change the current unit --------------------------------------------------------
unit_factor <- 1 #10^(-6)   ## ac-ft to MAF
## Maximum length of sequence (sequences will be from 1 to seq_yr) --------------------------
seq_yr <- 15 ## 25
## desired period ---------------------------------------------------------------------------
#yr1 <- 1990   ## NF:1906   TR:1416
#yr2 <- 2016   ## NF:2018   TR:2015
## A year to divide the period into two period.  --------------------------------------------
post_year <- 2000   ## post-year will be distinguished in plot
#desired period is the min and max water years
yr1 <- min(data$WaterYear)
yr2 <- max(data$WaterYear)
#data <- read.xlsx(filename1, sheet=sheetname1, colNames=TRUE)
#data <- read.csv(file = "GrandCanyonFlows.csv", header = TRUE, sep =",", strip.white = TRUE)
years <- yr1:yr2
n <- length(years)
#### Sequence Average plot ###########################################################################################
####   - creat the Sequence-Average plot
####   - add the long term average of the flow over the full and post-yr periods as horizontal lines
####
#### >> Check Legend if needed
## take the flow data ------------
flow <- data[ which(data[,1]==yr1):which(data[,1]==yr2) ,(4)]
## define empty matrixes -------------
Mean<- matrix(rep(NA), nrow=n , ncol=seq_yr)
lowest <- matrix(rep(NA), nrow=n , ncol=seq_yr)
lowest_index <- matrix(rep(NA), nrow=n , ncol=seq_yr)
lowest_year <- matrix(rep(NA), nrow=n , ncol=seq_yr)
## calculate the averages over the sequences---------------
## Loop: over the defined sequences
for (m_yr in 1:seq_yr){
print(m_yr)
mean_m_yr <- rep(NA)
sort <- rep(NA)
for (m in 1:(n-(m_yr-1))){
mean_m_yr[m] <- mean( flow[ m : (m+(m_yr-1)) ] )
Mean[m ,m_yr] <- mean_m_yr[m]
print(paste("m: ",m))
}
for (m in 1:(n-(m_yr-1))){
lowest[m ,m_yr] <- n.lowest( mean_m_yr,m,value=TRUE)
lowest_index[m ,m_yr] <- n.lowest(mean_m_yr,m,value=FALSE)
lowest_year[m ,m_yr] <- years[lowest_index[m ,m_yr]]
}
}
## change unit to MAF ----------------------
lowest_MAF <- lowest*unit_factor
###### Plot SeqAve (dotty plots) ==========================================================================
## the final dataframe that you want its dotty plot will be SeqAve
SeqAve <- lowest_MAF
## will be used to plot with a better scale:
#min <-  6 #floor(min(SeqAve, na.rm=TRUE))
max <- ceiling(max(SeqAve, na.rm=TRUE))
min <- dfDataTypes$minY[iType]
#max <- dfDataTypes$maxY[iType]
##### plot -----------------------------------------------------------
x <- c(1:seq_yr)
par(mar=c(5, 4, 3, 2) + 0.2 , mgp=c(2.5, 1, 0) )
## 1- For natural flow run this:
plot(x, SeqAve[1,], col="white", ylim=c(min, max) , xlim=c(1, seq_yr+1), xaxt="n" ,yaxt="n",
pch=16, cex=0.6, xlab="Length of sequence (year)", ylab="Lake Mead Inflow\n(maf per year)", cex.lab=1.3,
main=paste0("Lake Mead Inflow),  Period: " ,yr1,"-",yr2,paste0("\n",dfDataTypes$Source[iType]," Data")) )  ## , cex.main=1.3
### axis of the plot -------
axis(1, at=seq(1,seq_yr,1), cex.axis=1)
# axis(2, at=seq((min-2),max,0.25), cex.axis=1, las=1)  ## las=1 to rotate the y lables
axis(2, at=seq((min-2),max,1), cex.axis=1, las=1)  ## las=1 to rotate the y lables
### plot dots and seperate them to blue and red ones ---------
## full period
for (j in 1:seq_yr){
for (i in 1:(n-(j-1))){  #1:n
points(j, SeqAve[i,j], col= "lightskyblue2" ,pch=1, cex=0.5, lwd=1)
}
}
## specify post-yr period
for (j in 1:seq_yr){
for (i in 1:(n-(j-1))){  #1:n
if ( lowest_year[i,j]>=post_year) {
points(j, SeqAve[i,j], col= "black" ,bg="red" ,pch=21, cex=0.7, lwd=0.2)
}
}
}
### add a line representing the long-term average of flow during the full period -----------
ave_all <- mean(flow)* unit_factor
abline (ave_all, 0, col="steelblue2", lwd=1.2)
### add a line representing the long-term average of flow during the post-yr period
while(post_year<=yr2){
ave_post <- mean(flow[(which(years==post_year) : which(years==yr2))] ) * unit_factor
abline (ave_post, 0, col="red", lwd=1.2)
break}
### lable the two lines of long-term average -----------
if(post_year<=yr2){
if(ave_all>ave_post){
text((seq_yr+0.2),(ave_all+0.3), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)  ##, font=2
text((seq_yr+0.2),(ave_post-0.4), labels= paste(round(ave_post, digits=2)), pos = 4, cex=1, col="red", xpd=TRUE)
}
if(ave_all<ave_post){
text((seq_yr+0.2),(ave_all-0.4), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)  ##, font=2
text((seq_yr+0.2),(ave_post+0.4), labels= paste(round(ave_post, digits=2)), pos = 4, cex=1, col="red", xpd=TRUE)
}
} else {
text((seq_yr+0.2),(ave_all+0.3), labels= paste(round(ave_all, digits=2)), pos = 4, cex=1, col="dodgerblue3", xpd=TRUE)
}
### lable the first and second lowest SeqAve ----------
text(SeqAve[1,]~x, labels=lowest_year[1,], pos = 1, cex=0.6, col="black", srt=0) ## the lowest     (vertical text: srt=90)
text(SeqAve[2,]~x, labels=lowest_year[2,], pos = 2, cex=0.5, col="gray47", srt=0)  ## the second lowest
### 1- Legend for natural flow 1906-2018 -----------
legend("topright", legend=c(paste0("Full Period (",yr1,"-",yr2,")"),paste0("Post-",post_year,"(",post_year,"-",yr2,")"), paste0("Long term mean (",yr1,"-",yr2,")"),  paste0("Long term mean (",post_year,"-", yr2,")")),
col=c("lightskyblue3","black","steelblue2","red"), pt.bg=c(NA,"red", NA,NA) , pch=c(1,21, NA, NA), pt.cex=c(0.6, 0.8),
lwd=1,  lty=c(0,0,1,1), inset=c(0.05, 0.03), bty = "n")
}
rm(list = ls())  #Clear history
# Load required libraies
if (!require(tidyverse)) {
install.packages("tidyverse", repos="http://cran.r-project.org")
library(tidyverse)
}
if (!require(readxl)) {
install.packages("readxl", repos="http://cran.r-project.org")
library(readxl)
}
if (!require(RColorBrewer)) {
install.packages("RColorBrewer",repos="http://cran.r-project.org")
library(RColorBrewer) #
}
if (!require(dplyr)) {
install.packages("dplyr",repos="http://cran.r-project.org")
library(dplyr) #
}
if (!require(expss)) {
install.packages("expss",repos="http://cran.r-project.org")
library(expss) #
}
if (!require(reshape2)) {
install.packages("reshape2", repos="http://cran.r-project.org")
library(reshape2)
}
if (!require(pracma)) {
install.packages("pracma", repos="http://cran.r-project.org")
library(pracma)
}
if (!require(lubridate)) {
install.packages("lubridate", repos="http://cran.r-project.org")
library(lubridate)
}
if (!require(directlabels)) {
install.packages("directlabels", repo="http://cran.r-project.org")
library(directlabels)
}
if (!require(plyr)) {
install.packages("plyr", repo="http://cran.r-project.org")
library(plyr)
}
if (!require(ggplot2)) {
install.packages("ggplot2", repo="http://cran.r-project.org")
library(ggplot2)
}
### Read in the Natural Flow data and convert it to annual flows
sExcelFileGrandCanyonFlow <- 'HistoricalNaturalFlow.xlsx'
dfGCFlows <- read_excel(sExcelFileGrandCanyonFlow, sheet = 'Total Natural Flow',  range = "U1:Z1324")
dfGCDates <- read_excel(sExcelFileGrandCanyonFlow, sheet = 'Total Natural Flow',  range = "A1:A1324")
#Merge and combine into one Data frame
dfGCFlows$Date <- dfGCDates$`Natural Flow And Salt Calc model Object.Slot`
#Calculate Grand Canyon Tributary flows as sum of Paria, Little Colorado River, Virgin, and intervening flows
#Just tribs (without intervening)
#dfGCFlows$Total <- dfGCFlows$`CoRivPowellToVirgin:PariaGains.LocalInflow` + dfGCFlows$`CoRivPowellToVirgin:LittleCoR.LocalInflow` +
#                          dfGCFlows$VirginRiver.Inflow
#Tribs + Gains above Hoover
dfGCFlows$Total <- dfGCFlows$`CoRivPowellToVirgin:PariaGains.LocalInflow` + dfGCFlows$`CoRivPowellToVirgin:LittleCoR.LocalInflow` +
dfGCFlows$VirginRiver.Inflow + dfGCFlows$`CoRivVirginToMead:GainsAboveHoover.LocalInflow` - dfGCFlows$`CoRivPowellToVirgin:GainsAboveGC.LocalInflow`
dfGCFlows$Year <- year(dfGCFlows$Date)
dfGCFlows$Month <- month(as.Date(dfGCFlows$Date,"%Y-%m-%d"))
dfGCFlows$WaterYear <- ifelse(dfGCFlows$Month >= 10,dfGCFlows$Year,dfGCFlows$Year + 1)
#Convert to Water Year and sum by water year
dfGCFlowsByYear <- aggregate(dfGCFlows$Total, by=list(Category=dfGCFlows$WaterYear), FUN=sum)
dfLeeFerryByYear <- aggregate(dfGCFlows$`HistoricalNaturalFlow.AboveLeesFerry`, by=list(Category=dfGCFlows$WaterYear), FUN=sum)
#Change the Names
colnames(dfGCFlowsByYear) <- c("WaterYear","GCFlow")
colnames(dfLeeFerryByYear) <- c("WaterYear", "LeeFerryNaturalFlow")
dfGCFlowsByYear$LeeFerryNaturalFlow <- dfLeeFerryByYear$LeeFerryNaturalFlow
#Calculate Lake Mead Inflow as sum of GCFlow and Lee Ferry Natural Flow
dfGCFlowsByYear$MeadInflowNat <- dfGCFlowsByYear$GCFlow + dfGCFlowsByYear$LeeFerryNaturalFlow
sExcelFileUSGSFlow <- 'USGSInterveningFlowData.xlsx'
dfGCFlowsUSGS <- read_excel(sExcelFileUSGSFlow, sheet = 'Combined',  range = "A1:E32")
cColNames <- colnames(dfGCFlowsUSGS)
cColNames[1] <- "WaterYear"
cColNames[2] <- "LeeFerryFlow"
colnames(dfGCFlowsUSGS) <- cColNames
View(dfGCFlowsUSGS)
dfGCFlowsUSGS$GCFlow <- dfGCFlowsUSGS$`Colorado River near Peach Springs` - dfGCFlowsUSGS$LeeFerryFlow + dfGCFlowsUSGS$`Virgin River at Littlefield`
#Lake Mead inflow
dfGCFlowsUSGS$MeadInflowUSGS <- dfGCFlowsUSGS$`Colorado River near Peach Springs` + dfGCFlowsUSGS$`Virgin River at Littlefield` + dfGCFlowsUSGS$LasVegasWash
dfGCFlowsUSGS <- read_excel(sExcelFileUSGSFlow, sheet = 'Combined',  range = "A1:E32")
cColNames <- colnames(dfGCFlowsUSGS)
cColNames[1] <- "WaterYear"
cColNames[2] <- "LeeFerryFlow"
colnames(dfGCFlowsUSGS) <- cColNames
#Remove rows with NaN
dfGCFlowsUSGS <- na.omit(dfGCFlowsUSGS)
dfGCFlowsUSGS$GCFlow <- dfGCFlowsUSGS$`Colorado River near Peach Springs` - dfGCFlowsUSGS$LeeFerryFlow + dfGCFlowsUSGS$`Virgin River at Littlefield`
#Lake Mead inflow
dfGCFlowsUSGS$MeadInflowUSGS <- dfGCFlowsUSGS$`Colorado River near Peach Springs` + dfGCFlowsUSGS$`Virgin River at Littlefield` + dfGCFlowsUSGS$LasVegasWash
sapply(dfGCFlowsUSGS, "class")
dfGCFlowsUSGS$MeadInflowUSGS <- dfGCFlowsUSGS$`Colorado River near Peach Springs` + dfGCFlowsUSGS$`Virgin River at Littlefield` + dfGCFlowsUSGS$`LasVegas Wash`
dfGCFlowsUSGS <- read_excel(sExcelFileUSGSFlow, sheet = 'Combined',  range = "A1:E32")
cColNames <- colnames(dfGCFlowsUSGS)
cColNames[1] <- "WaterYear"
cColNames[2] <- "LeeFerryFlow"
colnames(dfGCFlowsUSGS) <- cColNames
#Remove rows with NaN
#dfGCFlowsUSGS <- na.omit(dfGCFlowsUSGS)
# Replace NAs with zeros
dfGCFlowsUSGS <- dfGCFlowsUSGS %>% replace(is.na(.),0)
dfGCFlowsUSGS <- read_excel(sExcelFileUSGSFlow, sheet = 'Combined',  range = "A1:E32")
cColNames <- colnames(dfGCFlowsUSGS)
cColNames[1] <- "WaterYear"
cColNames[2] <- "LeeFerryFlow"
cColNames[5] <- "LasVegasWash"
colnames(dfGCFlowsUSGS) <- cColNames
#Remove rows with NaN
#dfGCFlowsUSGS <- na.omit(dfGCFlowsUSGS)
# Replace NAs with zeros
# Note calc less than 2002 assumes Las Vegas wash is zero
dfGCFlowsUSGS <- dfGCFlowsUSGS %>% replace(is.na(.),0)
#Calculate the total
#Grand Canyon interveening flow
dfGCFlowsUSGS$GCFlow <- dfGCFlowsUSGS$`Colorado River near Peach Springs` - dfGCFlowsUSGS$LeeFerryFlow + dfGCFlowsUSGS$`Virgin River at Littlefield`
#Lake Mead inflow
dfGCFlowsUSGS$MeadInflowUSGS <- dfGCFlowsUSGS$`Colorado River near Peach Springs` + dfGCFlowsUSGS$`Virgin River at Littlefield` + dfGCFlowsUSGS$LasVegasWash
#Natural flow - Not used but preserve
dfGCFDataToUse <- dfGCFlowsByYear
dfGCFDataToUse$GCFlow <- dfGCFDataToUse$GCFlow/1e6
dfGCFDataToUse$MeadInflowNat <- dfGCFDataToUse$MeadInflowNat/1e6
dfGCFDataToUse$LeeFerryNaturalFlow <- dfGCFDataToUse$LeeFerryNaturalFlow/1e6
#Rename the MeadInflowNat column to MeadInflow for later use with rbind
cColNames <- colnames(dfGCFDataToUse)
cColNames[4] <- "MeadInflow"
colnames(dfGCFDataToUse) <- cColNames
dfGCFDataToUse$Source <- 'Natural Flow'
#USGS data
#Pull in the correct columns
dfGCFDataToUse2 <- as.data.frame(dfGCFlowsUSGS[,c(1,5,6)])
#Rename the 6th column MeadInflow
dfGCFDataToUse2 <- dfGCFDataToUse2 %>% dplyr::rename(MeadInflow = MeadInflowUSGS)
#Assign the Lee Ferry Natural Flow by year
dfGCFDataToUse2 <- left_join(dfGCFDataToUse2, dfGCFDataToUse[,c("WaterYear","LeeFerryNaturalFlow")], by=c("WaterYear" = "WaterYear"))
#Sort smallest year to largest year
dfGCFDataToUse2 <- dfGCFDataToUse2[order(dfGCFDataToUse2$`WaterYear`),]
dfGCFDataToUse2$Source <- 'USGS'
#Swap the order of MeadInflow and LeeFerryNaturalFlow
dfGCFDataToUse2 <- dfGCFDataToUse2 %>% dplyr::select(WaterYear, GCFlow, LeeFerryNaturalFlow, MeadInflow, Source)
#Bind the two data sets together
dfGCFDataToUse <- rbind(dfGCFDataToUse, dfGCFDataToUse2)
View(dfGCFDataToUse2)
View(dfGCFDataToUse)
View(dfGCFDataToUse)
View(dfGCFDataToUse)
View(dfGCFDataToUse2)
dfGCFlowsWangSchmidt <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S18:X18")
sExcelFileWangSchmidt <- "Supplementary_file-WangSchmidt.xlsx"
dfMeadInflowsWangSchmidt <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S18:X18")
View(dfMeadInflowsWangSchmidt)
sExcelFileWangSchmidt <- "Supplementary_file-WangSchmidt.xlsx"
dfMeadInflowsWS-vals <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S18:X18")
dfMeadInflowsWS-years <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S4:X4")
fMeadInflowsWSvals <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S18:X18")
dfMeadInflowsWSyears <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S4:X4")
dfMeadInflowsWSvals <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S18:X18")
dfMeadInflowsWSyears <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S4:X4")
View(dfMeadInflowsWSyears)
dfMeadInflowsWSvals <- melt(dfMeadInflowsWSvals)
View(dfMeadInflowsWSvals)
cWSvalColNames <- colnames(dfMeadInflowsWSvals)
cWSyearsColNames <- colnames(dfInflowsWSyears)
cWSyearsColNames <- colnames(dfMeadInflowsWSyears)
dfMeadInflowsWS <- data.frame(Year = cWSyearsColNames, Inflow = as.numeric(cWSValColNames))
cWSvalColNames <- colnames(dfMeadInflowsWSvals)
cWSyearsColNames <- colnames(dfMeadInflowsWSyears)
# Make a new dataframe
dfMeadInflowsWS <- data.frame(Year = cWSyearsColNames, Inflow = as.numeric(cWSValColNames))
dfMeadInflowsWS <- data.frame(Year = cWSyearsColNames, Inflow = as.numeric(cWSvalColNames))
View(dfMeadInflowsWS)
substring(dfMeadInflowsWS$Year, " (.*)", simplify= TRUE)
substring(dfMeadInflowsWS$Year, regexpr(" ",dfMeadInflowsWS$Year) + 1)
if (!require(stringr)) {
install.packages("stringr", repo="http://cran.r-project.org")
library(stringr)
}
dfMeadInflowsWS$WaterYear <- str_sub(dfMeadInflowsWS$Year,1,4)
dfMeadInflowsWS$WaterYear <- str_sub(dfMeadInflowsWS$Year,3,4)
dfMeadInflowsWS$WaterYear <- str_sub(dfMeadInflowsWS$Year,3,6)
sExcelFileWangSchmidt <- "Supplementary_file-WangSchmidt.xlsx"
dfMeadInflowsWSvals <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S18:W18")
dfMeadInflowsWSyears <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S4:W4")
#Read in values as headers. Reshape to long
cWSvalColNames <- colnames(dfMeadInflowsWSvals)
cWSyearsColNames <- colnames(dfMeadInflowsWSyears)
# Make a new dataframe
dfMeadInflowsWS <- data.frame(Year = cWSyearsColNames, Inflow = as.numeric(cWSvalColNames))
#Extract Water year from Year variable
dfMeadInflowsWS$WaterYear <- as.numeric(str_sub(dfMeadInflowsWS$Year,3,6))
dfMeadInflowsWS$WaterYear <- as.numeric(str_sub(dfMeadInflowsWS$Year,3,6)) + 1
dfGCFlowsUSGS$Method <- "USGSgages"
sExcelFileCRSS <- "SingleTraceOut.xlsx"
dfCRSSOutput<- read_excel(sExcelFileCRSS, sheet = 'RunTest') #  range = "A1:E32")
View(dfCRSSOutput)
sExcelFileCRSS <- "SingleTraceOut.xlsx"
dfCRSSOutput<- read_excel(sExcelFileCRSS, sheet = 'RunTest') #  range = "A1:E32")
#Rename first column to Date
cCRSSColNames <- colnames(dfCRSSOutput)
cCRSSColNames[1] <- "Date"
colnames(dfCRSSOutput) <- cCRSSColNames
cCRSSColNames <- colnames(dfCRSSOutput)
cCRSSColNames[1] <- "CRSSDate"
colnames(dfCRSSOutput) <- cCRSSColNames
sapply(dfCRSSOutput, "class")
dfCRSSOutput$Year <- year(dfCRSSOutput$CRSSDate)
dfCRSSOutput$Month <- month(dfCRSSOutput$CRSSDate)
dfCRSSOutput$WaterYear <- ifelse(dfCRSSOutput$Month >= 10, dfCRSSOutput$Year + 1, dfCRSSOutput$Year)
sExcelFileCRSS <- "SingleTraceOut.xlsx"
dfCRSSOutput<- read_excel(sExcelFileCRSS, sheet = 'RunTest') #  range = "A1:E32")
#Rename first column to Date
cCRSSColNames <- colnames(dfCRSSOutput)
cCRSSColNames[1] <- "CRSSDate"
colnames(dfCRSSOutput) <- cCRSSColNames
#Add a Water Year column
dfCRSSOutput$ModelYear <- year(dfCRSSOutput$CRSSDate)
dfCRSSOutput$Year <- dfCRSSOutput$ModelYear - 2022 + 1907
dfCRSSOutput$Month <- month(dfCRSSOutput$CRSSDate)
dfCRSSOutput$WaterYear <- ifelse(dfCRSSOutput$Month >= 10, dfCRSSOutput$Year + 1, dfCRSSOutput$Year)
dfMeadInflowsCRSS <- dfCRSSOutput %>% group_by(Year) %>% summarize(AnnualInflow = sum(Mead.Inflow))
View(dfMeadInflowsCRSS)
dfMeadInflowsCRSS <- dfCRSSOutput %>% group_by(Year) %>% summarise(AnnualInflow = sum(Mead.Inflow))
dfMeadInflowsCRSS <- dyplr::dfCRSSOutput %>% group_by(Year) %>% summarise(AnnualInflow = sum(Mead.Inflow))
dfMeadInflowsCRSS <- dplyr::dfCRSSOutput %>% group_by(Year) %>% summarise(AnnualInflow = sum(Mead.Inflow))
dfMeadInflowsCRSS <- dfCRSSOutput %>% group_by(Year)
dfMeadInflowsCRSS <- dfCRSSOutput %>% select(Year, Month, Mead.Inflow) %>% group_by(Year) #%>% summarise(AnnualInflow = sum(Mead.Inflow))
dfMeadInflowsCRSS <- dfCRSSOutput %>% select(Year, Month, Mead.Inflow) %>% group_by(Year) %>% summarise(AnnualInflow = sum(Mead.Inflow))
dfMeadInflowsCRSS <- dfCRSSOutput %>% select(Year, Month, Mead.Inflow) %>% group_by(Year) %>% summarize(AnnualInflow = sum(Mead.Inflow))
dfMeadInflowsCRSS <- dfCRSSOutput %>% select(Year, Month, Mead.Inflow) %>% group_by(Year) %>% summarize(NumMonths = n()) #summarize(AnnualInflow = sum(Mead.Inflow))
dfMeadInflowsCRSS <- dfCRSSOutput %>% select(Year, Month, Mead.Inflow) %>% group_by(Year) %>% summarize(NumMonths = n()) #summarize(AnnualInflow = sum(Mead.Inflow))
dfMeadInflowsCRSS <- dfCRSSOutput %>% dplyr::select(Year, Month, Mead.Inflow) %>% dplyr::group_by(Year) %>% dplyr::summarize(NumMonths = n()) #summarize(AnnualInflow = sum(Mead.Inflow))
dfMeadInflowsCRSS <- dfCRSSOutput %>% dplyr::select(Year, Month, Mead.Inflow) %>% dplyr::group_by(Year) %>% summarize(AnnualInflow = sum(Mead.Inflow))
dfMeadInflowsCRSS <- dfCRSSOutput %>% dplyr::select(Year, Month, Mead.Inflow) %>% dplyr::group_by(Year) %>% dplyr::summarize(AnnualInflow = sum(Mead.Inflow))

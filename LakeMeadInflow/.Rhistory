# dfGCFDataToUse <- rbind(dfGCFDataToUse, dfGCFDataToUse2)
#Subset of methods to plot
cMethodsToPlot <- cMethods[1:4]
cColorsToPlot <- cColors[1:4]
dfInflowsToPlot <- dfInflows %>% filter(Method %in% cMethodsToPlot)
##### Compare ICS deposits to available water
#####
#Load in the ICS data
dfICSBalanceMelt <- read_csv(file = "dfICSBalanceMelt.csv", col_names = TRUE)
dfICSDeposit <- read_csv(file = "dfICSDeposit.csv", col_names = TRUE)
dfICSDepositMelt <- read_csv(file = "dfICSDepositMelt.csv", col_names = TRUE)
cColNames <- unique(dfICSBalanceMelt$variable)
#Figure  - timeseries of bar plots of ICS balances
palBlues <- brewer.pal(9, "Blues")
palReds <- brewer.pal(9, "Reds")
palGreys <- brewer.pal(9, "Greys")
##############
###   FIGURE 2
###   Plot ICS account balances over time
###############
ggplot() +
geom_bar(data=dfICSBalanceMelt %>% filter(variable != "Mexico"), aes(fill=variable,y=value/1e6,x=Year),position="stack", stat="identity") +
#geom_hline(yintercept = nMaxBalance$Total[2]/1e6, size = 2) +
#geom_line(data=dfMaxBalance, aes(color="Max Balance", y=MaxBal/1e6,x=Year), size=2) +
scale_fill_manual(name="Guide1",values = c(palBlues[3],palBlues[6],palBlues[9]),breaks=cColNames[1:3]) +
scale_color_manual(name="Guide2", values=c("Black")) +
#scale_x_continuous(breaks=seq(min(dfICSBalanceMelt$Year),max(dfICSBalanceMelt$Year),by=2),labels=seq(min(dfICSBalanceMelt$Year),max(dfICSBalanceMelt$Year),by=2)) +
#Secondary scale with total max balance
#scale_y_continuous(breaks=seq(0,3,by=1),labels=seq(0,3,by=1), sec.axis = sec_axis(~. +0, name = "", breaks = c(nMaxBalance$Total[2])/1e6, labels = c("Max Balance"))) +
#Secondary scale with individual state max balances
scale_y_continuous(breaks=seq(0,3,by=1),labels=seq(0,3,by=1)) + #, sec.axis = sec_axis(~. +0, name = "Maximum Balance", breaks = dfMaxBalanceCum$CumVal/1e6, labels = dfMaxBalanceCum$StateAsChar)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1), color=FALSE) +
theme_bw() +
labs(x="", y="Intentionally Created Surplus\nAccount Balance\n(MAF)") +
theme(text = element_text(size=20),  legend.title = element_blank(),
legend.text=element_text(size=18),
legend.position= c(0.1,0.80))
##############
###   FIGURE 3
###   Plot ICS deposits over time
###############
ggplot() +
geom_bar(data=dfICSDepositMelt, aes(fill=variable,y=value/1e6,x=Year),position="stack", stat="identity") +
#geom_line(data=dfMaxAnnualAmounts, aes(y=MaxDeposit/1e6,x=Year), size=2) +
#geom_line(data=dfMaxAnnualAmounts, aes(color="Max Withdrawal", y=-MaxWithdraw/1e6,x=Year), size=2) +
scale_fill_manual(name="Guide1",values = c(palBlues[3],palBlues[6],palBlues[9]),breaks=cColNames[1:3]) +
scale_color_manual(name="Guide2", values=c("Black","Black")) +
scale_x_continuous(breaks=seq(min(dfICSDepositMelt$Year),max(dfICSDepositMelt$Year),by=2),labels=seq(min(dfICSDepositMelt$Year),max(dfICSDepositMelt$Year),by=2)) +
#scale_y_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = c(nMaxBalance$Total[1],-nMaxBalance$Total[3])/1e6, labels = c("Max Deposit","Max Withdraw"))) +
#scale_x_continuous(breaks = c(0,5,10,15,20,25),labels=c(0,5,10,15, 20,25), limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#                  sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$label)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1), color = FALSE) +
theme_bw() +
labs(x="", y="Deposit to Intentionally Created Surplus Account\n(MAF per year)") +
theme(text = element_text(size=20),  legend.title = element_blank(), legend.text=element_text(size=18),
legend.position= c(1.075,0.5))
##############
###   FIGURE 4
###   Plot Inflow by different methods as Time series
###############
ggplot() +
#Data after 1989
geom_line(data = dfInflowsToPlot, aes(x=Year , y=MeadInflow, color=Method, linetype=Method), size=1.5) +
theme_bw() +
scale_color_manual(values = cColorsToPlot) +
scale_linetype_manual(values = c("solid", "dotdash", "longdash", "dashed")) +
#Make one combined legend
guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="", y="Lake Mead Inflow\n(MAF per year)", color="") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20))
dfGCFFlowsUSGS <- dfInflowsWide %>% dplyr::group_by(Year) %>% dplyr::summarise(MeadInflow = sum(MeadInflow)/1e6)
dfGCFFlowsUSGS$Method <- cMethods[1]
ggplot(data=dfGCFFlowsUSGS) +
geom_line(aes(x = Year, y = MeadInflow))
# Methods 1 and 2
dfInflows <- rbind(dfGCFFlowsUSGS %>% select(Year, MeadInflow, Method), dfUSBR_API_Agg %>% select(Year, MeadInflow, Method) )
# Add Method 3 from API back calc
dfInflows <- rbind(dfInflows, dfUSBR_API_Agg_BackCalc %>% select(Year, MeadInflow, Method))
# Add Method 4 with evap from table
dfInflows <- rbind(dfInflows, dfUSBR_FromEvapTable %>% select(Year, MeadInflow, Method))
dfInflowCompare <- dcast(dfInflows, Year ~ Method, value.var = "MeadInflow")
cMethodsToPlot <- cMethods[1:4]
cColorsToPlot <- cColors[1:4]
dfInflowsToPlot <- dfInflows %>% filter(Method %in% cMethodsToPlot)
##############
###   FIGURE 4
###   Plot Inflow by different methods as Time series
###############
ggplot() +
#Data after 1989
geom_line(data = dfInflowsToPlot, aes(x=Year , y=MeadInflow, color=Method, linetype=Method), size=1.5) +
theme_bw() +
scale_color_manual(values = cColorsToPlot) +
scale_linetype_manual(values = c("solid", "dotdash", "longdash", "dashed")) +
#Make one combined legend
guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="", y="Lake Mead Inflow\n(MAF per year)", color="") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20))
ggplot() +
geom_histogram(data = dfInflowsToPlot %>% filter(Method %in% cMethodsToPlot[1]), aes(x = MeadInflow), binwidth = 1, color = "Black", fill = "Blue") +
#geom_histogram(data = dfInflowsToPlot %>% filter(Method %in% cMethodsToPlot[2]), aes(x = MeadInflow), binwidth = 1, color = "Black", fill = "Red") +
theme_bw() +
labs(x="Lake Mead Inflow\n(USGS Gages)\n(MAF per year)", y="Number of Years") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
##############
###   FIGURE 6
###   Plot inflow, available water, and ICS deposits as stacked area and stacked bar plots
###    Area for Inflow, Evaporation, Available Water
###    Bar for portion of ICS deposits to count/not count when there was sufficient available water
###############
lHistorialAllocation <- 9 # Historical allocations for California, Nevada, Arizone, and Mexico
# Baseline to calculate values to show in figure
lBaselinePlot <- 6   # Baseline value on plot from where bars for ICS deposits will show
## Join the Inflow and ICS dataframes
dfInflowICS <- left_join(dfUSBR_API_Agg, dfICSDeposit, by = c("Year" = "Year"))
#Convert ICS values to million-acre feet
dfInflowICS$Arizona <- dfInflowICS$Arizona / 1e6
dfInflowICS$California <- dfInflowICS$California / 1e6
dfInflowICS$Nevada <- dfInflowICS$Nevada / 1e6
dfInflowICS$Mexico <- dfInflowICS$Mexico / 1e6
#Calculate Total ICS deposits each year (sum of positive values)
dfInflowICS$TotalDeposit <- ifelse(dfInflowICS$Arizona > 0, dfInflowICS$Arizona, 0) +
ifelse(dfInflowICS$California > 0, dfInflowICS$California, 0) +
ifelse(dfInflowICS$Nevada > 0, dfInflowICS$Nevada, 0)
#Calculate available water as inflow minus evaporation
dfInflowICS$AvailableWater <- 0
dfInflowICS$AvailableWater <- dfInflowICS$MeadInflow - dfInflowICS$Evaporation
#Replace NAs with zeros
dfInflowICS$TotalDeposit <- replace_na(dfInflowICS$TotalDeposit,0)
# Calculate the ICS deposits to count when there was sufficient available water
# There are 3 cases:
#   1. Available water greater than historical allocations => Count all ICS deposits
#   2. Available water between historical allocation and ICS amount => Count part of the ICS deposit
#   3. Available water less than historical allocation minus ICS deposits => Count none
dfInflowICS$CountICSDeposit <-
# Case 1
ifelse(dfInflowICS$AvailableWater >= lHistorialAllocation, dfInflowICS$TotalDeposit, 0) +
# Case 2
ifelse((dfInflowICS$AvailableWater < lHistorialAllocation) & (dfInflowICS$AvailableWater >= lHistorialAllocation - dfInflowICS$TotalDeposit), dfInflowICS$TotalDeposit - (lHistorialAllocation - dfInflowICS$AvailableWater), 0) +
# Case 3
ifelse(dfInflowICS$AvailableWater <= lHistorialAllocation - dfInflowICS$TotalDeposit, 0, 0)
# Calculate the ICS deposit not to count as difference between the TotalDeposit and Deposit counted
dfInflowICS$NotCountICSDeposit <- dfInflowICS$TotalDeposit - dfInflowICS$CountICSDeposit
sprintf("Total conservation credits all years: %.1f maf", sum(dfInflowICS$TotalDeposit))
sCreditTotals <- c(sprintf("Conservation credits with\nsufficient available water:\n%.1f maf", sum(dfInflowICS$CountICSDeposit)),
sprintf("Credits with insufficient\navailable water:\n%.1f maf", sum(dfInflowICS$NotCountICSDeposit)))
#Melt the CountICSDeposit and NotCount columns into a new dataframe to plot as a stacked bar
cNamesInflowICS <- colnames(dfInflowICS)
nNumCols <- length(cNamesInflowICS)
dfICSCountMelt <- melt(data = dfInflowICS, id.vars = c("WaterYear"), measure.vars = cNamesInflowICS[(nNumCols-1):nNumCols])
ggplot() +
#Ribbon from Inflow to available water
geom_ribbon(data = dfInflowICS, aes(x = WaterYear, max = MeadInflow - lBaselinePlot, min = AvailableWater - lBaselinePlot, fill="Evaporation")) +
#Inflow as line
geom_line(data = dfInflowICS, aes(x= WaterYear, y = MeadInflow - lBaselinePlot, color = "Inflow"), size = 1) + #color=Method shape=Method, size=6) +
#Available water as line
geom_line(data = dfInflowICS, aes(x= WaterYear, y = AvailableWater - lBaselinePlot, color = "Available Water"), size = 1) + #color=Method shape=Method, size=6) +
# ICS counts as stacked bar
geom_bar(data=dfICSCountMelt, aes(fill=variable,y=-value,x=WaterYear),position="stack", stat="identity") +
scale_fill_manual(name="Guide1",values = c(palGreys[3], palReds[7], palReds[9]),breaks=cNamesInflowICS[c(3, (nNumCols-1):nNumCols)], labels = c("Evaporation", sCreditTotals)) +
###scale_color_manual(name="Guide2", values=c("Black")) +
scale_color_manual(name="Guide2", values = c(palBlues[7], palBlues[9])) +
#Add line for 9.0 maf
geom_hline(yintercept = lHistorialAllocation - lBaselinePlot, color="black", linetype = "longdash", size = 1.5) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$WaterYear),max(dfUSBR_API_Agg$WaterYear)) +
# Set the y-axis limits and breaks
scale_y_continuous(breaks=seq(-1,7,1), labels=c(1,0,seq(1,7,1) + lBaselinePlot)) +
#Make one combined legend
guides(color = guide_legend(""), fill = guide_legend("")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(million acre-feet per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
start.date <- "1990-01-01"
end.date <- sDate
for(site in siteNumbers){
site_info <- readNWISsite(site)
dataTemp <- readNWISdata(siteNumbers = site, parameterCd = parameterCd, startDate = start.date, endDate = end.date)
dataTemp$StationName <- site_info$station_nm
if(site == siteNumbers[1]) {
data <- dataTemp
}
else {
data <- rbind(data,dataTemp)
}
}
#Rename the data column to a useful name
cColHeaders <- colnames(data)
cColHeaders[4] <- "Flow.cfs"
colnames(data) <- cColHeaders
data$date <- as.Date(data$dateTime)
data$Flow.acft <- 1.983 * data$Flow.cfs
# Replace NAs with 0s
data$Flow.acft <- data$Flow.acft %>% replace(is.na(.), 0)
# Cast so each stream gage is a column
dfInflowsWide <- dcast(data, date ~ StationName, value.var = "Flow.acft")
dfInflowsWide$MeadInflow <- dfInflowsWide$`COLORADO RVR ABV DIAMOND CREEK NR PEACH SPRINGS AZ` + dfInflowsWide$`LV WASH BLW LAKE LAS VEGAS NR BOULDER CITY, NV` + dfInflowsWide$`VIRGIN RV AT LITTLEFIELD, AZ`
dfInflowsWide$Year <- year(dfInflowsWide$date)
dfGCFFlowsUSGS <- dfInflowsWide %>% dplyr::group_by(Year) %>% dplyr::summarise(MeadInflow = sum(MeadInflow)/1e6)
dfGCFFlowsUSGS$Method <- cMethods[1]
ggplot(data=dfGCFFlowsUSGS) +
geom_line(aes(x = Year, y = MeadInflow))
# ####### Code to Read in water year data from Excel file
# sExcelFileUSGSFlow <- 'USGSInterveningFlowData.xlsx'
# dfGCFlowsUSGS <- read_excel(sExcelFileUSGSFlow, sheet = 'Combined',  range = "A1:E34")
for(site in siteNumbers){
site_info <- readNWISsite(site)
dataTemp <- readNWISdata(siteNumbers = site, parameterCd = parameterCd, startDate = start.date, endDate = end.date)
dataTemp$StationName <- site_info$station_nm
if(site == siteNumbers[1]) {
data <- dataTemp
}
else {
data <- rbind(data,dataTemp)
}
}
#Rename the data column to a useful name
cColHeaders <- colnames(data)
cColHeaders[4] <- "Flow.cfs"
colnames(data) <- cColHeaders
data$date <- as.Date(data$dateTime)
data$Flow.acft <- 1.983 * data$Flow.cfs
# Replace NAs with 0s
data$Flow.acft <- data$Flow.acft %>% replace(is.na(.), 0)
# Cast so each stream gage is a column
dfInflowsWide <- dcast(data, date ~ StationName, value.var = "Flow.acft")
dfInflowsWide$MeadInflow <- dfInflowsWide$`COLORADO RVR ABV DIAMOND CREEK NR PEACH SPRINGS AZ` + dfInflowsWide$`LV WASH BLW LAKE LAS VEGAS NR BOULDER CITY, NV` + dfInflowsWide$`VIRGIN RV AT LITTLEFIELD, AZ`
dfInflowsWide$Year <- year(dfInflowsWide$date)
data$Flow.acft <- 1.983 * data$Flow.cfs
# Cast so each stream gage is a column
dfInflowsWide <- dcast(data, date ~ StationName, value.var = "Flow.acft")
# Replace NAs with 0s
dfInflowsWide <- dfInflowsWide %>% replace(is.na(.), 0)
dfInflowsWide$MeadInflow <- dfInflowsWide$`COLORADO RVR ABV DIAMOND CREEK NR PEACH SPRINGS AZ` + dfInflowsWide$`LV WASH BLW LAKE LAS VEGAS NR BOULDER CITY, NV` + dfInflowsWide$`VIRGIN RV AT LITTLEFIELD, AZ`
dfInflowsWide$Year <- year(dfInflowsWide$date)
dfGCFFlowsUSGS <- dfInflowsWide %>% dplyr::group_by(Year) %>% dplyr::summarise(MeadInflow = sum(MeadInflow)/1e6)
dfGCFFlowsUSGS$Method <- cMethods[1]
ggplot(data=dfGCFFlowsUSGS) +
geom_line(aes(x = Year, y = MeadInflow))
## Bind all the MeadInflow variables from the dataframes for the different methods
## This dataframe will have the structure WaterYear, MeadInflow, Method
# Methods 1 and 2
dfInflows <- rbind(dfGCFFlowsUSGS %>% select(Year, MeadInflow, Method), dfUSBR_API_Agg %>% select(Year, MeadInflow, Method) )
# Add Method 3 from API back calc
dfInflows <- rbind(dfInflows, dfUSBR_API_Agg_BackCalc %>% select(Year, MeadInflow, Method))
# Add Method 4 with evap from table
dfInflows <- rbind(dfInflows, dfUSBR_FromEvapTable %>% select(Year, MeadInflow, Method))
# Ignore methods 5 and 6
# Add CRSS method
#dfInflows <- rbind(dfInflows, dfMeadInflowsCRSS %>% select(WaterYear, MeadInflow, Method))
#Compare inflow values
dfInflowCompare <- dcast(dfInflows, Year ~ Method, value.var = "MeadInflow")
# #Natural flow - Not used but preserve
# dfGCFDataToUse <- dfGCFlowsByYear
# dfGCFDataToUse$GCFlow <- dfGCFDataToUse$GCFlow/1e6
# dfGCFDataToUse$MeadInflowNat <- dfGCFDataToUse$MeadInflowNat/1e6
# dfGCFDataToUse$LeeFerryNaturalFlow <- dfGCFDataToUse$LeeFerryNaturalFlow/1e6
# #Rename the MeadInflowNat column to MeadInflow for later use with rbind
# cColNames <- colnames(dfGCFDataToUse)
# cColNames[4] <- "MeadInflow"
# colnames(dfGCFDataToUse) <- cColNames
#
# dfGCFDataToUse$Source <- 'Natural Flow'
#
# #USGS data
# #Pull in the correct columns
# dfGCFDataToUse2 <- as.data.frame(dfGCFlowsUSGS[,c(1,5,6)])
# #Rename the 6th column MeadInflow
# dfGCFDataToUse2 <- dfGCFDataToUse2 %>% dplyr::rename(MeadInflow = MeadInflowUSGS)
# #Assign the Lee Ferry Natural Flow by year
# dfGCFDataToUse2 <- left_join(dfGCFDataToUse2, dfGCFDataToUse[,c("WaterYear","LeeFerryNaturalFlow")], by=c("WaterYear" = "WaterYear"))
# #Sort smallest year to largest year
# dfGCFDataToUse2 <- dfGCFDataToUse2[order(dfGCFDataToUse2$`WaterYear`),]
# dfGCFDataToUse2$Source <- 'USGS'
# #Swap the order of MeadInflow and LeeFerryNaturalFlow
# dfGCFDataToUse2 <- dfGCFDataToUse2 %>% dplyr::select(WaterYear, GCFlow, LeeFerryNaturalFlow, MeadInflow, Source)
#
# #Bind the two data sets together
# dfGCFDataToUse <- rbind(dfGCFDataToUse, dfGCFDataToUse2)
#Subset of methods to plot
cMethodsToPlot <- cMethods[1:4]
cColorsToPlot <- cColors[1:4]
dfInflowsToPlot <- dfInflows %>% filter(Method %in% cMethodsToPlot)
##### Compare ICS deposits to available water
#####
#Load in the ICS data
dfICSBalanceMelt <- read_csv(file = "dfICSBalanceMelt.csv", col_names = TRUE)
dfICSDeposit <- read_csv(file = "dfICSDeposit.csv", col_names = TRUE)
dfICSDepositMelt <- read_csv(file = "dfICSDepositMelt.csv", col_names = TRUE)
cColNames <- unique(dfICSBalanceMelt$variable)
#Figure  - timeseries of bar plots of ICS balances
palBlues <- brewer.pal(9, "Blues")
palReds <- brewer.pal(9, "Reds")
palGreys <- brewer.pal(9, "Greys")
##############
###   FIGURE 2
###   Plot ICS account balances over time
###############
ggplot() +
geom_bar(data=dfICSBalanceMelt %>% filter(variable != "Mexico"), aes(fill=variable,y=value/1e6,x=Year),position="stack", stat="identity") +
#geom_hline(yintercept = nMaxBalance$Total[2]/1e6, size = 2) +
#geom_line(data=dfMaxBalance, aes(color="Max Balance", y=MaxBal/1e6,x=Year), size=2) +
scale_fill_manual(name="Guide1",values = c(palBlues[3],palBlues[6],palBlues[9]),breaks=cColNames[1:3]) +
scale_color_manual(name="Guide2", values=c("Black")) +
#scale_x_continuous(breaks=seq(min(dfICSBalanceMelt$Year),max(dfICSBalanceMelt$Year),by=2),labels=seq(min(dfICSBalanceMelt$Year),max(dfICSBalanceMelt$Year),by=2)) +
#Secondary scale with total max balance
#scale_y_continuous(breaks=seq(0,3,by=1),labels=seq(0,3,by=1), sec.axis = sec_axis(~. +0, name = "", breaks = c(nMaxBalance$Total[2])/1e6, labels = c("Max Balance"))) +
#Secondary scale with individual state max balances
scale_y_continuous(breaks=seq(0,3,by=1),labels=seq(0,3,by=1)) + #, sec.axis = sec_axis(~. +0, name = "Maximum Balance", breaks = dfMaxBalanceCum$CumVal/1e6, labels = dfMaxBalanceCum$StateAsChar)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1), color=FALSE) +
theme_bw() +
labs(x="", y="Intentionally Created Surplus\nAccount Balance\n(MAF)") +
theme(text = element_text(size=20),  legend.title = element_blank(),
legend.text=element_text(size=18),
legend.position= c(0.1,0.80))
##############
###   FIGURE 3
###   Plot ICS deposits over time
###############
ggplot() +
geom_bar(data=dfICSDepositMelt, aes(fill=variable,y=value/1e6,x=Year),position="stack", stat="identity") +
#geom_line(data=dfMaxAnnualAmounts, aes(y=MaxDeposit/1e6,x=Year), size=2) +
#geom_line(data=dfMaxAnnualAmounts, aes(color="Max Withdrawal", y=-MaxWithdraw/1e6,x=Year), size=2) +
scale_fill_manual(name="Guide1",values = c(palBlues[3],palBlues[6],palBlues[9]),breaks=cColNames[1:3]) +
scale_color_manual(name="Guide2", values=c("Black","Black")) +
scale_x_continuous(breaks=seq(min(dfICSDepositMelt$Year),max(dfICSDepositMelt$Year),by=2),labels=seq(min(dfICSDepositMelt$Year),max(dfICSDepositMelt$Year),by=2)) +
#scale_y_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = c(nMaxBalance$Total[1],-nMaxBalance$Total[3])/1e6, labels = c("Max Deposit","Max Withdraw"))) +
#scale_x_continuous(breaks = c(0,5,10,15,20,25),labels=c(0,5,10,15, 20,25), limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#                  sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$label)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1), color = FALSE) +
theme_bw() +
labs(x="", y="Deposit to Intentionally Created Surplus Account\n(MAF per year)") +
theme(text = element_text(size=20),  legend.title = element_blank(), legend.text=element_text(size=18),
legend.position= c(1.075,0.5))
ggplot() +
#Data after 1989
geom_line(data = dfInflowsToPlot, aes(x=Year , y=MeadInflow, color=Method, linetype=Method), size=1.5) +
theme_bw() +
scale_color_manual(values = cColorsToPlot) +
scale_linetype_manual(values = c("solid", "dotdash", "longdash", "dashed")) +
#Make one combined legend
guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="", y="Lake Mead Inflow\n(MAF per year)", color="") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20))
ggplot() +
geom_histogram(data = dfInflowsToPlot %>% filter(Method %in% cMethodsToPlot[1]), aes(x = MeadInflow), binwidth = 1, color = "Black", fill = "Blue") +
#geom_histogram(data = dfInflowsToPlot %>% filter(Method %in% cMethodsToPlot[2]), aes(x = MeadInflow), binwidth = 1, color = "Black", fill = "Red") +
theme_bw() +
labs(x="Lake Mead Inflow\n(USGS Gages)\n(MAF per year)", y="Number of Years") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
lHistorialAllocation <- 9 # Historical allocations for California, Nevada, Arizone, and Mexico
# Baseline to calculate values to show in figure
lBaselinePlot <- 6   # Baseline value on plot from where bars for ICS deposits will show
## Join the Inflow and ICS dataframes
dfInflowICS <- left_join(dfUSBR_API_Agg, dfICSDeposit, by = c("Year" = "Year"))
#Convert ICS values to million-acre feet
dfInflowICS$Arizona <- dfInflowICS$Arizona / 1e6
dfInflowICS$California <- dfInflowICS$California / 1e6
dfInflowICS$Nevada <- dfInflowICS$Nevada / 1e6
dfInflowICS$Mexico <- dfInflowICS$Mexico / 1e6
#Calculate Total ICS deposits each year (sum of positive values)
dfInflowICS$TotalDeposit <- ifelse(dfInflowICS$Arizona > 0, dfInflowICS$Arizona, 0) +
ifelse(dfInflowICS$California > 0, dfInflowICS$California, 0) +
ifelse(dfInflowICS$Nevada > 0, dfInflowICS$Nevada, 0)
#Calculate available water as inflow minus evaporation
dfInflowICS$AvailableWater <- 0
dfInflowICS$AvailableWater <- dfInflowICS$MeadInflow - dfInflowICS$Evaporation
#Replace NAs with zeros
dfInflowICS$TotalDeposit <- replace_na(dfInflowICS$TotalDeposit,0)
# Calculate the ICS deposits to count when there was sufficient available water
# There are 3 cases:
#   1. Available water greater than historical allocations => Count all ICS deposits
#   2. Available water between historical allocation and ICS amount => Count part of the ICS deposit
#   3. Available water less than historical allocation minus ICS deposits => Count none
dfInflowICS$CountICSDeposit <-
# Case 1
ifelse(dfInflowICS$AvailableWater >= lHistorialAllocation, dfInflowICS$TotalDeposit, 0) +
# Case 2
ifelse((dfInflowICS$AvailableWater < lHistorialAllocation) & (dfInflowICS$AvailableWater >= lHistorialAllocation - dfInflowICS$TotalDeposit), dfInflowICS$TotalDeposit - (lHistorialAllocation - dfInflowICS$AvailableWater), 0) +
# Case 3
ifelse(dfInflowICS$AvailableWater <= lHistorialAllocation - dfInflowICS$TotalDeposit, 0, 0)
# Calculate the ICS deposit not to count as difference between the TotalDeposit and Deposit counted
dfInflowICS$NotCountICSDeposit <- dfInflowICS$TotalDeposit - dfInflowICS$CountICSDeposit
sprintf("Total conservation credits all years: %.1f maf", sum(dfInflowICS$TotalDeposit))
sCreditTotals <- c(sprintf("Conservation credits with\nsufficient available water:\n%.1f maf", sum(dfInflowICS$CountICSDeposit)),
sprintf("Credits with insufficient\navailable water:\n%.1f maf", sum(dfInflowICS$NotCountICSDeposit)))
#Melt the CountICSDeposit and NotCount columns into a new dataframe to plot as a stacked bar
cNamesInflowICS <- colnames(dfInflowICS)
nNumCols <- length(cNamesInflowICS)
dfICSCountMelt <- melt(data = dfInflowICS, id.vars = c("WaterYear"), measure.vars = cNamesInflowICS[(nNumCols-1):nNumCols])
ggplot() +
#Ribbon from Inflow to available water
geom_ribbon(data = dfInflowICS, aes(x = WaterYear, max = MeadInflow - lBaselinePlot, min = AvailableWater - lBaselinePlot, fill="Evaporation")) +
#Inflow as line
geom_line(data = dfInflowICS, aes(x= WaterYear, y = MeadInflow - lBaselinePlot, color = "Inflow"), size = 1) + #color=Method shape=Method, size=6) +
#Available water as line
geom_line(data = dfInflowICS, aes(x= WaterYear, y = AvailableWater - lBaselinePlot, color = "Available Water"), size = 1) + #color=Method shape=Method, size=6) +
# ICS counts as stacked bar
geom_bar(data=dfICSCountMelt, aes(fill=variable,y=-value,x=WaterYear),position="stack", stat="identity") +
scale_fill_manual(name="Guide1",values = c(palGreys[3], palReds[7], palReds[9]),breaks=cNamesInflowICS[c(3, (nNumCols-1):nNumCols)], labels = c("Evaporation", sCreditTotals)) +
###scale_color_manual(name="Guide2", values=c("Black")) +
scale_color_manual(name="Guide2", values = c(palBlues[7], palBlues[9])) +
#Add line for 9.0 maf
geom_hline(yintercept = lHistorialAllocation - lBaselinePlot, color="black", linetype = "longdash", size = 1.5) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$WaterYear),max(dfUSBR_API_Agg$WaterYear)) +
# Set the y-axis limits and breaks
scale_y_continuous(breaks=seq(-1,7,1), labels=c(1,0,seq(1,7,1) + lBaselinePlot)) +
#Make one combined legend
guides(color = guide_legend(""), fill = guide_legend("")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(million acre-feet per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
ggplot() +
#Evaporation
geom_point(data = dfUSBR_API_Agg, aes(x= WaterYear, y = EvaporationFromTable, color = "Evaporation"), shape = 15, size = 6) + #color=Method shape=Method, size=6) +
#Add error bars to data points
#Mead
geom_errorbar(data=dfUSBR_API_Agg, aes(x=WaterYear, ymin=EvaporationFromTable - EvaporationRange/2, ymax=EvaporationFromTable + EvaporationRange/2), width=.005,
position=position_dodge(0.2), color="black", show.legend = FALSE) +
#Inflow
geom_point(data = dfUSBR_API_Agg, aes(x= WaterYear, y = MeadInflow, color = "Inflow"), shape = 16, size = 6) + #color=Method shape=Method, size=6) +
#Available water = Inflow - evaporation
geom_point(data = dfUSBR_API_Agg, aes(x= WaterYear, y = MeadInflow - Evaporation, color = "Available Water"),  shape = 17,  size = 6) + #color=Method shape=Method, size=6) +
#Add line for 9.0 maf
geom_hline(yintercept = 9, color="red", linetype = "dashed") +
scale_fill_manual(values = cColorsToPlot) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$WaterYear),max(dfUSBR_API_Agg$WaterYear)) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
ggplot() +
geom_boxplot(data = dfInflowsToPlot, aes(x=Method , y=MeadInflow, fill=Method)) +
theme_bw() +
#Data before 1990
#geom_boxplot(data = dfGCFDataToUse %>% filter(WaterYear < 1990), aes(x="Before 1990 Natural Flow" , y=MeadInflow, fill="Before 1990 Natural Flow")) +
#scale_x_discrete(labels = c("Natural Flow" = "Natural Flow\n(1990 to 2016)", "Before 1990 Natural Flow" = "Natural Flow\n(1905 to 1989)", "USGS" = "USGS\n(1990 to 2016)") ) +
scale_fill_manual(values = cColorsToPlot) +
theme_bw() +
labs(x="", y="Lake Mead Inflow\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
ggplot() +
geom_point(data = dfInflowsWide, aes(x= `USBR Application Program Interface`, y=`USGS Gages`),  size = 6) + #color=Method shape=Method, size=6) +
#geom_point(data = dfInflowsWide, aes(x= WaterYear, y=Diff),  size = 6) + #color=Method shape=Method, size=6) +
#geom_point(data = dfGCFDataToUse %>% filter(WaterYear < 1990), aes(x= LeeFerryNaturalFlow, y=MeadInflow, color="Natural Flow pre 1990", shape="Natural Flow pre 1990"), size=6) +
#scale_shape_manual(values=c(17,16,16), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
#scale_color_manual(values=c("Blue","Red","Pink"), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
#Add 1:1 line
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red", size = 1) +
#Add linear regression line
geom_smooth(data = dfInflowsWide, aes(x= `USBR Application Program Interface`, y=`USGS Gages`),
method = "lm",
formula = y ~ x,
geom = "smooth") +
#Add regression equation to plot
stat_regline_equation(data = dfInflowsWide, aes(x= `USBR Application Program Interface`, y=`USGS Gages`),
label.x=9, label.y=13, size = 6) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="USBR Back Calculation\n(MAF per year)", y="USGS Gages\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
ggplot() +
#Points after 1990 in Blue and Red
#geom_point(data = dfInflowsWide, aes(x= `USBR Application Program Interface`, y=`USGS Gages`),  size = 6) + #color=Method shape=Method, size=6) +
geom_point(data = dfInflowsWide, aes(x= WaterYear, y=Diff),  size = 6) + #color=Method shape=Method, size=6) +
#geom_point(data = dfGCFDataToUse %>% filter(WaterYear < 1990), aes(x= LeeFerryNaturalFlow, y=MeadInflow, color="Natural Flow pre 1990", shape="Natural Flow pre 1990"), size=6) +
#scale_shape_manual(values=c(17,16,16), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
#scale_color_manual(values=c("Blue","Red","Pink"), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
#Add 1:1 line
#geom_abline(intercept = 0, slope = 1, linetype = "dash", color = red, size = 1) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="", y="Difference in Lake Mead Inflow\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))

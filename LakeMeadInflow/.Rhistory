#                 In order to use this, you will need to know the region and Site Datatype ID (SDID).
#                 The lake Mead data will be with the Lower Colorado Regional Offices HDB. For the different values you mentioned,
#                 the SDID's you will need are as follows: Evaporation (SDID=1776), Inflow (SDID=2091), Storage (SDID=1721),
#                 and Release (SDID=1874). From there you can select the timestep you want,
#                  Instantaneous, Hourly, Daily, Monthly, as well as for what time span you want.
#
#                 API query - https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=lchdb&sdi=1776%2C2091%2C1721%2C1874&tstp=MN&t1=2022-01-01T00:00&t2=2024-05-01T00:00&table=R&mrid=0&format=html
#
# `                   This query dynamically builds the end date as most recent month with full data.`
#
#                 Returns an HTML page all on one line that looks like this:
#
#                     <HTML><HEAD><TITLE>Bureau of Reclamation HDB Data</TITLE></HEAD><BODY><TABLE BORDER=1><TR><TH>        DATETIME</TH><TH>     SDI_1776</TH><TH>     SDI_2091</TH><TH>     SDI_1721</TH><TH>     SDI_1874</TH></TR><TR><TD>01/01/2022 00:00</TD><TD> 25036.660109</TD><TD> 733181.246590</TD><TD>   8969839.40</TD><TD> 10400.87768820</TD></TR><TR><TD>02/01/2022 00:00</TD><TD> 22864.126967</TD><TD> 597592.564890</TD><TD>   8945556.40</TD><TD> 10631.16369050</TD></TR> .... <TR><TD>05/01/2024 00:00</TD><TD> 43219.74224840</TD><TD> 621530.394980</TD><TD>   8969054.80</TD><TD> 16139.41935480</TD></TR></TABLE></BODY></HTML>
#
#					        Scrape and parse the html page using the rvest and tidyr packages. Turn into a data frame.
##
##Old Code to downloaded from CSV file
##sExcelFileUSBRAPI <- "USBR-API-MeadData.csv"
##dfUSBR_API<- read_csv(sExcelFileUSBRAPI, skip = 6)
##
# Dynamically read to the current date
CurrDate <- as.Date(Sys.Date())
cYear <- year(CurrDate)
cMonth <- month(CurrDate)
# Calculate the prior month
if (cMonth == 1) {
# We want December of the prior year
sDate <- sprintf("%d-%d-01", cYear-1, 12)
} else {
# We take the prior month of the same year
sDate <- sprintf("%d-%d-01", cYear, cMonth - 1)
}
# Construct the USBR API call by reading data up to the prior month
usbr_url <- paste0("https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=lchdb&sdi=1776%2C2091%2C1721%2C1874&tstp=MN&t1=1990-01-01T00:00&t2=", sDate, "T00:00&table=R&mrid=0&format=html")
# Use the "rvest" and "tidyr" packages
usbr_MeadData <- read_html(usbr_url)
pkg_data <- usbr_MeadData |>
html_element("table") |>
html_table()
# Convert acre-feet to million acre-feet
dfUSBR_API <- data.frame(pkg_data)
# Save the API data to csv to improve reproducibility and in case no internet
write.csv(dfUSBR_API, "dfUSBR_API.csv")
#Turn the SDID Code # into meaningful variable names
dfSDIDcode <- data.frame(code = c(1776, 2091, 1721, 1874),
Field = c("Evaporation", "Inflow", "Storage", "Release"),
Units = c("acre-feet", "??", "acre-feet", "cfs"))
cSDID <- colnames(dfUSBR_API)
cSDID[2:5] <-dfSDIDcode$Field
colnames(dfUSBR_API) <- cSDID
#Convert DATETIME to time series format R understands
dfUSBR_API$Date <- as.Date(dfUSBR_API$DATETIME, "%m/%d/%Y %h:%m")
dfUSBR_API$Date <- mdy_hm(dfUSBR_API$DATETIME)
#Add month, year, and day variables
dfUSBR_API$Month <- month(dfUSBR_API$Date)
dfUSBR_API$Year <- year(dfUSBR_API$Date)
dfUSBR_API$Day <- day(dfUSBR_API$Date)
dfUSBR_API$DaysInMonth <- days_in_month(dfUSBR_API$Date)
# Conversions to million acre-feet
dfUSBR_API$Inflow <- dfUSBR_API$Inflow / 1e6
dfUSBR_API$Evaporation <- dfUSBR_API$Evaporation / 1e6
dfUSBR_API$Storage <- dfUSBR_API$Storage / 1e6
# Convert average cfs per month to million acre-feet per month
dfUSBR_API$Release <- dfUSBR_API$Release * 1.983 * dfUSBR_API$DaysInMonth / 1e6
#Calculate water year
dfUSBR_API$WaterYear <- ifelse(dfUSBR_API$Month >= 10, dfUSBR_API$Year + 1, dfUSBR_API$Year)
# Set inflows for before Aug 1996 to NA because those numbers are crap
dfUSBR_API2 <- dfUSBR_API
dfUSBR_API2$Inflow[dfUSBR_API$Year <= 2014] <- NA
# Aggregate to Month and Year
dfUSBR_API_Agg <- dfUSBR_API2 %>% dplyr::group_by(Year) %>% dplyr::summarise(Evaporation = sum(Evaporation), Release = sum(Release), Inflow = sum(Inflow))
dfUSBR_API_Agg$MeadInflow <- dfUSBR_API_Agg$Inflow
dfUSBR_API_Agg$Method <- cMethods[2]
###############################
#       Inflow Calc Method #3. Back calculate from Lake Mead storage, release, Nevada Diversion, and Lake Mead evaporation (1990 to present)
#
#             Again use the Reclamation Application Program Interface
#Pick the first day of October as day to take storage for the year
dfUSBR_Stor <- dfUSBR_API2 %>% select(Year, Month, Day, Storage ) %>% filter(Month == 1, Day == 1)
#Calculate the difference
dfUSBR_Stor$DeltaStorage <- c(diff(dfUSBR_Stor$Storage),0)
#Join the annual delta storage to the annual release and evaporation data
dfUSBR_API_Agg_BackCalc <- left_join(dfUSBR_API_Agg, dfUSBR_Stor, by = c("Year" = "Year"))
#Now calculate the inflow from release, evaporation, and change in storage
# Lake Mead Inflow = [Change in Storage] + [Release] + [Nevada Diversion] + [Evaporation]
# Use API evaporation data
dfUSBR_API_Agg_BackCalc$MeadInflow <- dfUSBR_API_Agg_BackCalc$DeltaStorage +  dfUSBR_API_Agg$Release +  dfUSBR_API_Agg$Evaporation
dfUSBR_API_Agg_BackCalc$Method <- cMethods[3]
###############################
#       Inflow Calc Method #3. Back calculate from Lake Mead storage, release, Nevada Diversion, and Lake Mead evaporation (1990 to present)
#
#             Again use the Reclamation Application Program Interface
#Pick the first day of October as day to take storage for the year
dfUSBR_Stor <- dfUSBR_API2 %>% select(Year, Month, Day, Storage ) %>% filter(Month == 1, Day == 1)
#Calculate the difference
dfUSBR_Stor$DeltaStorage <- c(diff(dfUSBR_Stor$Storage),0)
#Join the annual delta storage to the annual release and evaporation data
dfUSBR_API_Agg_BackCalc <- left_join(dfUSBR_API_Agg, dfUSBR_Stor, by = c("Year" = "Year"))
#Now calculate the inflow from release, evaporation, and change in storage
# Lake Mead Inflow = [Change in Storage] + [Release] + [Nevada Diversion] + [Evaporation]
# Use API evaporation data
dfUSBR_API_Agg_BackCalc$MeadInflow <- dfUSBR_API_Agg_BackCalc$DeltaStorage +  dfUSBR_API_Agg$Release +  dfUSBR_API_Agg$Evaporation
dfUSBR_API_Agg_BackCalc$Method <- cMethods[3]
########################
# Method #4. Back calculate from Lake Mead storage, release, Nevada Diversion, and Lake Mead evaporation (2004 to present)
#
#           Here we use evaporation data from elevation-storag-area relationship from Colorado River Simulation System (CRSS) model
# Use Evaporation table look up from storage
#### NOTE: need to move from annual to monthly evap calculation
# Create a new data frame
dfUSBR_FromEvapTable <- dfUSBR_API_Agg_BackCalc
dfMeadEvap <- read.csv(file = "EvapData/dfMeadEvap.csv", header = TRUE)
#Interpolate middle Evaporation from Mead Storage - Evap data
dfUSBR_FromEvapTable$EvaporationFromTable <- interpNA(xi = dfUSBR_FromEvapTable$Storage, x= dfMeadEvap$Total.Storage..ac.ft./1e6, y=dfMeadEvap$EvapVolMax/1e6)
#Interpolate range of Evap
dfUSBR_FromEvapTable$EvaporationRange <- interpNA(xi = dfUSBR_FromEvapTable$Storage, x= dfMeadEvap$Total.Storage..ac.ft./1e6, y=dfMeadEvap$EvapVolMaxUp/1e6) - interpNA(xi = dfUSBR_FromEvapTable$Storage, x= dfMeadEvap$Total.Storage..ac.ft./1e6, y=dfMeadEvap$EvapVolMaxLo/1e6)
dfUSBR_FromEvapTable$MeadInflow <- dfUSBR_FromEvapTable$DeltaStorage +  dfUSBR_FromEvapTable$Release +  dfUSBR_FromEvapTable$EvaporationFromTable
dfUSBR_FromEvapTable$Method <- cMethods[4]
##############
###   FIGURE 1
###   Plot API Evaporation vs Table Look up
#############
ggplot() +
geom_point(data = dfUSBR_FromEvapTable, aes(x= Evaporation, y = EvaporationFromTable),  size = 6) + #color=Method shape=Method, size=6) +
#Add error bars to data points
#Mead
geom_errorbar(data=dfUSBR_FromEvapTable, aes(x=Evaporation,ymin=EvaporationFromTable - EvaporationRange/2, ymax=EvaporationFromTable + EvaporationRange/2), width=.005,
position=position_dodge(0.2), color="black", show.legend = FALSE) +
#Add 1:1 line
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red", size = 1) +
#Add linear regression line
geom_smooth(data = dfUSBR_FromEvapTable, aes(x= Evaporation, y = EvaporationFromTable),
method = "lm",
formula = y ~ x,
geom = "smooth") +
#Add regression equation to plot
stat_regline_equation(data = dfUSBR_FromEvapTable, aes(x= Evaporation, y = EvaporationFromTable),
label.x= mean(dfUSBR_FromEvapTable$Evaporation), label.y=mean(dfUSBR_FromEvapTable$EvaporationFromTable), size = 6) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="Evaporation USBR API\n(MAF per year)", y="Evaporation from Table\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
#
##############################
### Inflow Calc Method #5. Lake Mead.Inflow slot from Colorado River Simulation System (CRSS) historical trace (1907 to present)
#
#        A. file SingleTraceOut.xlsx
#
sExcelFileCRSS <- "SingleTraceOut.xlsx"
dfCRSSOutput<- read_excel(sExcelFileCRSS, sheet = 'RunTest') #  range = "A1:E32")
#Rename first column to Date
cCRSSColNames <- colnames(dfCRSSOutput)
cCRSSColNames[1] <- "CRSSDate"
colnames(dfCRSSOutput) <- cCRSSColNames
#Add a Water Year column
dfCRSSOutput$ModelYear <- year(dfCRSSOutput$CRSSDate)
dfCRSSOutput$Year <- dfCRSSOutput$ModelYear - 2022 + 1907
dfCRSSOutput$Month <- month(dfCRSSOutput$CRSSDate)
dfCRSSOutput$WaterYear <- ifelse(dfCRSSOutput$Month >= 10, dfCRSSOutput$Year + 1, dfCRSSOutput$Year)
# Aggregate to year
dfMeadInflowsCRSS <- dfCRSSOutput %>% dplyr::select(WaterYear, Month, Mead.Inflow) %>% dplyr::group_by(WaterYear) %>% dplyr::summarize(MeadInflow = sum(Mead.Inflow)/1e6)
cMethods
dfMeadInflowsCRSS$Method <- cMethods[5]
##############################
### Inflow Calc Method #6. Wang / Schmidt - White Paper #5 [https://qcnr.usu.edu/coloradoriver/news/wp5] (2015 to 2020)
# Read in the Water Balance from the Supplemental spreadsheet => Tables => S18:X18
#
# IGNORE because year definitions are different and draw on same gage data
#
sExcelFileWangSchmidt <- "Supplementary_file-WangSchmidt.xlsx"
dfMeadInflowsWSvals <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S18:W18")
dfMeadInflowsWSyears <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S4:W4")
#Read in values as headers. Reshape to long
cWSvalColNames <- colnames(dfMeadInflowsWSvals)
cWSyearsColNames <- colnames(dfMeadInflowsWSyears)
# Make a new dataframe
dfMeadInflowsWS <- data.frame(Year = cWSyearsColNames, MeadInflow = as.numeric(cWSvalColNames))
#Extract Water year from Year variable
dfMeadInflowsWS$WaterYear <- as.numeric(str_sub(dfMeadInflowsWS$Year,3,6)) + 1
dfMeadInflowsWS$Method <- cMethods[6]
dfInflows <- rbind(dfGCFlowsUSGS %>% select(Year, MeadInflow, Method), dfUSBR_API_Agg %>% select(Year, MeadInflow, Method) )
#########
## Bind all the MeadInflow variables from the dataframes for the different methods
## This dataframe will have the structure WaterYear, MeadInflow, Method
# Methods 1 and 2
dfInflows <- rbind(dfGCFlowsUSGS %>% select(Year, MeadInflow, Method), dfUSBR_API_Agg %>% select(Year, MeadInflow, Method) )
# Add Method 3 from API back calc
dfInflows <- rbind(dfInflows, dfUSBR_API_Agg_BackCalc %>% select(Year, MeadInflow, Method))
#Add Method 4 with evap from table
dfInflows <- rbind(dfInflows, dfUSBR_FromEvapTable %>% select(WaterYear, MeadInflow, Method))
View(dfUSBR_FromEvapTable)
dfInflows <- rbind(dfInflows, dfUSBR_FromEvapTable %>% select(Year, MeadInflow, Method))
View(dfMeadInflowsCRSS)
#Compare inflow values
dfInflowCompare <- dcast(dfInflows, Year ~ Method, value.var = "MeadInflow")
View(dfInflowCompare)
cMethodsToPlot <- cMethods[1:4]
cColorsToPlot <- cColors[1:4]
dfInflowsToPlot <- dfInflows %>% filter(Method %in% cMethodsToPlot)
##### Compare ICS deposits to available water
#####
#Load in the ICS data
dfICSBalanceMelt <- read_csv(file = "dfICSBalanceMelt.csv", col_names = TRUE)
dfICSDeposit <- read_csv(file = "dfICSDeposit.csv", col_names = TRUE)
dfICSDepositMelt <- read_csv(file = "dfICSDepositMelt.csv", col_names = TRUE)
cColNames <- unique(dfICSBalanceMelt$variable)
#Figure  - timeseries of bar plots of ICS balances
palBlues <- brewer.pal(9, "Blues")
palReds <- brewer.pal(9, "Reds")
palGreys <- brewer.pal(9, "Greys")
##############
###   FIGURE 2
###   Plot ICS account balances over time
###############
ggplot() +
geom_bar(data=dfICSBalanceMelt %>% filter(variable != "Mexico"), aes(fill=variable,y=value/1e6,x=Year),position="stack", stat="identity") +
#geom_hline(yintercept = nMaxBalance$Total[2]/1e6, size = 2) +
#geom_line(data=dfMaxBalance, aes(color="Max Balance", y=MaxBal/1e6,x=Year), size=2) +
scale_fill_manual(name="Guide1",values = c(palBlues[3],palBlues[6],palBlues[9]),breaks=cColNames[1:3]) +
scale_color_manual(name="Guide2", values=c("Black")) +
#scale_x_continuous(breaks=seq(min(dfICSBalanceMelt$Year),max(dfICSBalanceMelt$Year),by=2),labels=seq(min(dfICSBalanceMelt$Year),max(dfICSBalanceMelt$Year),by=2)) +
#Secondary scale with total max balance
#scale_y_continuous(breaks=seq(0,3,by=1),labels=seq(0,3,by=1), sec.axis = sec_axis(~. +0, name = "", breaks = c(nMaxBalance$Total[2])/1e6, labels = c("Max Balance"))) +
#Secondary scale with individual state max balances
scale_y_continuous(breaks=seq(0,3,by=1),labels=seq(0,3,by=1)) + #, sec.axis = sec_axis(~. +0, name = "Maximum Balance", breaks = dfMaxBalanceCum$CumVal/1e6, labels = dfMaxBalanceCum$StateAsChar)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1), color=FALSE) +
theme_bw() +
labs(x="", y="Intentionally Created Surplus\nAccount Balance\n(MAF)") +
theme(text = element_text(size=20),  legend.title = element_blank(),
legend.text=element_text(size=18),
legend.position= c(0.1,0.80))
##############
###   FIGURE 3
###   Plot ICS deposits over time
###############
ggplot() +
geom_bar(data=dfICSDepositMelt, aes(fill=variable,y=value/1e6,x=Year),position="stack", stat="identity") +
#geom_line(data=dfMaxAnnualAmounts, aes(y=MaxDeposit/1e6,x=Year), size=2) +
#geom_line(data=dfMaxAnnualAmounts, aes(color="Max Withdrawal", y=-MaxWithdraw/1e6,x=Year), size=2) +
scale_fill_manual(name="Guide1",values = c(palBlues[3],palBlues[6],palBlues[9]),breaks=cColNames[1:3]) +
scale_color_manual(name="Guide2", values=c("Black","Black")) +
scale_x_continuous(breaks=seq(min(dfICSDepositMelt$Year),max(dfICSDepositMelt$Year),by=2),labels=seq(min(dfICSDepositMelt$Year),max(dfICSDepositMelt$Year),by=2)) +
#scale_y_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = c(nMaxBalance$Total[1],-nMaxBalance$Total[3])/1e6, labels = c("Max Deposit","Max Withdraw"))) +
#scale_x_continuous(breaks = c(0,5,10,15,20,25),labels=c(0,5,10,15, 20,25), limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#                  sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$label)) +
guides(fill = guide_legend(keywidth = 1, keyheight = 1), color = FALSE) +
theme_bw() +
labs(x="", y="Deposit to Intentionally Created Surplus Account\n(MAF per year)") +
theme(text = element_text(size=20),  legend.title = element_blank(), legend.text=element_text(size=18),
legend.position= c(1.075,0.5))
##############
###   FIGURE 4
###   Plot Inflow by different methods as Time series
###############
ggplot() +
#Data after 1989
geom_line(data = dfInflowsToPlot, aes(x=WaterYear , y=MeadInflow, color=Method, linetype=Method), size=1.5) +
theme_bw() +
scale_color_manual(values = cColorsToPlot) +
scale_linetype_manual(values = c("solid","dotdash", "longdash")) +
#Make one combined legend
guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="", y="Lake Mead Inflow\n(MAF per year)", color="") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20))
ggplot() +
#Data after 1989
geom_line(data = dfInflowsToPlot, aes(x=Year , y=MeadInflow, color=Method, linetype=Method), size=1.5) +
theme_bw() +
scale_color_manual(values = cColorsToPlot) +
scale_linetype_manual(values = c("solid","dotdash", "longdash")) +
#Make one combined legend
guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="", y="Lake Mead Inflow\n(MAF per year)", color="") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20))
cColorsToPlot <- cColors[1:4]
ggplot() +
#Data after 1989
geom_line(data = dfInflowsToPlot, aes(x=Year , y=MeadInflow, color=Method, linetype=Method), size=1.5) +
theme_bw() +
scale_color_manual(values = cColorsToPlot) +
scale_linetype_manual(values = c("solid","dotdash", "longdash")) +
#Make one combined legend
guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="", y="Lake Mead Inflow\n(MAF per year)", color="") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20))
ggplot() +
#Data after 1989
geom_line(data = dfInflowsToPlot, aes(x=Year , y=MeadInflow, color=Method, linetype=Method), size=1.5) +
theme_bw()
cColorsToPlot
View(dfInflowsToPlot)
ggplot() +
#Data after 1989
geom_line(data = dfInflowsToPlot, aes(x=Year , y=MeadInflow, color=Method, linetype=Method), size=1.5) +
theme_bw() +
scale_color_manual(values = cColorsToPlot) +
scale_linetype_manual(values = c("solid", "dotdash", "longdash", "dashed")) +
#Make one combined legend
guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="", y="Lake Mead Inflow\n(MAF per year)", color="") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20))
load.lib <- c("tidyverse", "readxl", "RColorBrewer", "dplyr", "expss", "reshape2", "pracma", "lubridate", "directlabels", "plyr", "stringr", "ggplot2", "ggpubr", "rvest", "tidyr", "dataRetrieval", "httr")
# Then we select only the packages that aren't currently installed.
install.lib <- load.lib[!load.lib %in% installed.packages()]
# And finally we install the missing packages, including their dependency.
for(lib in install.lib) install.packages(lib,dependencies=TRUE)
# After the installation process completes, we load all packages.
sapply(load.lib,require,character=TRUE)
siteNumbers <- c("9404200", "9415000", "09419800")
site_info <- readNWISsite(siteNumbers[1])
print(site_info)
parameterCd <- "00060" # Discharge in cfs
data <- readNWISdata(siteNumbers[1], parameterCd)
head(data)
siteNumbers <- c("09404200", "09415000", "09419800")
site_info <- readNWISsite(siteNumbers[1])
print(site_info)
parameterCd <- "00060" # Discharge in cfs
data <- readNWISdata(siteNumbers[1], parameterCd)
head(data)
rm(list = ls())  #Clear history
#Load packages in one go
#List of packages
load.lib <- c("tidyverse", "readxl", "RColorBrewer", "dplyr", "expss", "reshape2", "pracma", "lubridate", "directlabels", "plyr", "stringr", "ggplot2", "ggpubr", "rvest", "tidyr", "dataRetrieval")
# Then we select only the packages that aren't currently installed.
install.lib <- load.lib[!load.lib %in% installed.packages()]
# And finally we install the missing packages, including their dependency.
for(lib in install.lib) install.packages(lib,dependencies=TRUE)
# After the installation process completes, we load all packages.
sapply(load.lib,require,character=TRUE)
# Test Code from ChatGBT
# Replace with your actual site number
siteNumber <- "01570500"
# Specify the parameter code for the data you want to retrieve
parameterCd <- "00060"  # 00060 is the parameter code for Discharge (cfs)
# Retrieve data
data <- readNWISdata(siteNumber, parameterCd)
# Print the first few rows of the data
head(data)
siteNumber <- 01570500
# Specify the parameter code for the data you want to retrieve
parameterCd <- "00060"  # 00060 is the parameter code for Discharge (cfs)
# Retrieve data
data <- readNWISdata(siteNumber, parameterCd)
# Print the first few rows of the data
head(data)
siteNumber <- "01570500"
# Specify the parameter code for the data you want to retrieve
parameterCd <- "00060"  # 00060 is the parameter code for Discharge (cfs)
# Retrieve data
data <- readNWISdata(siteNumber, parameterCd)
# Print the first few rows of the data
head(data)
vignette("dataRetrieval", package = "dataRetrieval")
start.date <- "2000-01-01"
end.date <- "2023-12-31"
# Retrieve data
data <- readNWISdata(siteNumbers = siteNumber, parameterCd, start.date, end.date)
data <- readNWISdata(siteNumbers = siteNumber, parameterCd = parameterCd, startDate = start.date, endDate = end.date)
head(data)
site_info <- readNWISsite(siteNumbers[1])
siteNumbers <- c("09404200", "09415000", "09419800")
site_info <- readNWISsite(siteNumbers[1])
View(site_info)
CurrDate <- as.Date(Sys.Date())
cYear <- year(CurrDate)
cMonth <- month(CurrDate)
# Calculate the prior month
if (cMonth == 1) {
# We want December of the prior year
sDate <- sprintf("%d-%d-01", cYear-1, 12)
} else {
# We take the prior month of the same year
sDate <- sprintf("%d-%d-01", cYear, cMonth - 1)
}
end.date <- sDate
data <- readNWISdata(siteNumbers = siteNumbers[1], parameterCd = parameterCd, startDate = start.date, endDate = end.date)
View(data)
data$date <- as.Date(data$dateTime)
ggplot(data=data) +
geom_line(aes(x = date, y = value))
cHeaders <- colnames(data)
cColHeaders <- colnames(data)
cColHeaders
#Rename the data column to a useful name
cColHeaders <- colnames(data)
cColHeaders[4] <- "Flow.cfs"
colnames(data) <- cColHeaders
ggplot(data=data) +
geom_line(aes(x = date, y = Flow.cfs))
for(site in siteNumbers){
dataTemp <- readNWISdata(siteNumbers = site, parameterCd = parameterCd, startDate = start.date, endDate = end.date)
if(site == siteNumbers[1]) {
data <- dataTemp
}
else {
data <- rbind(data,dataTemp)
}
}
cColHeaders <- colnames(data)
cColHeaders[4] <- "Flow.cfs"
colnames(data) <- cColHeaders
data$date <- as.Date(data$dateTime)
head(data)
ggplot(data=data) +
geom_line(aes(x = date, y = Flow.cfs, color = site_no))
siteNumbers <- c("09404200", "09415000", "09419800")
parameterCd <- "00060" # Discharge in cfs
start.date <- "2000-01-01"
end.date <- sDate
for(site in siteNumbers){
site_info <- readNWISsite(site)
dataTemp <- readNWISdata(siteNumbers = site, parameterCd = parameterCd, startDate = start.date, endDate = end.date)
dataTemp$StationName <- site_info$station_nm
if(site == siteNumbers[1]) {
data <- dataTemp
}
else {
data <- rbind(data,dataTemp)
}
}
cColHeaders <- colnames(data)
cColHeaders[4] <- "Flow.cfs"
colnames(data) <- cColHeaders
data$date <- as.Date(data$dateTime)
head(data)
ggplot(data=data) +
geom_line(aes(x = date, y = Flow.cfs, color = StationName))
for(site in siteNumbers){
site_info <- readNWISsite(site)
dataTemp <- readNWISdata(siteNumbers = site, parameterCd = parameterCd, startDate = start.date, endDate = end.date)
dataTemp$StationName <- site_info$station_nm
if(site == siteNumbers[1]) {
data <- dataTemp
}
else {
data <- rbind(data,dataTemp)
}
}
#Rename the data column to a useful name
cColHeaders <- colnames(data)
cColHeaders[4] <- "Flow.cfs"
colnames(data) <- cColHeaders
data$date <- as.Date(data$dateTime)
# Cast so each stream gage is a column
dfInflowsWide <- dcast(data, date ~ StationName, value.var = "Flow.cfs")
View(dfInflowsWide)
dfInflowsWide$MeadInflow <- dfInflowsWide$`COLORADO RVR ABV DIAMOND CREEK NR PEACH SPRINGS AZ` + dfInflowsWide$`LV WASH BLW LAKE LAS VEGAS NR BOULDER CITY, NV` + dfInflowsWide$`VIRGIN RV AT LITTLEFIELD, AZ`
dfInflowsWide$Year <- year(dfInflowsWide$date)
data$Flow.acft <- 1.983 * data$Flow.cfs
dfInflowsWide <- dcast(data, date ~ StationName, value.var = "Flow.acft")
dfInflowsWide$MeadInflow <- dfInflowsWide$`COLORADO RVR ABV DIAMOND CREEK NR PEACH SPRINGS AZ` + dfInflowsWide$`LV WASH BLW LAKE LAS VEGAS NR BOULDER CITY, NV` + dfInflowsWide$`VIRGIN RV AT LITTLEFIELD, AZ`
dfInflowsWide$Year <- year(dfInflowsWide$date)
dfInflowsAnnual <- dfInflowsWide %>% dplyr::group_by(Year) %>% dplyr::summarise(MeadInflow = sum(MeadInflow))
dfInflowsAnnual <- dfInflowsWide %>% dplyr::group_by(Year) %>% dplyr::summarise(MeadInflow = sum(MeadInflow))
ggplot(data=dfInflowsAnnual) +
geom_line(aes(x = date, y = MeadInflow, color = StationName))
ggplot(data=dfInflowsAnnual) +
geom_line(aes(x = date, y = MeadInflow))
data$Flow.acft <- ata$Flow.acft %>% replace(is.na(.), 0)
# Cast so each stream gage is a column
dfInflowsWide <- dcast(data, date ~ StationName, value.var = "Flow.acft")
dfInflowsWide$MeadInflow <- dfInflowsWide$`COLORADO RVR ABV DIAMOND CREEK NR PEACH SPRINGS AZ` + dfInflowsWide$`LV WASH BLW LAKE LAS VEGAS NR BOULDER CITY, NV` + dfInflowsWide$`VIRGIN RV AT LITTLEFIELD, AZ`
dfInflowsWide$Year <- year(dfInflowsWide$date)
dfInflowsAnnual <- dfInflowsWide %>% dplyr::group_by(Year) %>% dplyr::summarise(MeadInflow = sum(MeadInflow))
data$Flow.acft <- 1.983 * data$Flow.cfs
# Replace NAs with 0s
data$Flow.acft <- data$Flow.acft %>% replace(is.na(.), 0)
# Cast so each stream gage is a column
dfInflowsWide <- dcast(data, date ~ StationName, value.var = "Flow.acft")
dfInflowsWide$MeadInflow <- dfInflowsWide$`COLORADO RVR ABV DIAMOND CREEK NR PEACH SPRINGS AZ` + dfInflowsWide$`LV WASH BLW LAKE LAS VEGAS NR BOULDER CITY, NV` + dfInflowsWide$`VIRGIN RV AT LITTLEFIELD, AZ`
dfInflowsWide$Year <- year(dfInflowsWide$date)
dfInflowsAnnual <- dfInflowsWide %>% dplyr::group_by(Year) %>% dplyr::summarise(MeadInflow = sum(MeadInflow))
View(dfInflowsAnnual)
ggplot(data=dfInflowsAnnual) +
geom_line(aes(x = Year, y = MeadInflow))
dfGCFFlowsUSGS <- dfInflowsWide %>% dplyr::group_by(Year) %>% dplyr::summarise(MeadInflow = sum(MeadInflow))
dfGCFlowsUSGS$Method <- cMethods[1]
ggplot(data=dfGCFFlowsUSGS) +
geom_line(aes(x = Year, y = MeadInflow))
#Labels for each method to use in grouping and plotting
cMethods <- c("USGS Gages", "USBR API Inflow", "USBR API Back Calc", "USBR Back Calc\nwith Evap from Table", "CRSS", "Wang-Schmidt")
cColors <- c("Blue", "Red", "Pink", "Purple", "Brown", "Black")
dfGCFlowsUSGS$Method <- cMethods[1]
dfGCFFlowsUSGS <- dfInflowsWide %>% dplyr::group_by(Year) %>% dplyr::summarise(MeadInflow = sum(MeadInflow))
dfGCFlowsUSGS$Method <- cMethods[1]
dfGCFFlowsUSGS$Method <- cMethods[1]
#########
## Bind all the MeadInflow variables from the dataframes for the different methods
## This dataframe will have the structure WaterYear, MeadInflow, Method
# Methods 1 and 2
dfInflows <- rbind(dfGCFFlowsUSGS %>% select(Year, MeadInflow, Method), dfUSBR_API_Agg %>% select(Year, MeadInflow, Method) )
# Add Method 3 from API back calc
dfInflows <- rbind(dfInflows, dfUSBR_API_Agg_BackCalc %>% select(Year, MeadInflow, Method))
# Add Method 4 with evap from table
dfInflows <- rbind(dfInflows, dfUSBR_FromEvapTable %>% select(Year, MeadInflow, Method))

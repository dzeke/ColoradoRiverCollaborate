### Read in the Natural Flow data and convert it to annual flows
# Note used in calc of Mead Inflow. But keep anyway for backward compatibility
sExcelFileGrandCanyonFlow <- 'HistoricalNaturalFlow.xlsx'
dfGCFlows <- read_excel(sExcelFileGrandCanyonFlow, sheet = 'Total Natural Flow',  range = "U1:Z1324")
dfGCDates <- read_excel(sExcelFileGrandCanyonFlow, sheet = 'Total Natural Flow',  range = "A1:A1324")
#Merge and combine into one Data frame
dfGCFlows$Date <- dfGCDates$`Natural Flow And Salt Calc model Object.Slot`
#Calculate Grand Canyon Tributary flows as sum of Paria, Little Colorado River, Virgin, and intervening flows
#Just tribs (without intervening)
#dfGCFlows$Total <- dfGCFlows$`CoRivPowellToVirgin:PariaGains.LocalInflow` + dfGCFlows$`CoRivPowellToVirgin:LittleCoR.LocalInflow` +
#                          dfGCFlows$VirginRiver.Inflow
#Tribs + Gains above Hoover
dfGCFlows$Total <- dfGCFlows$`CoRivPowellToVirgin:PariaGains.LocalInflow` + dfGCFlows$`CoRivPowellToVirgin:LittleCoR.LocalInflow` +
dfGCFlows$VirginRiver.Inflow + dfGCFlows$`CoRivVirginToMead:GainsAboveHoover.LocalInflow` - dfGCFlows$`CoRivPowellToVirgin:GainsAboveGC.LocalInflow`
dfGCFlows$Year <- year(dfGCFlows$Date)
dfGCFlows$Month <- month(as.Date(dfGCFlows$Date,"%Y-%m-%d"))
dfGCFlows$WaterYear <- ifelse(dfGCFlows$Month >= 10,dfGCFlows$Year,dfGCFlows$Year + 1)
View(dfGCFlows)
#Convert to Water Year and sum by water year
dfGCFlowsByYear <- aggregate(dfGCFlows$Total, by=list(Category=dfGCFlows$WaterYear), FUN=sum)
dfLeeFerryByYear <- aggregate(dfGCFlows$`HistoricalNaturalFlow.AboveLeesFerry`, by=list(Category=dfGCFlows$WaterYear), FUN=sum)
#Change the Names
colnames(dfGCFlowsByYear) <- c("WaterYear","GCFlow")
colnames(dfLeeFerryByYear) <- c("WaterYear", "LeeFerryNaturalFlow")
dfGCFlowsByYear$LeeFerryNaturalFlow <- dfLeeFerryByYear$LeeFerryNaturalFlow
#Calculate Lake Mead Inflow as sum of GCFlow and Lee Ferry Natural Flow
dfGCFlowsByYear$MeadInflowNat <- dfGCFlowsByYear$GCFlow + dfGCFlowsByYear$LeeFerryNaturalFlow
sExcelFileUSGSFlow <- 'USGSInterveningFlowData.xlsx'
dfGCFlowsUSGS <- read_excel(sExcelFileUSGSFlow, sheet = 'Combined',  range = "A1:E34")
cColNames <- colnames(dfGCFlowsUSGS)
cColNames[1] <- "WaterYear"
cColNames[2] <- "LeeFerryFlow"
cColNames[5] <- "LasVegasWash"
colnames(dfGCFlowsUSGS) <- cColNames
dfGCFlowsUSGS <- dfGCFlowsUSGS %>% replace(is.na(.),0)
#Calculate the total
#Grand Canyon interveening flow
dfGCFlowsUSGS$GCFlow <- dfGCFlowsUSGS$`Colorado River near Peach Springs` - dfGCFlowsUSGS$LeeFerryFlow + dfGCFlowsUSGS$`Virgin River at Littlefield`
#Lake Mead inflow
dfGCFlowsUSGS$MeadInflow <- dfGCFlowsUSGS$`Colorado River near Peach Springs` + dfGCFlowsUSGS$`Virgin River at Littlefield` + dfGCFlowsUSGS$LasVegasWash
dfGCFlowsUSGS$Method <- cMethods[1]
#Dynamically read to the current date
CurrDate <- as.Date(Sys.Date())
cYear <- year(CurrDate)
cMonth <- month(CurrDate)
#Calculate the prior month
if (cMonth == 1) {
# We want December of the prior year
sDate <- sprintf("%d-%d-01", cYear-1, 12)
} else {
# We take the prior month of the same year
sDate <- sprintf("%d-%d-01", cYear, cMonth - 1)
}
#Construct the USBR API call by reading data up to the prior month
usbr_url <- paste0("https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=lchdb&sdi=1776%2C2091%2C1721%2C1874&tstp=MN&t1=1990-01-01T00:00&t2=", sDate, "T00:00&table=R&mrid=0&format=html")
usbr_MeadData <- read_html(usbr_url)
pkg_data <- usbr_MeadData |>
html_element("table") |>
html_table()
dfUSBR_API <- data.frame(pkg_data)
#Save the API data to csv to improve reproducibility and in case no internet
write.csv(dfUSBR_API, "dfUSBR_API.csv")
dfSDIDcode <- data.frame(code = c(1776, 2091, 1721, 1874),
Field = c("Evaporation", "Inflow", "Storage", "Release"),
Units = c("acre-feet", "??", "acre-feet", "cfs"))
cSDID <- colnames(dfUSBR_API)
cSDID[2:5] <-dfSDIDcode$Field
colnames(dfUSBR_API) <- cSDID
dfUSBR_API$Date <- as.Date(dfUSBR_API$DATETIME, "%m/%d/%Y %h:%m")
dfUSBR_API$Date <- mdy_hm(dfUSBR_API$DATETIME)
dfUSBR_API$Month <- month(dfUSBR_API$Date)
dfUSBR_API$Year <- year(dfUSBR_API$Date)
dfUSBR_API$Day <- day(dfUSBR_API$Date)
dfUSBR_API$Release <- dfUSBR_API$Release * 1.983 * days_in_month(dfUSBR_API$DATETIME) / 1e6
dfUSBR_API$Inflow <- dfUSBR_API$Inflow * 1.983 * days_in_month(dfUSBR_API$DATETIME) / 1e6
dfUSBR_API <- data.frame(pkg_data)
#Save the API data to csv to improve reproducibility and in case no internet
write.csv(dfUSBR_API, "dfUSBR_API.csv")
#Turn the SDID Code # into meaningful variable names
dfSDIDcode <- data.frame(code = c(1776, 2091, 1721, 1874),
Field = c("Evaporation", "Inflow", "Storage", "Release"),
Units = c("acre-feet", "??", "acre-feet", "cfs"))
cSDID <- colnames(dfUSBR_API)
cSDID[2:5] <-dfSDIDcode$Field
colnames(dfUSBR_API) <- cSDID
#Convert DATETIME to time series format R understands
dfUSBR_API$Date <- as.Date(dfUSBR_API$DATETIME, "%m/%d/%Y %h:%m")
dfUSBR_API$Date <- mdy_hm(dfUSBR_API$DATETIME)
#Add month, year, and day variables
dfUSBR_API$Month <- month(dfUSBR_API$Date)
dfUSBR_API$Year <- year(dfUSBR_API$Date)
dfUSBR_API$Day <- day(dfUSBR_API$Date)
#Conversions to million acre-feet
#Convert average cfs per month to million acre-feet per month
dfUSBR_API$Release <- dfUSBR_API$Release * 1.983 * days_in_month(dfUSBR_API$DATETIME) / 1e6
dfUSBR_API$Inflow <- dfUSBR_API$Inflow * 1.983 * days_in_month(dfUSBR_API$DATETIME) / 1e6
#Convert acre-feet to million acre-feet
dfUSBR_API$Evaporation <- dfUSBR_API$Evaporation / 1e6
dfUSBR_API$Storage <- dfUSBR_API$Storage / 1e6
#Calculate water year
dfUSBR_API$WaterYear <- ifelse(dfUSBR_API$Month >= 10, dfUSBR_API$Year + 1, dfUSBR_API$Year)
#Filter out rows with NaN - Evaporation at early months and years
dfUSBR_API2 <- na.omit(dfUSBR_API) # We will come back and fill in the evaporation using an evap rate and the storage-area curve
#Filter out years < 2004 because some months have NAs for Evap
dfUSBR_API2 <- dfUSBR_API2 %>% filter(WaterYear > 2004)
#Pick the first day of October as day to take storage for the year
dfUSBR_Stor <- dfUSBR_API2 %>% select(WaterYear, Month, Day, Storage ) %>% filter(Month == 10, Day == 1)
#Calculate the difference
dfUSBR_Stor$DeltaStorage <- c(diff(dfUSBR_Stor$Storage),0)
#Aggregate to Month and Year
dfUSBR_API_Agg <- dfUSBR_API2 %>% dplyr::group_by(WaterYear) %>% dplyr::summarise(Evaporation = sum(Evaporation), Release = sum(Release), Inflow = sum(Inflow))
dfUSBR_API_Agg <- left_join(dfUSBR_API_Agg, dfUSBR_Stor, by = c("WaterYear" = "WaterYear"))
View(dfUSBR_API_Agg)
View(dfGCFlowsUSGS)
View(dfUSBR_API_Agg)
dfUSBR_API <- data.frame(pkg_data)
#Save the API data to csv to improve reproducibility and in case no internet
write.csv(dfUSBR_API, "dfUSBR_API.csv")
#Turn the SDID Code # into meaningful variable names
dfSDIDcode <- data.frame(code = c(1776, 2091, 1721, 1874),
Field = c("Evaporation", "Inflow", "Storage", "Release"),
Units = c("acre-feet", "??", "acre-feet", "cfs"))
cSDID <- colnames(dfUSBR_API)
cSDID[2:5] <-dfSDIDcode$Field
colnames(dfUSBR_API) <- cSDID
#Convert DATETIME to time series format R understands
dfUSBR_API$Date <- as.Date(dfUSBR_API$DATETIME, "%m/%d/%Y %h:%m")
dfUSBR_API$Date <- mdy_hm(dfUSBR_API$DATETIME)
#Add month, year, and day variables
dfUSBR_API$Month <- month(dfUSBR_API$Date)
dfUSBR_API$Year <- year(dfUSBR_API$Date)
dfUSBR_API$Day <- day(dfUSBR_API$Date)
#Conversions to million acre-feet
#Convert average cfs per month to million acre-feet per month
dfUSBR_API$Release <- dfUSBR_API$Release * 1.983 * days_in_month(dfUSBR_API$DATETIME) / 1e6
dfUSBR_API$Inflow <- dfUSBR_API$Inflow * 1.983 * days_in_month(dfUSBR_API$DATETIME) / 1e6
dfUSBR_API$Evaporation <- dfUSBR_API$Evaporation / 1e6
dfUSBR_API$Storage <- dfUSBR_API$Storage / 1e6
#Calculate water year
dfUSBR_API$WaterYear <- ifelse(dfUSBR_API$Month >= 10, dfUSBR_API$Year + 1, dfUSBR_API$Year)
#Filter out rows with NaN - Evaporation at early months and years
dfUSBR_API2 <- na.omit(dfUSBR_API) # We will come back and fill in the evaporation using an evap rate and the storage-area curve
View(dfUSBR_API2)
dfUSBR_API <- data.frame(pkg_data)
#Save the API data to csv to improve reproducibility and in case no internet
write.csv(dfUSBR_API, "dfUSBR_API.csv")
#Turn the SDID Code # into meaningful variable names
dfSDIDcode <- data.frame(code = c(1776, 2091, 1721, 1874),
Field = c("Evaporation", "Inflow", "Storage", "Release"),
Units = c("acre-feet", "??", "acre-feet", "cfs"))
cSDID <- colnames(dfUSBR_API)
cSDID[2:5] <-dfSDIDcode$Field
colnames(dfUSBR_API) <- cSDID
#Convert DATETIME to time series format R understands
dfUSBR_API$Date <- as.Date(dfUSBR_API$DATETIME, "%m/%d/%Y %h:%m")
dfUSBR_API$Date <- mdy_hm(dfUSBR_API$DATETIME)
#Add month, year, and day variables
dfUSBR_API$Month <- month(dfUSBR_API$Date)
dfUSBR_API$Year <- year(dfUSBR_API$Date)
dfUSBR_API$Day <- day(dfUSBR_API$Date)
dfUSBR_API$Release <- dfUSBR_API$Release * 1.983 * days_in_month(dfUSBR_API$DATETIME) / 1e6
dfUSBR_API$Release <- dfUSBR_API$Release * 1.983 * days_in_month(dfUSBR_API$DATETIME) / 1e6
dfUSBR_API <- data.frame(pkg_data)
#Save the API data to csv to improve reproducibility and in case no internet
write.csv(dfUSBR_API, "dfUSBR_API.csv")
#Turn the SDID Code # into meaningful variable names
dfSDIDcode <- data.frame(code = c(1776, 2091, 1721, 1874),
Field = c("Evaporation", "Inflow", "Storage", "Release"),
Units = c("acre-feet", "??", "acre-feet", "cfs"))
cSDID <- colnames(dfUSBR_API)
cSDID[2:5] <-dfSDIDcode$Field
colnames(dfUSBR_API) <- cSDID
#Convert DATETIME to time series format R understands
dfUSBR_API$Date <- as.Date(dfUSBR_API$DATETIME, "%m/%d/%Y %h:%m")
dfUSBR_API$Date <- mdy_hm(dfUSBR_API$DATETIME)
#Add month, year, and day variables
dfUSBR_API$Month <- month(dfUSBR_API$Date)
dfUSBR_API$Year <- year(dfUSBR_API$Date)
dfUSBR_API$Day <- day(dfUSBR_API$Date)
dfUSBR_API$Inflow <- dfUSBR_API$Inflow * 1.983 * days_in_month(dfUSBR_API$DATETIME) / 1e6
days_in_month(dfUSBR_API$DATETIME)
dfUSBR_API$DaysInMonth <- days_in_month(dfUSBR_API$DATETIME)
dfUSBR_API$DaysInMonth <- days_in_month(dfUSBR_API$Date)
dfUSBR_API$Inflow <- dfUSBR_API$Inflow * 1.983 * dfUSBR_API$DaysInMonth / 1e6
dfUSBR_API$Release <- dfUSBR_API$Release * 1.983 * dfUSBR_API$DaysInMonth / 1e6
dfUSBR_API$Evaporation <- dfUSBR_API$Evaporation / 1e6
dfUSBR_API$Storage <- dfUSBR_API$Storage / 1e6
dfUSBR_API <- data.frame(pkg_data)
write.csv(dfUSBR_API, "dfUSBR_API.csv")
#Turn the SDID Code # into meaningful variable names
dfSDIDcode <- data.frame(code = c(1776, 2091, 1721, 1874),
Field = c("Evaporation", "Inflow", "Storage", "Release"),
Units = c("acre-feet", "??", "acre-feet", "cfs"))
cSDID <- colnames(dfUSBR_API)
cSDID[2:5] <-dfSDIDcode$Field
colnames(dfUSBR_API) <- cSDID
#Convert DATETIME to time series format R understands
dfUSBR_API$Date <- as.Date(dfUSBR_API$DATETIME, "%m/%d/%Y %h:%m")
dfUSBR_API$Date <- mdy_hm(dfUSBR_API$DATETIME)
#Add month, year, and day variables
dfUSBR_API$Month <- month(dfUSBR_API$Date)
dfUSBR_API$Year <- year(dfUSBR_API$Date)
dfUSBR_API$Day <- day(dfUSBR_API$Date)
dfUSBR_API$DaysInMonth <- days_in_month(dfUSBR_API$Date)
dfUSBR_API$Inflow <- dfUSBR_API$Inflow * 1.983 * dfUSBR_API$DaysInMonth / 1e6
dfUSBR_API <- data.frame(pkg_data)
#Save the API data to csv to improve reproducibility and in case no internet
write.csv(dfUSBR_API, "dfUSBR_API.csv")
#Turn the SDID Code # into meaningful variable names
dfSDIDcode <- data.frame(code = c(1776, 2091, 1721, 1874),
Field = c("Evaporation", "Inflow", "Storage", "Release"),
Units = c("acre-feet", "??", "acre-feet", "cfs"))
cSDID <- colnames(dfUSBR_API)
cSDID[2:5] <-dfSDIDcode$Field
colnames(dfUSBR_API) <- cSDID
#Convert DATETIME to time series format R understands
dfUSBR_API$Date <- as.Date(dfUSBR_API$DATETIME, "%m/%d/%Y %h:%m")
dfUSBR_API$Date <- mdy_hm(dfUSBR_API$DATETIME)
#Add month, year, and day variables
dfUSBR_API$Month <- month(dfUSBR_API$Date)
dfUSBR_API$Year <- year(dfUSBR_API$Date)
dfUSBR_API$Day <- day(dfUSBR_API$Date)
dfUSBR_API$DaysInMonth <- days_in_month(dfUSBR_API$Date)
dfUSBR_API$Inflow <- dfUSBR_API$Inflow / 1e6
dfUSBR_API$Release <- dfUSBR_API$Release * 1.983 * dfUSBR_API$DaysInMonth / 1e6
dfUSBR_API$Evaporation <- dfUSBR_API$Evaporation / 1e6
dfUSBR_API$Storage <- dfUSBR_API$Storage / 1e6
dfUSBR_API$WaterYear <- ifelse(dfUSBR_API$Month >= 10, dfUSBR_API$Year + 1, dfUSBR_API$Year)
#Filter out rows with NaN - Evaporation at early months and years
dfUSBR_API2 <- na.omit(dfUSBR_API) # We will come back and fill in the evaporation using an evap rate and the storage-area curve
#Filter out years < 2004 because some months have NAs for Evap
dfUSBR_API2 <- dfUSBR_API2 %>% filter(WaterYear > 2004)
#Pick the first day of October as day to take storage for the year
dfUSBR_Stor <- dfUSBR_API2 %>% select(WaterYear, Month, Day, Storage ) %>% filter(Month == 10, Day == 1)
dfUSBR_Stor$DeltaStorage <- c(diff(dfUSBR_Stor$Storage),0)
#Aggregate to Month and Year
dfUSBR_API_Agg <- dfUSBR_API2 %>% dplyr::group_by(WaterYear) %>% dplyr::summarise(Evaporation = sum(Evaporation), Release = sum(Release), Inflow = sum(Inflow))
#Aggregate to Month and Year
#dfUSBR_API_Agg <- dfUSBR_API2 %>% dplyr::group_by(WaterYear, Month) %>% dplyr::summarise(Evaporation = sum(Evaporation), Release = sum(Release))
#Join the annual delta storage to the annual release and evaporation data
dfUSBR_API_Agg <- left_join(dfUSBR_API_Agg, dfUSBR_Stor, by = c("WaterYear" = "WaterYear"))
dfUSBR_API_Agg$MeadInflow <- dfUSBR_API_Agg$DeltaStorage +  dfUSBR_API_Agg$Release +  dfUSBR_API_Agg$Evaporation
dfUSBR_API_Agg$Method <- cMethods[2]
#Use Evaporation table look up from storage
#Create a new data frame
dfUSBR_FromEvapTable <- dfUSBR_API_Agg
dfUSBR_FromEvapTable$MeadInflow <- dfUSBR_FromEvapTable$DeltaStorage +  dfUSBR_FromEvapTable$Release +  dfUSBR_FromEvapTable$EvaporationFromTable
dfUSBR_FromEvapTable$Method <- cMethods[3]
View(dfUSBR_API)
View(dfUSBR_API)
rm(list = ls())  #Clear history
#Load packages in one go
#List of packages
load.lib <- c("tidyverse", "readxl", "RColorBrewer", "dplyr", "expss", "reshape2", "pracma", "lubridate", "directlabels", "plyr", "stringr", "ggplot2", "ggpubr", "rvest", "tidyr")
# Then we select only the packages that aren't currently installed.
install.lib <- load.lib[!load.lib %in% installed.packages()]
# And finally we install the missing packages, including their dependency.
for(lib in install.lib) install.packages(lib,dependencies=TRUE)
# After the installation process completes, we load all packages.
sapply(load.lib,require,character=TRUE)
# New function interpNA to return NAs for values outside interpolation range (from https://stackoverflow.com/questions/47295879/using-interp1-in-r)
interpNA <- function(x, y, xi = x, ...) {
yi <- rep(NA, length(xi));
sel <- which(xi >= range(x)[1] & xi <= range(x)[2]);
yi[sel] <- interp1(x = x, y = y, xi = xi[sel], ...);
return(yi);
}
#Labels for each method to use in grouping and plotting
cMethods <- c("USGS Gages", "USBR API Inflow", "USBR API Back Calc", "USBR Back Calc\nwith Evap from Table", "CRSS", "Wang-Schmidt")
cColors <- c("Blue", "Red", "Pink", "Purple", "Brown", "Black")
# the Combined data frame will have the variables WaterYear, MeadInflow, Method
### Read in the Natural Flow data and convert it to annual flows
# Note used in calc of Mead Inflow. But keep anyway for backward compatibility
sExcelFileGrandCanyonFlow <- 'HistoricalNaturalFlow.xlsx'
dfGCFlows <- read_excel(sExcelFileGrandCanyonFlow, sheet = 'Total Natural Flow',  range = "U1:Z1324")
dfGCDates <- read_excel(sExcelFileGrandCanyonFlow, sheet = 'Total Natural Flow',  range = "A1:A1324")
#Merge and combine into one Data frame
dfGCFlows$Date <- dfGCDates$`Natural Flow And Salt Calc model Object.Slot`
#Calculate Grand Canyon Tributary flows as sum of Paria, Little Colorado River, Virgin, and intervening flows
#Just tribs (without intervening)
#dfGCFlows$Total <- dfGCFlows$`CoRivPowellToVirgin:PariaGains.LocalInflow` + dfGCFlows$`CoRivPowellToVirgin:LittleCoR.LocalInflow` +
#                          dfGCFlows$VirginRiver.Inflow
#Tribs + Gains above Hoover
dfGCFlows$Total <- dfGCFlows$`CoRivPowellToVirgin:PariaGains.LocalInflow` + dfGCFlows$`CoRivPowellToVirgin:LittleCoR.LocalInflow` +
dfGCFlows$VirginRiver.Inflow + dfGCFlows$`CoRivVirginToMead:GainsAboveHoover.LocalInflow` - dfGCFlows$`CoRivPowellToVirgin:GainsAboveGC.LocalInflow`
dfGCFlows$Year <- year(dfGCFlows$Date)
dfGCFlows$Month <- month(as.Date(dfGCFlows$Date,"%Y-%m-%d"))
dfGCFlows$WaterYear <- ifelse(dfGCFlows$Month >= 10,dfGCFlows$Year,dfGCFlows$Year + 1)
#Convert to Water Year and sum by water year
dfGCFlowsByYear <- aggregate(dfGCFlows$Total, by=list(Category=dfGCFlows$WaterYear), FUN=sum)
dfLeeFerryByYear <- aggregate(dfGCFlows$`HistoricalNaturalFlow.AboveLeesFerry`, by=list(Category=dfGCFlows$WaterYear), FUN=sum)
#Change the Names
colnames(dfGCFlowsByYear) <- c("WaterYear","GCFlow")
colnames(dfLeeFerryByYear) <- c("WaterYear", "LeeFerryNaturalFlow")
dfGCFlowsByYear$LeeFerryNaturalFlow <- dfLeeFerryByYear$LeeFerryNaturalFlow
#Calculate Lake Mead Inflow as sum of GCFlow and Lee Ferry Natural Flow
dfGCFlowsByYear$MeadInflowNat <- dfGCFlowsByYear$GCFlow + dfGCFlowsByYear$LeeFerryNaturalFlow
##############################
### Inflow Calc Method #1. Add U.S. Geological Service data from stream gages
# Read in the USGS gaged data
sExcelFileUSGSFlow <- 'USGSInterveningFlowData.xlsx'
dfGCFlowsUSGS <- read_excel(sExcelFileUSGSFlow, sheet = 'Combined',  range = "A1:E34")
cColNames <- colnames(dfGCFlowsUSGS)
cColNames[1] <- "WaterYear"
cColNames[2] <- "LeeFerryFlow"
cColNames[5] <- "LasVegasWash"
colnames(dfGCFlowsUSGS) <- cColNames
#Remove rows with NaN
#dfGCFlowsUSGS <- na.omit(dfGCFlowsUSGS)
# Replace NAs with zeros
# Note calc less than 2002 assumes Las Vegas wash is zero
dfGCFlowsUSGS <- dfGCFlowsUSGS %>% replace(is.na(.),0)
#Calculate the total
#Grand Canyon interveening flow
dfGCFlowsUSGS$GCFlow <- dfGCFlowsUSGS$`Colorado River near Peach Springs` - dfGCFlowsUSGS$LeeFerryFlow + dfGCFlowsUSGS$`Virgin River at Littlefield`
#Lake Mead inflow
dfGCFlowsUSGS$MeadInflow <- dfGCFlowsUSGS$`Colorado River near Peach Springs` + dfGCFlowsUSGS$`Virgin River at Littlefield` + dfGCFlowsUSGS$LasVegasWash
dfGCFlowsUSGS$Method <- cMethods[1]
##############
#   2. Inflow data provided from the USBR Application Programming Interface. Note this inflow data only goes from January 2015 to present.
#
#             Use the HDB Data Service (usbr.gov) for Lake Mead inflow, evaporation, storage, and release.
#                 https://www.usbr.gov/lc/region/g4000/riverops/_HdbWebQuery.html
#
#                 In order to use this, you will need to know the region and Site Datatype ID (SDID).
#                 The lake Mead data will be with the Lower Colorado Regional Offices HDB. For the different values you mentioned,
#                 the SDID's you will need are as follows: Evaporation (SDID=1776), Inflow (SDID=2091), Storage (SDID=1721),
#                 and Release (SDID=1874). From there you can select the timestep you want,
#                  Instantaneous, Hourly, Daily, Monthly, as well as for what time span you want.
#
#                 API query - https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=lchdb&sdi=1776%2C2091%2C1721%2C1874&tstp=MN&t1=2022-01-01T00:00&t2=2024-05-01T00:00&table=R&mrid=0&format=html
#
# `                   This query dynamically builds the end date as most recent month with full data.`
#
#                 Returns an HTML page all on one line that looks like this:
#
#                     <HTML><HEAD><TITLE>Bureau of Reclamation HDB Data</TITLE></HEAD><BODY><TABLE BORDER=1><TR><TH>        DATETIME</TH><TH>     SDI_1776</TH><TH>     SDI_2091</TH><TH>     SDI_1721</TH><TH>     SDI_1874</TH></TR><TR><TD>01/01/2022 00:00</TD><TD> 25036.660109</TD><TD> 733181.246590</TD><TD>   8969839.40</TD><TD> 10400.87768820</TD></TR><TR><TD>02/01/2022 00:00</TD><TD> 22864.126967</TD><TD> 597592.564890</TD><TD>   8945556.40</TD><TD> 10631.16369050</TD></TR> .... <TR><TD>05/01/2024 00:00</TD><TD> 43219.74224840</TD><TD> 621530.394980</TD><TD>   8969054.80</TD><TD> 16139.41935480</TD></TR></TABLE></BODY></HTML>
#
#					        Scrape and parse the html page using the rvest and tidyr packages. Turn into a data frame.
##
##Old Code to downloaded from CSV file
##sExcelFileUSBRAPI <- "USBR-API-MeadData.csv"
##dfUSBR_API<- read_csv(sExcelFileUSBRAPI, skip = 6)
##
# Dynamically read to the current date
CurrDate <- as.Date(Sys.Date())
cYear <- year(CurrDate)
cMonth <- month(CurrDate)
# Calculate the prior month
if (cMonth == 1) {
# We want December of the prior year
sDate <- sprintf("%d-%d-01", cYear-1, 12)
} else {
# We take the prior month of the same year
sDate <- sprintf("%d-%d-01", cYear, cMonth - 1)
}
# Construct the USBR API call by reading data up to the prior month
usbr_url <- paste0("https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=lchdb&sdi=1776%2C2091%2C1721%2C1874&tstp=MN&t1=1990-01-01T00:00&t2=", sDate, "T00:00&table=R&mrid=0&format=html")
# Use the "rvest" and "tidyr" packages
usbr_MeadData <- read_html(usbr_url)
pkg_data <- usbr_MeadData |>
html_element("table") |>
html_table()
# Convert acre-feet to million acre-feet
dfUSBR_API <- data.frame(pkg_data)
# Save the API data to csv to improve reproducibility and in case no internet
write.csv(dfUSBR_API, "dfUSBR_API.csv")
#Turn the SDID Code # into meaningful variable names
dfSDIDcode <- data.frame(code = c(1776, 2091, 1721, 1874),
Field = c("Evaporation", "Inflow", "Storage", "Release"),
Units = c("acre-feet", "??", "acre-feet", "cfs"))
cSDID <- colnames(dfUSBR_API)
cSDID[2:5] <-dfSDIDcode$Field
colnames(dfUSBR_API) <- cSDID
#Convert DATETIME to time series format R understands
dfUSBR_API$Date <- as.Date(dfUSBR_API$DATETIME, "%m/%d/%Y %h:%m")
dfUSBR_API$Date <- mdy_hm(dfUSBR_API$DATETIME)
#Add month, year, and day variables
dfUSBR_API$Month <- month(dfUSBR_API$Date)
dfUSBR_API$Year <- year(dfUSBR_API$Date)
dfUSBR_API$Day <- day(dfUSBR_API$Date)
dfUSBR_API$DaysInMonth <- days_in_month(dfUSBR_API$Date)
# Conversions to million acre-feet
dfUSBR_API$Inflow <- dfUSBR_API$Inflow / 1e6
dfUSBR_API$Evaporation <- dfUSBR_API$Evaporation / 1e6
dfUSBR_API$Storage <- dfUSBR_API$Storage / 1e6
# Convert average cfs per month to million acre-feet per month
dfUSBR_API$Release <- dfUSBR_API$Release * 1.983 * dfUSBR_API$DaysInMonth / 1e6
#Calculate water year
dfUSBR_API$WaterYear <- ifelse(dfUSBR_API$Month >= 10, dfUSBR_API$Year + 1, dfUSBR_API$Year)
# Set inflows for before Aug 1996 to NA because those numbers are crap
dfUSBR_API2 <- dfUSBR_API
dfUSBR_API2$Inflow[dfUSBR_API$Year <= 1996] <- NA
# Aggregate to Month and Year
dfUSBR_API_Agg <- dfUSBR_API2 %>% dplyr::group_by(Year) %>% dplyr::summarise(Evaporation = sum(Evaporation), Release = sum(Release), Inflow = sum(Inflow))
dfUSBR_API_Agg$MeadInflow <- dfUSBR_API_Agg$Inflow
View(dfGCFlowsByYear)
View(dfGCFlowsUSGS)
dfUSBR_API2$Inflow[dfUSBR_API$Year <= 2014] <- NA
dfUSBR_API_Agg <- dfUSBR_API2 %>% dplyr::group_by(Year) %>% dplyr::summarise(Evaporation = sum(Evaporation), Release = sum(Release), Inflow = sum(Inflow))
dfUSBR_API_Agg$MeadInflow <- dfUSBR_API_Agg$Inflow
dfUSBR_Stor <- dfUSBR_API2 %>% select(Year, Month, Day, Storage ) %>% filter(Month == 1, Day == 1)
View(dfUSBR_Stor)
dfUSBR_Stor$DeltaStorage <- c(diff(dfUSBR_Stor$Storage),0)
dfUSBR_API_Agg_BackCalc <- left_join(dfUSBR_API_Agg, dfUSBR_Stor, by = c("WaterYear" = "WaterYear"))
dfUSBR_Stor$DeltaStorage <- c(diff(dfUSBR_Stor$Storage),0)
dfUSBR_API_Agg_BackCalc <- left_join(dfUSBR_API_Agg, dfUSBR_Stor, by = c("Year" = "Year"))
dfUSBR_Stor$DeltaStorage <- c(diff(dfUSBR_Stor$Storage),0)
dfUSBR_API_Agg_BackCalc <- left_join(dfUSBR_API_Agg, dfUSBR_Stor, by = c("Year" = "Year"))
View(dfUSBR_API_Agg_BackCalc)
dfUSBR_API_Agg_BackCalc$MeadInflow <- dfUSBR_API_Agg_BackCalc$DeltaStorage +  dfUSBR_API_Agg$Release +  dfUSBR_API_Agg$Evaporation
dfUSBR_API_Agg_BackCalc$Method <- cMethods[3]
dfUSBR_FromEvapTable <- dfUSBR_API_Agg
dfUSBR_FromEvapTable <- dfUSBR_API_Agg_BackCalc
dfUSBR_FromEvapTable <- dfUSBR_API_Agg_BackCalc
dfMeadEvap <- read.csv(file = "EvapData/dfMeadEvap.csv", header = TRUE)
dfUSBR_FromEvapTable <- dfUSBR_API_Agg_BackCalc
View(dfUSBR_FromEvapTable)
dfMeadEvap <- read.csv(file = "EvapData/dfMeadEvap.csv", header = TRUE)
dfUSBR_FromEvapTable$EvaporationFromTable <- interpNA(xi = dfUSBR_FromEvapTable$Storage, x= dfMeadEvap$Total.Storage..ac.ft./1e6, y=dfMeadEvap$EvapVolMax/1e6)
dfUSBR_FromEvapTable$EvaporationFromTable <- interpNA(xi = dfUSBR_FromEvapTable$Storage, x= dfMeadEvap$Total.Storage..ac.ft./1e6, y=dfMeadEvap$EvapVolMax/1e6)
dfUSBR_FromEvapTable$EvaporationRange <- interpNA(xi = dfUSBR_FromEvapTable$Storage, x= dfMeadEvap$Total.Storage..ac.ft./1e6, y=dfMeadEvap$EvapVolMaxUp/1e6) - interpNA(xi = dfUSBR_FromEvapTable$Storage, x= dfMeadEvap$Total.Storage..ac.ft./1e6, y=dfMeadEvap$EvapVolMaxLo/1e6)
dfUSBR_FromEvapTable$MeadInflow <- dfUSBR_FromEvapTable$DeltaStorage +  dfUSBR_FromEvapTable$Release +  dfUSBR_FromEvapTable$EvaporationFromTable
dfUSBR_FromEvapTable$Method <- cMethods[4]
ggplot() +
geom_point(data = dfUSBR_API_Agg, aes(x= Evaporation, y = EvaporationFromTable),  size = 6) + #color=Method shape=Method, size=6) +
#Add error bars to data points
#Mead
geom_errorbar(data=dfUSBR_API_Agg, aes(x=Evaporation,ymin=EvaporationFromTable - EvaporationRange/2, ymax=EvaporationFromTable + EvaporationRange/2), width=.005,
position=position_dodge(0.2), color="black", show.legend = FALSE) +
#Add 1:1 line
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red", size = 1) +
#Add linear regression line
geom_smooth(data = dfUSBR_API_Agg, aes(x= Evaporation, y = EvaporationFromTable),
method = "lm",
formula = y ~ x,
geom = "smooth") +
#Add regression equation to plot
stat_regline_equation(data = dfUSBR_API_Agg, aes(x= Evaporation, y = EvaporationFromTable),
label.x= mean(dfUSBR_API_Agg$Evaporation), label.y=mean(dfUSBR_API_Agg$EvaporationFromTable), size = 6) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="Evaporation USBR API\n(MAF per year)", y="Evaporation from Table\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
ggplot() +
geom_point(data = dfUSBR_FromEvapTable, aes(x= Evaporation, y = EvaporationFromTable),  size = 6) + #color=Method shape=Method, size=6) +
#Add error bars to data points
#Mead
geom_errorbar(data=dfUSBR_FromEvapTable, aes(x=Evaporation,ymin=EvaporationFromTable - EvaporationRange/2, ymax=EvaporationFromTable + EvaporationRange/2), width=.005,
position=position_dodge(0.2), color="black", show.legend = FALSE) +
#Add 1:1 line
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red", size = 1) +
#Add linear regression line
geom_smooth(data = dfUSBR_FromEvapTable, aes(x= Evaporation, y = EvaporationFromTable),
method = "lm",
formula = y ~ x,
geom = "smooth") +
#Add regression equation to plot
stat_regline_equation(data = dfUSBR_FromEvapTable, aes(x= Evaporation, y = EvaporationFromTable),
label.x= mean(dfUSBR_FromEvapTable$Evaporation), label.y=mean(dfUSBR_FromEvapTable$EvaporationFromTable), size = 6) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="Evaporation USBR API\n(MAF per year)", y="Evaporation from Table\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
##
sExcelFileCRSS <- "SingleTraceOut.xlsx"
dfCRSSOutput<- read_excel(sExcelFileCRSS, sheet = 'RunTest') #  range = "A1:E32")
#Rename first column to Date
cCRSSColNames <- colnames(dfCRSSOutput)
cCRSSColNames[1] <- "CRSSDate"
colnames(dfCRSSOutput) <- cCRSSColNames
#Add a Water Year column
dfCRSSOutput$ModelYear <- year(dfCRSSOutput$CRSSDate)
dfCRSSOutput$Year <- dfCRSSOutput$ModelYear - 2022 + 1907
dfCRSSOutput$Month <- month(dfCRSSOutput$CRSSDate)
dfCRSSOutput$WaterYear <- ifelse(dfCRSSOutput$Month >= 10, dfCRSSOutput$Year + 1, dfCRSSOutput$Year)
# Aggregate to year
dfMeadInflowsCRSS <- dfCRSSOutput %>% dplyr::select(WaterYear, Month, Mead.Inflow) %>% dplyr::group_by(WaterYear) %>% dplyr::summarize(MeadInflow = sum(Mead.Inflow)/1e6)
dfMeadInflowsCRSS$Method <- cMethods[4]
#
sExcelFileWangSchmidt <- "Supplementary_file-WangSchmidt.xlsx"
dfMeadInflowsWSvals <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S18:W18")
dfMeadInflowsWSyears <- read_excel(sExcelFileWangSchmidt, sheet = 'Tables',  range = "S4:W4")
#Read in values as headers. Reshape to long
cWSvalColNames <- colnames(dfMeadInflowsWSvals)
cWSyearsColNames <- colnames(dfMeadInflowsWSyears)
# Make a new dataframe
dfMeadInflowsWS <- data.frame(Year = cWSyearsColNames, MeadInflow = as.numeric(cWSvalColNames))
#Extract Water year from Year variable
dfMeadInflowsWS$WaterYear <- as.numeric(str_sub(dfMeadInflowsWS$Year,3,6)) + 1
dfMeadInflowsWS$Method <- cMethods[6]
dfInflows <- rbind(dfGCFlowsUSGS %>% select(Year, MeadInflow, Method), dfUSBR_API_Agg %>% select(Year, MeadInflow, Method) )
dfUSBR_API_Agg$Method <- cMethods[2]
dfInflows <- rbind(dfGCFlowsUSGS %>% select(Year, MeadInflow, Method), dfUSBR_API_Agg %>% select(Year, MeadInflow, Method) )
View(dfGCFlowsUSGS)
#Convert to Water Year and sum by water year
dfGCFlowsByYear <- aggregate(dfGCFlows$Total, by=list(Category=dfGCFlows$Year), FUN=sum)
dfLeeFerryByYear <- aggregate(dfGCFlows$`HistoricalNaturalFlow.AboveLeesFerry`, by=list(Category=dfGCFlows$Year), FUN=sum)
colnames(dfGCFlowsByYear) <- c("Year","GCFlow")
colnames(dfLeeFerryByYear) <- c("Year", "LeeFerryNaturalFlow")
dfGCFlowsByYear$LeeFerryNaturalFlow <- dfLeeFerryByYear$LeeFerryNaturalFlow
dfGCFlowsByYear$LeeFerryNaturalFlow <- dfLeeFerryByYear$LeeFerryNaturalFlow
#Calculate Lake Mead Inflow as sum of GCFlow and Lee Ferry Natural Flow
dfGCFlowsByYear$MeadInflowNat <- dfGCFlowsByYear$GCFlow + dfGCFlowsByYear$LeeFerryNaturalFlow

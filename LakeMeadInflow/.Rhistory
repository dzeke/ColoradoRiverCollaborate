theme_bw() +
theme(text = element_text(size=20))
ggplot() +
#Ribbon from Inflow to available water
geom_ribbon(data = dfInflowICS, aes(x = Year, max = MeadInflow - lBaselinePlot, min = AvailableWater - lBaselinePlot, fill="Evaporation")) +
#Inflow as line
geom_line(data = dfInflowICS, aes(x= Year, y = MeadInflow - lBaselinePlot, color = "Inflow"), size = 1) + #color=Method shape=Method, size=6) +
#Available water as line
geom_line(data = dfInflowICS, aes(x= Year, y = AvailableWater - lBaselinePlot, color = "Available Water"), size = 1) + #color=Method shape=Method, size=6) +
# ICS counts as stacked bar
geom_bar(data=dfICSCountMelt, aes(fill=variable,y=-value,x=Year),position="stack", stat="identity") +
scale_fill_manual(name="Guide1",values = c(palGreys[1], palReds[7], palReds[9]),breaks=cNamesInflowICS[c(3, (nNumCols-1):nNumCols)], labels = c("Evaporation", sCreditTotals)) +
###scale_color_manual(name="Guide2", values=c("Black")) +
scale_color_manual(name="Guide2", values = c(palBlues[7], palBlues[9])) +
#Add line for 9.0 maf
geom_hline(yintercept = lHistorialAllocation - lBaselinePlot, color="black", linetype = "longdash", size = 1.5) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$Year),max(dfUSBR_API_Agg$Year)) +
# Set the y-axis limits and breaks
scale_y_continuous(breaks=seq(-1,7,1), labels=c(1,0,seq(1,7,1) + lBaselinePlot)) +
#Make one combined legend
guides(color = guide_legend(""), fill = guide_legend("")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(million acre-feet per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
sCreditTotals <- c(sprintf("Sufficient available water:\n%.1f maf", sum(dfInflowICS$CountICSDeposit)),
sprintf("Insufficient\navailable water:\n%.1f maf", sum(dfInflowICS$NotCountICSDeposit)))
#Melt the CountICSDeposit and NotCount columns into a new dataframe to plot as a stacked bar
cNamesInflowICS <- colnames(dfInflowICS)
nNumCols <- length(cNamesInflowICS)
dfICSCountMelt <- melt(data = dfInflowICS, id.vars = c("Year"), measure.vars = cNamesInflowICS[(nNumCols-1):nNumCols])
ggplot() +
#Ribbon from Inflow to available water
geom_ribbon(data = dfInflowICS, aes(x = Year, max = MeadInflow - lBaselinePlot, min = AvailableWater - lBaselinePlot, fill="Evaporation")) +
#Inflow as line
geom_line(data = dfInflowICS, aes(x= Year, y = MeadInflow - lBaselinePlot, color = "Inflow"), size = 1) + #color=Method shape=Method, size=6) +
#Available water as line
geom_line(data = dfInflowICS, aes(x= Year, y = AvailableWater - lBaselinePlot, color = "Available Water"), size = 1) + #color=Method shape=Method, size=6) +
# ICS counts as stacked bar
geom_bar(data=dfICSCountMelt, aes(fill=variable,y=-value,x=Year),position="stack", stat="identity") +
scale_fill_manual(name="Guide1",values = c(palGreys[1], palReds[7], palReds[9]),breaks=cNamesInflowICS[c(3, (nNumCols-1):nNumCols)], labels = c("Evaporation", sCreditTotals)) +
###scale_color_manual(name="Guide2", values=c("Black")) +
scale_color_manual(name="Guide2", values = c(palBlues[7], palBlues[9])) +
#Add line for 9.0 maf
geom_hline(yintercept = lHistorialAllocation - lBaselinePlot, color="black", linetype = "longdash", size = 1.5) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$Year),max(dfUSBR_API_Agg$Year)) +
# Set the y-axis limits and breaks
scale_y_continuous(breaks=seq(-1,7,1), labels=c(1,0,seq(1,7,1) + lBaselinePlot)) +
#Make one combined legend
guides(color = guide_legend(""), fill = guide_legend("Conservation Credits")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(million acre-feet per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
ggplot() +
#Ribbon from Inflow to available water
geom_ribbon(data = dfInflowICS, aes(x = Year, max = MeadInflow - lBaselinePlot, min = AvailableWater - lBaselinePlot, fill="Evaporation")) +
#Inflow as line
geom_line(data = dfInflowICS, aes(x= Year, y = MeadInflow - lBaselinePlot, color = "Inflow"), size = 1) + #color=Method shape=Method, size=6) +
#Available water as line
geom_line(data = dfInflowICS, aes(x= Year, y = AvailableWater - lBaselinePlot, color = "Available Water"), size = 1) + #color=Method shape=Method, size=6) +
# ICS counts as stacked bar
geom_bar(data=dfICSCountMelt, aes(fill=variable,y=-value,x=Year),position="stack", stat="identity") +
scale_fill_manual(name="Guide1",values = c(palGreys[1], palReds[7], palReds[9]),breaks=cNamesInflowICS[c(3, (nNumCols-1):nNumCols)], labels = c("Evaporation", sCreditTotals)) +
###scale_color_manual(name="Guide2", values=c("Black")) +
scale_color_manual(name="Guide2", values = c(palBlues[7], palBlues[9]), labels = c("Available Water", paste("Inflow (", cMethodsToPlot,")"))) +
#Add line for 9.0 maf
geom_hline(yintercept = lHistorialAllocation - lBaselinePlot, color="black", linetype = "longdash", size = 1.5) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$Year),max(dfUSBR_API_Agg$Year)) +
# Set the y-axis limits and breaks
scale_y_continuous(breaks=seq(-1,7,1), labels=c(1,0,seq(1,7,1) + lBaselinePlot)) +
#Make one combined legend
guides(color = guide_legend(""), fill = guide_legend("Conservation Credits")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(million acre-feet per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
ggplot() +
#Ribbon from Inflow to available water
geom_ribbon(data = dfInflowICS, aes(x = Year, max = MeadInflow - lBaselinePlot, min = AvailableWater - lBaselinePlot, fill="Evaporation")) +
#Inflow as line
geom_line(data = dfInflowICS, aes(x= Year, y = MeadInflow - lBaselinePlot, color = "Inflow"), size = 1) + #color=Method shape=Method, size=6) +
#Available water as line
geom_line(data = dfInflowICS, aes(x= Year, y = AvailableWater - lBaselinePlot, color = "Available Water"), size = 1) + #color=Method shape=Method, size=6) +
# ICS counts as stacked bar
geom_bar(data=dfICSCountMelt, aes(fill=variable,y=-value,x=Year),position="stack", stat="identity") +
scale_fill_manual(name="Guide1",values = c(palGreys[1], palReds[7], palReds[9]),breaks=cNamesInflowICS[c(3, (nNumCols-1):nNumCols)], labels = c("Evaporation", sCreditTotals)) +
###scale_color_manual(name="Guide2", values=c("Black")) +
scale_color_manual(name="Guide2", values = c(palBlues[7], palBlues[9]), labels = c("Available Water", paste0("Inflow (", cMethodsToPlot,")"))) +
#Add line for 9.0 maf
geom_hline(yintercept = lHistorialAllocation - lBaselinePlot, color="black", linetype = "longdash", size = 1.5) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$Year),max(dfUSBR_API_Agg$Year)) +
# Set the y-axis limits and breaks
scale_y_continuous(breaks=seq(-1,7,1), labels=c(1,0,seq(1,7,1) + lBaselinePlot)) +
#Make one combined legend
guides(color = guide_legend(""), fill = guide_legend("Conservation Credits")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(million acre-feet per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
cMethodUse <- cMethods[2]
## Join the Inflow and ICS dataframes
dfInflowICS <- left_join(dfInflows %>% filter(Method == cMethodUse, Year < cYear), dfICSDeposit, by = c("Year" = "Year"))
## Joint the Inflow, ICS, and evaporation data frames
dfInflowICS <- left_join(dfInflowICS, dfUSBR_API_Agg %>% select(Year, Evaporation) %>% filter(Year < cYear), by = c("Year" = "Year"))
#Convert ICS values to million-acre feet
dfInflowICS$Arizona <- dfInflowICS$Arizona / 1e6
dfInflowICS$California <- dfInflowICS$California / 1e6
dfInflowICS$Nevada <- dfInflowICS$Nevada / 1e6
dfInflowICS$Mexico <- dfInflowICS$Mexico / 1e6
#Calculate Total ICS deposits each year (sum of positive values)
dfInflowICS$TotalDeposit <- ifelse(dfInflowICS$Arizona > 0, dfInflowICS$Arizona, 0) +
ifelse(dfInflowICS$California > 0, dfInflowICS$California, 0) +
ifelse(dfInflowICS$Nevada > 0, dfInflowICS$Nevada, 0)
#Calculate available water as inflow minus evaporation
dfInflowICS$AvailableWater <- 0
dfInflowICS$AvailableWater <- dfInflowICS$MeadInflow - dfInflowICS$Evaporation
#Replace NAs with zeros
dfInflowICS$TotalDeposit <- replace_na(dfInflowICS$TotalDeposit,0)
# Calculate the ICS deposits to count when there was sufficient available water
# There are 3 cases:
#   1. Available water greater than historical allocations => Count all ICS deposits
#   2. Available water between historical allocation and ICS amount => Count part of the ICS deposit
#   3. Available water less than historical allocation minus ICS deposits => Count none
dfInflowICS$CountICSDeposit <-
# Case 1
ifelse(dfInflowICS$AvailableWater >= lHistorialAllocation, dfInflowICS$TotalDeposit, 0) +
# Case 2
ifelse((dfInflowICS$AvailableWater < lHistorialAllocation) & (dfInflowICS$AvailableWater >= lHistorialAllocation - dfInflowICS$TotalDeposit), dfInflowICS$TotalDeposit - (lHistorialAllocation - dfInflowICS$AvailableWater), 0) +
# Case 3
ifelse(dfInflowICS$AvailableWater <= lHistorialAllocation - dfInflowICS$TotalDeposit, 0, 0)
# Calculate the ICS deposit not to count as difference between the TotalDeposit and Deposit counted
dfInflowICS$NotCountICSDeposit <- dfInflowICS$TotalDeposit - dfInflowICS$CountICSDeposit
sprintf("Total conservation credits all years: %.1f maf", sum(dfInflowICS$TotalDeposit))
sCreditTotals <- c(sprintf("Sufficient available water:\n%.1f maf", sum(dfInflowICS$CountICSDeposit)),
sprintf("Insufficient\navailable water:\n%.1f maf", sum(dfInflowICS$NotCountICSDeposit)))
#Melt the CountICSDeposit and NotCount columns into a new dataframe to plot as a stacked bar
cNamesInflowICS <- colnames(dfInflowICS)
nNumCols <- length(cNamesInflowICS)
dfICSCountMelt <- melt(data = dfInflowICS, id.vars = c("Year"), measure.vars = cNamesInflowICS[(nNumCols-1):nNumCols])
ggplot() +
#Ribbon from Inflow to available water
geom_ribbon(data = dfInflowICS, aes(x = Year, max = MeadInflow - lBaselinePlot, min = AvailableWater - lBaselinePlot, fill="Evaporation")) +
#Inflow as line
geom_line(data = dfInflowICS, aes(x= Year, y = MeadInflow - lBaselinePlot, color = "Inflow"), size = 1) + #color=Method shape=Method, size=6) +
#Available water as line
geom_line(data = dfInflowICS, aes(x= Year, y = AvailableWater - lBaselinePlot, color = "Available Water"), size = 1) + #color=Method shape=Method, size=6) +
# ICS counts as stacked bar
geom_bar(data=dfICSCountMelt, aes(fill=variable,y=-value,x=Year),position="stack", stat="identity") +
scale_fill_manual(name="Guide1",values = c(palGreys[1], palReds[7], palReds[9]),breaks=cNamesInflowICS[c(3, (nNumCols-1):nNumCols)], labels = c("Evaporation", sCreditTotals)) +
###scale_color_manual(name="Guide2", values=c("Black")) +
scale_color_manual(name="Guide2", values = c(palBlues[7], palBlues[9]), labels = c("Available Water", paste0("Inflow (", cMethodsToPlot,")"))) +
#Add line for 9.0 maf
geom_hline(yintercept = lHistorialAllocation - lBaselinePlot, color="black", linetype = "longdash", size = 1.5) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$Year),max(dfUSBR_API_Agg$Year)) +
# Set the y-axis limits and breaks
scale_y_continuous(breaks=seq(-1,7,1), labels=c(1,0,seq(1,7,1) + lBaselinePlot)) +
#Make one combined legend
guides(color = guide_legend(""), fill = guide_legend("Conservation Credits")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(million acre-feet per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
min(dfInflowCompare$`USBR API Inflow`)
cMethodUse <- cMethods[3]
## Join the Inflow and ICS dataframes
dfInflowICS <- left_join(dfInflows %>% filter(Method == cMethodUse, Year < cYear), dfICSDeposit, by = c("Year" = "Year"))
## Joint the Inflow, ICS, and evaporation data frames
dfInflowICS <- left_join(dfInflowICS, dfUSBR_API_Agg %>% select(Year, Evaporation) %>% filter(Year < cYear), by = c("Year" = "Year"))
#Convert ICS values to million-acre feet
dfInflowICS$Arizona <- dfInflowICS$Arizona / 1e6
dfInflowICS$California <- dfInflowICS$California / 1e6
dfInflowICS$Nevada <- dfInflowICS$Nevada / 1e6
dfInflowICS$Mexico <- dfInflowICS$Mexico / 1e6
#Calculate Total ICS deposits each year (sum of positive values)
dfInflowICS$TotalDeposit <- ifelse(dfInflowICS$Arizona > 0, dfInflowICS$Arizona, 0) +
ifelse(dfInflowICS$California > 0, dfInflowICS$California, 0) +
ifelse(dfInflowICS$Nevada > 0, dfInflowICS$Nevada, 0)
#Calculate available water as inflow minus evaporation
dfInflowICS$AvailableWater <- 0
dfInflowICS$AvailableWater <- dfInflowICS$MeadInflow - dfInflowICS$Evaporation
#Replace NAs with zeros
dfInflowICS$TotalDeposit <- replace_na(dfInflowICS$TotalDeposit,0)
# Calculate the ICS deposits to count when there was sufficient available water
# There are 3 cases:
#   1. Available water greater than historical allocations => Count all ICS deposits
#   2. Available water between historical allocation and ICS amount => Count part of the ICS deposit
#   3. Available water less than historical allocation minus ICS deposits => Count none
dfInflowICS$CountICSDeposit <-
# Case 1
ifelse(dfInflowICS$AvailableWater >= lHistorialAllocation, dfInflowICS$TotalDeposit, 0) +
# Case 2
ifelse((dfInflowICS$AvailableWater < lHistorialAllocation) & (dfInflowICS$AvailableWater >= lHistorialAllocation - dfInflowICS$TotalDeposit), dfInflowICS$TotalDeposit - (lHistorialAllocation - dfInflowICS$AvailableWater), 0) +
# Case 3
ifelse(dfInflowICS$AvailableWater <= lHistorialAllocation - dfInflowICS$TotalDeposit, 0, 0)
# Calculate the ICS deposit not to count as difference between the TotalDeposit and Deposit counted
dfInflowICS$NotCountICSDeposit <- dfInflowICS$TotalDeposit - dfInflowICS$CountICSDeposit
sprintf("Total conservation credits all years: %.1f maf", sum(dfInflowICS$TotalDeposit))
sCreditTotals <- c(sprintf("Sufficient available water:\n%.1f maf", sum(dfInflowICS$CountICSDeposit)),
sprintf("Insufficient\navailable water:\n%.1f maf", sum(dfInflowICS$NotCountICSDeposit)))
#Melt the CountICSDeposit and NotCount columns into a new dataframe to plot as a stacked bar
cNamesInflowICS <- colnames(dfInflowICS)
nNumCols <- length(cNamesInflowICS)
dfICSCountMelt <- melt(data = dfInflowICS, id.vars = c("Year"), measure.vars = cNamesInflowICS[(nNumCols-1):nNumCols])
ggplot() +
#Ribbon from Inflow to available water
geom_ribbon(data = dfInflowICS, aes(x = Year, max = MeadInflow - lBaselinePlot, min = AvailableWater - lBaselinePlot, fill="Evaporation")) +
#Inflow as line
geom_line(data = dfInflowICS, aes(x= Year, y = MeadInflow - lBaselinePlot, color = "Inflow"), size = 1) + #color=Method shape=Method, size=6) +
#Available water as line
geom_line(data = dfInflowICS, aes(x= Year, y = AvailableWater - lBaselinePlot, color = "Available Water"), size = 1) + #color=Method shape=Method, size=6) +
# ICS counts as stacked bar
geom_bar(data=dfICSCountMelt, aes(fill=variable,y=-value,x=Year),position="stack", stat="identity") +
scale_fill_manual(name="Guide1",values = c(palGreys[1], palReds[7], palReds[9]),breaks=cNamesInflowICS[c(3, (nNumCols-1):nNumCols)], labels = c("Evaporation", sCreditTotals)) +
###scale_color_manual(name="Guide2", values=c("Black")) +
scale_color_manual(name="Guide2", values = c(palBlues[7], palBlues[9]), labels = c("Available Water", paste0("Inflow (", cMethodsToPlot,")"))) +
#Add line for 9.0 maf
geom_hline(yintercept = lHistorialAllocation - lBaselinePlot, color="black", linetype = "longdash", size = 1.5) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$Year),max(dfUSBR_API_Agg$Year)) +
# Set the y-axis limits and breaks
scale_y_continuous(breaks=seq(-1,7,1), labels=c(1,0,seq(1,7,1) + lBaselinePlot)) +
#Make one combined legend
guides(color = guide_legend(""), fill = guide_legend("Conservation Credits")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(million acre-feet per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
cMethodUse <- cMethods[4]
## Join the Inflow and ICS dataframes
dfInflowICS <- left_join(dfInflows %>% filter(Method == cMethodUse, Year < cYear), dfICSDeposit, by = c("Year" = "Year"))
## Joint the Inflow, ICS, and evaporation data frames
dfInflowICS <- left_join(dfInflowICS, dfUSBR_API_Agg %>% select(Year, Evaporation) %>% filter(Year < cYear), by = c("Year" = "Year"))
#Convert ICS values to million-acre feet
dfInflowICS$Arizona <- dfInflowICS$Arizona / 1e6
dfInflowICS$California <- dfInflowICS$California / 1e6
dfInflowICS$Nevada <- dfInflowICS$Nevada / 1e6
dfInflowICS$Mexico <- dfInflowICS$Mexico / 1e6
#Calculate Total ICS deposits each year (sum of positive values)
dfInflowICS$TotalDeposit <- ifelse(dfInflowICS$Arizona > 0, dfInflowICS$Arizona, 0) +
ifelse(dfInflowICS$California > 0, dfInflowICS$California, 0) +
ifelse(dfInflowICS$Nevada > 0, dfInflowICS$Nevada, 0)
#Calculate available water as inflow minus evaporation
dfInflowICS$AvailableWater <- 0
dfInflowICS$AvailableWater <- dfInflowICS$MeadInflow - dfInflowICS$Evaporation
#Replace NAs with zeros
dfInflowICS$TotalDeposit <- replace_na(dfInflowICS$TotalDeposit,0)
# Calculate the ICS deposits to count when there was sufficient available water
# There are 3 cases:
#   1. Available water greater than historical allocations => Count all ICS deposits
#   2. Available water between historical allocation and ICS amount => Count part of the ICS deposit
#   3. Available water less than historical allocation minus ICS deposits => Count none
dfInflowICS$CountICSDeposit <-
# Case 1
ifelse(dfInflowICS$AvailableWater >= lHistorialAllocation, dfInflowICS$TotalDeposit, 0) +
# Case 2
ifelse((dfInflowICS$AvailableWater < lHistorialAllocation) & (dfInflowICS$AvailableWater >= lHistorialAllocation - dfInflowICS$TotalDeposit), dfInflowICS$TotalDeposit - (lHistorialAllocation - dfInflowICS$AvailableWater), 0) +
# Case 3
ifelse(dfInflowICS$AvailableWater <= lHistorialAllocation - dfInflowICS$TotalDeposit, 0, 0)
# Calculate the ICS deposit not to count as difference between the TotalDeposit and Deposit counted
dfInflowICS$NotCountICSDeposit <- dfInflowICS$TotalDeposit - dfInflowICS$CountICSDeposit
sprintf("Total conservation credits all years: %.1f maf", sum(dfInflowICS$TotalDeposit))
sCreditTotals <- c(sprintf("Sufficient available water:\n%.1f maf", sum(dfInflowICS$CountICSDeposit)),
sprintf("Insufficient\navailable water:\n%.1f maf", sum(dfInflowICS$NotCountICSDeposit)))
#Melt the CountICSDeposit and NotCount columns into a new dataframe to plot as a stacked bar
cNamesInflowICS <- colnames(dfInflowICS)
nNumCols <- length(cNamesInflowICS)
dfICSCountMelt <- melt(data = dfInflowICS, id.vars = c("Year"), measure.vars = cNamesInflowICS[(nNumCols-1):nNumCols])
ggplot() +
#Ribbon from Inflow to available water
geom_ribbon(data = dfInflowICS, aes(x = Year, max = MeadInflow - lBaselinePlot, min = AvailableWater - lBaselinePlot, fill="Evaporation")) +
#Inflow as line
geom_line(data = dfInflowICS, aes(x= Year, y = MeadInflow - lBaselinePlot, color = "Inflow"), size = 1) + #color=Method shape=Method, size=6) +
#Available water as line
geom_line(data = dfInflowICS, aes(x= Year, y = AvailableWater - lBaselinePlot, color = "Available Water"), size = 1) + #color=Method shape=Method, size=6) +
# ICS counts as stacked bar
geom_bar(data=dfICSCountMelt, aes(fill=variable,y=-value,x=Year),position="stack", stat="identity") +
scale_fill_manual(name="Guide1",values = c(palGreys[1], palReds[7], palReds[9]),breaks=cNamesInflowICS[c(3, (nNumCols-1):nNumCols)], labels = c("Evaporation", sCreditTotals)) +
###scale_color_manual(name="Guide2", values=c("Black")) +
scale_color_manual(name="Guide2", values = c(palBlues[7], palBlues[9]), labels = c("Available Water", paste0("Inflow (", cMethodsToPlot,")"))) +
#Add line for 9.0 maf
geom_hline(yintercept = lHistorialAllocation - lBaselinePlot, color="black", linetype = "longdash", size = 1.5) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$Year),max(dfUSBR_API_Agg$Year)) +
# Set the y-axis limits and breaks
scale_y_continuous(breaks=seq(-1,7,1), labels=c(1,0,seq(1,7,1) + lBaselinePlot)) +
#Make one combined legend
guides(color = guide_legend(""), fill = guide_legend("Conservation Credits")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(million acre-feet per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
ggplot() +
#Evaporation
geom_point(data = dfUSBR_API_Agg, aes(x= Year, y = EvaporationFromTable, color = "Evaporation"), shape = 15, size = 6) + #color=Method shape=Method, size=6) +
#Add error bars to data points
#Mead
geom_errorbar(data=dfUSBR_API_Agg, aes(x=Year, ymin=EvaporationFromTable - EvaporationRange/2, ymax=EvaporationFromTable + EvaporationRange/2), width=.005,
position=position_dodge(0.2), color="black", show.legend = FALSE) +
#Inflow
geom_point(data = dfUSBR_API_Agg, aes(x = Year, y = MeadInflow, color = "Inflow"), shape = 16, size = 6) + #color=Method shape=Method, size=6) +
#Available water = Inflow - evaporation
geom_point(data = dfUSBR_API_Agg, aes(x = Year, y = MeadInflow - Evaporation, color = "Available Water"),  shape = 17,  size = 6) + #color=Method shape=Method, size=6) +
#Add line for 9.0 maf
geom_hline(yintercept = 9, color="red", linetype = "dashed") +
scale_fill_manual(values = cColorsToPlot) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$Year),max(dfUSBR_API_Agg$Year)) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
View(dfUSBR_API_Agg)
View(dfUSBR_API_Agg_BackCalc)
View(dfUSBR_API_Agg_BackCalc)
View(dfUSBR_FromEvapTable)
ggplot() +
#Evaporation
geom_point(data = dfUSBR_FromEvapTable, aes(x = Year, y = Evaporation, color = "Evaporation"), shape = 15, size = 6) + #color=Method shape=Method, size=6) +
#Add error bars to data points
#Mead
geom_errorbar(data=dfUSBR_FromEvapTable, aes(x=Year, ymin=Evaporation - EvaporationRange/2, ymax=EvaporationFromTable + EvaporationRange/2), width=.005,
position=position_dodge(0.2), color="black", show.legend = FALSE) +
#Inflow
geom_point(data = dfUSBR_FromEvapTable, aes(x = Year, y = MeadInflow, color = "Inflow"), shape = 16, size = 6) + #color=Method shape=Method, size=6) +
#Available water = Inflow - evaporation
geom_point(data = dfUSBR_FromEvapTable, aes(x = Year, y = MeadInflow - Evaporation, color = "Available Water"),  shape = 17,  size = 6) + #color=Method shape=Method, size=6) +
#Add line for 9.0 maf
geom_hline(yintercept = 9, color="red", linetype = "dashed") +
scale_fill_manual(values = cColorsToPlot) +
# Set x-axis limits
xlim(min(dfUSBR_API_Agg$Year),max(dfUSBR_API_Agg$Year)) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="", y="Volume\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
ggplot() +
geom_boxplot(data = dfInflowsToPlot, aes(x=Method , y=MeadInflow, fill=Method)) +
theme_bw() +
#Data before 1990
#geom_boxplot(data = dfGCFDataToUse %>% filter(WaterYear < 1990), aes(x="Before 1990 Natural Flow" , y=MeadInflow, fill="Before 1990 Natural Flow")) +
#scale_x_discrete(labels = c("Natural Flow" = "Natural Flow\n(1990 to 2016)", "Before 1990 Natural Flow" = "Natural Flow\n(1905 to 1989)", "USGS" = "USGS\n(1990 to 2016)") ) +
scale_fill_manual(values = cColorsToPlot) +
theme_bw() +
labs(x="", y="Lake Mead Inflow\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
#Reshape the data so Methods are in columns
dfInflowsWide <- dcast(dfInflowsToPlot, WaterYear ~ Method, value.var = "MeadInflow")
dfInflowsWide$Diff <-  dfInflowsWide$`USGS Gages` - dfInflowsWide$`USBR Application Program Interface`
ggplot() +
geom_point(data = dfInflowsWide, aes(x= `USBR Application Program Interface`, y=`USGS Gages`),  size = 6) + #color=Method shape=Method, size=6) +
#geom_point(data = dfInflowsWide, aes(x= WaterYear, y=Diff),  size = 6) + #color=Method shape=Method, size=6) +
#geom_point(data = dfGCFDataToUse %>% filter(WaterYear < 1990), aes(x= LeeFerryNaturalFlow, y=MeadInflow, color="Natural Flow pre 1990", shape="Natural Flow pre 1990"), size=6) +
#scale_shape_manual(values=c(17,16,16), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
#scale_color_manual(values=c("Blue","Red","Pink"), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
#Add 1:1 line
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red", size = 1) +
#Add linear regression line
geom_smooth(data = dfInflowsWide, aes(x= `USBR Application Program Interface`, y=`USGS Gages`),
method = "lm",
formula = y ~ x,
geom = "smooth") +
#Add regression equation to plot
stat_regline_equation(data = dfInflowsWide, aes(x= `USBR Application Program Interface`, y=`USGS Gages`),
label.x=9, label.y=13, size = 6) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="USBR Back Calculation\n(MAF per year)", y="USGS Gages\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
View(dfInflowsWide)
ggplot() +
geom_point(data = dfInflowCompare, aes(x= `USBR API Inflow`, y=`USGS Gages`),  size = 6) + #color=Method shape=Method, size=6) +
#geom_point(data = dfInflowsWide, aes(x= WaterYear, y=Diff),  size = 6) + #color=Method shape=Method, size=6) +
#geom_point(data = dfGCFDataToUse %>% filter(WaterYear < 1990), aes(x= LeeFerryNaturalFlow, y=MeadInflow, color="Natural Flow pre 1990", shape="Natural Flow pre 1990"), size=6) +
#scale_shape_manual(values=c(17,16,16), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
#scale_color_manual(values=c("Blue","Red","Pink"), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
#Add 1:1 line
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red", size = 1) +
#Add linear regression line
geom_smooth(data = dfInflowCompare, aes(x= `USBR API Inflow`, y=`USGS Gages`),
method = "lm",
formula = y ~ x,
geom = "smooth") +
#Add regression equation to plot
stat_regline_equation(data = dfInflowCompare, aes(x= `USBR API Inflow`, y=`USGS Gages`),
label.x=9, label.y=13, size = 6) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="USBR Back Calculation\n(MAF per year)", y="USGS Gages\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
ggplot() +
geom_point(data = dfInflowCompare %>% filter(Year < cYear), aes(x= `USBR API Inflow`, y=`USGS Gages`),  size = 6) + #color=Method shape=Method, size=6) +
#geom_point(data = dfInflowsWide, aes(x= WaterYear, y=Diff),  size = 6) + #color=Method shape=Method, size=6) +
#geom_point(data = dfGCFDataToUse %>% filter(WaterYear < 1990), aes(x= LeeFerryNaturalFlow, y=MeadInflow, color="Natural Flow pre 1990", shape="Natural Flow pre 1990"), size=6) +
#scale_shape_manual(values=c(17,16,16), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
#scale_color_manual(values=c("Blue","Red","Pink"), breaks = c("USGS","Natural Flow","Natural Flow pre 1990"), labels  = c("USGS (after 1990)","Natural Flow (after 1990)","Natural Flow (before 1990)")) +
#Add 1:1 line
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red", size = 1) +
#Add linear regression line
geom_smooth(data = dfInflowCompare %>% filter(Year < cYear), aes(x= `USBR API Inflow`, y=`USGS Gages`),
method = "lm",
formula = y ~ x,
geom = "smooth") +
#Add regression equation to plot
stat_regline_equation(data = dfInflowCompare %>% filter(Year < cYear), aes(x= `USBR API Inflow`, y=`USGS Gages`),
label.x=9, label.y=13, size = 6) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="USBR Back Calculation\n(MAF per year)", y="USGS Gages\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
##############
###   FIGURE 11
###   Plot API Evaporation vs Table Look up
#############
ggplot() +
geom_point(data = dfUSBR_FromEvapTable, aes(x= Evaporation, y = EvaporationFromTable),  size = 6) + #color=Method shape=Method, size=6) +
#Add error bars to data points
#Mead
geom_errorbar(data=dfUSBR_FromEvapTable, aes(x=Evaporation,ymin=EvaporationFromTable - EvaporationRange/2, ymax=EvaporationFromTable + EvaporationRange/2), width=.005,
position=position_dodge(0.2), color="black", show.legend = FALSE) +
#Add 1:1 line
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red", size = 1) +
#Add linear regression line
geom_smooth(data = dfUSBR_FromEvapTable, aes(x= Evaporation, y = EvaporationFromTable),
method = "lm",
formula = y ~ x,
geom = "smooth") +
#Add regression equation to plot
stat_regline_equation(data = dfUSBR_FromEvapTable, aes(x= Evaporation, y = EvaporationFromTable),
label.x= mean(dfUSBR_FromEvapTable$Evaporation), label.y=mean(dfUSBR_FromEvapTable$EvaporationFromTable), size = 6) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="Evaporation USBR API\n(MAF per year)", y="Evaporation from Table\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
##
##Compare API Evaporation to Evaporation vs Volume curve
#Read in the evaporation vs storage data from dfMeadEvap
##############
###   FIGURE 11
###   Plot API Evaporation vs Table Look up
#############
ggplot() +
geom_point(data = dfUSBR_FromEvapTable %>% filter(Year < cYear), aes(x= Evaporation, y = EvaporationFromTable),  size = 6) + #color=Method shape=Method, size=6) +
#Add error bars to data points
#Mead
geom_errorbar(data=dfUSBR_FromEvapTable %>% filter(Year < cYear), aes(x=Evaporation,ymin=EvaporationFromTable - EvaporationRange/2, ymax=EvaporationFromTable + EvaporationRange/2), width=.005,
position=position_dodge(0.2), color="black", show.legend = FALSE) +
#Add 1:1 line
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red", size = 1) +
#Add linear regression line
geom_smooth(data = dfUSBR_FromEvapTable %>% filter(Year < cYear), aes(x= Evaporation, y = EvaporationFromTable),
method = "lm",
formula = y ~ x,
geom = "smooth") +
#Add regression equation to plot
stat_regline_equation(data = dfUSBR_FromEvapTable %>% filter(Year < cYear), aes(x= Evaporation, y = EvaporationFromTable),
label.x= mean(dfUSBR_FromEvapTable$Evaporation), label.y=mean(dfUSBR_FromEvapTable$EvaporationFromTable), size = 6) +
#Make one combined legend
guides(color = guide_legend("Dataset"), shape = guide_legend("Dataset")) +
#facet_wrap( ~ Source) +
labs(x="Evaporation USBR API\n(MAF per year)", y="Evaporation from Table\n(MAF per year)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme_bw() +
theme(text = element_text(size=20))
##

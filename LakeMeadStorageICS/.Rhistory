# #Duplicate the last record
#
# dfJointStorageFlexStackCopy <- dfJointStorageFlexStack
# #Make the date something arbitrary earlier
# dfJointStorageFlexStackCopy$Year <- nDataYearMax - 1
# dfJointStorageFlexStack <- rbind(dfJointStorageFlexStack, dfJointStorageFlexStackCopy )
#
#
# #Calculate incremental pool volumes. Start with Shared Reserve and work up.
# dfJointStorageFlexStack$SharedReserve <- nProtectCombined
# dfJointStorageFlexStack$LowerBasin <- as.double((dfICSBalance %>% filter(Year == nMaxYearICSData) %>% select(Total))/1e6)
# dfJointStorageFlexStack$UpperBasin <- dfJointStorageFlexStack$PowellStorage - as.double((dfProtectLevel %>% filter(Reservoir =="Powell") %>% select(Volume))/1e6) - nNegotiate
# dfJointStorageFlexStack$Mexico <- as.double(dfICSBalance %>% filter(Year == nMaxYearICSData) %>% select(Mexico)/1e6)
# #dfJointStorageFlexStack$Mexico <- ifelse(dfJointStorageFlexStack$Year <= nMaxYearICSData, 0/1e6, 0)
# dfJointStorageFlexStack$Negotiate <- dfJointStorageFlexStack$PowellStorage + dfJointStorageFlexStack$MeadStorage - (nProtectCombined + dfJointStorageFlexStack$LowerBasin + dfJointStorageFlexStack$UpperBasin + dfJointStorageFlexStack$Mexico)
# dfJointStorageFlexStack$Capacity <- nCapacityCombined - (dfJointStorageFlexStack$PowellStorage + dfJointStorageFlexStack$MeadStorage)
#
# #Melt the data
# dfJointStorageFlexStackMelt <- melt(dfJointStorageFlexStack, id.vars = c("Year"), measure.vars = c("SharedReserve", "LowerBasin", "UpperBasin", "Mexico", "Negotiate", "Capacity"))
#
# #Get the color palettes
# #Get the blue color bar
# pBlues <- brewer.pal(9,"Blues")
# pReds <- brewer.pal(9,"Reds")
#
# xPosAsYear <- 2020.5
#
# dfVolumes <- (dfJointStorageFlexStackMelt %>% filter(Year == nMaxYearResData) %>% select(value, variable) %>% mutate(Volume = value))
#
# dfAccounts$xPositionFlex <- xPosAsYear
# #Mexico gets offset
# dfAccounts$xPositionFlex[3] <- 2020.25
#
# dfAccounts <- left_join(dfAccounts, dfVolumes , by = c("Name" = "variable"))
#
# #Reorder
# dfAccountsSort <- dfAccounts[order(dfAccounts$Order),]
# dfAccountsSort$CumVol <- cumsum(dfAccountsSort$Volume)
# dfAccountsSort$YPos <- dfAccountsSort$CumVol - dfAccountsSort$Volume/2
#
# #Join the cumulative sum to the melt so can plot dividing lines between the areas
# dfJointStorageFlexStackMelt <- left_join(dfJointStorageFlexStackMelt,dfAccountsSort, by = c("variable" = "Name"))
# #Specify the order of the variables
# dfJointStorageFlexStackMelt$variable <- factor(dfJointStorageFlexStackMelt$variable, levels= dfAccounts$Name)
# ggplot() +
#   #Combined Storage
#   #As area
#   geom_area(data=dfJointStorageFlexStackMelt, aes(x=Year, y=Volume, fill=variable, group=variable)) +
#   #Thin lines to separate accounts
#   geom_line(data=dfJointStorageFlexStackMelt %>% filter(Order > 1, Order <6), aes(x=Year, y=CumVol, color = "Combined", group = variable), size = 1, color = "Black") +
#
#   #Top of combined storage as thick line
#   geom_line(data=dfJointStorageFlexStack,aes(x=Year,y=MeadStorage+PowellStorage, color="Combined"), size=2, color = "Black") +
#   #geom_area(data=dfPlotData,aes(x=month,y=stor_maf, fill = variable), position='stack') +
#
#   #lines for max capacity and protect elevation
#   geom_hline(data=dfKeyVolumes, aes(yintercept = Volume), linetype="longdash", size=1) +
#   #lines for Interim Guidelines and Expiry
#   #geom_vline(data=dfKeyDates, aes(xintercept = Date), linetype = "dashed", size=1, color = pReds[9]) +
#
#   #Labels for the areas
#   geom_text(data=dfAccountsSort, aes(x=xPositionFlex, y=YPos, label=as.character(Name)), size = 6, fontface="bold") +
#   #geom_text(data=dfKeyTraceLabels %>% filter(Label == dfKeyTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), y=Volume, label=as.character(Label)), size = 4.5, fontface="bold", color = pBlues[5]) +
#
#
#   #Scales
#   scale_x_continuous(labels = NULL) +
#   #scale_y_continuous(limits = c(0,NA)) +
#   # secondary axis is not working
#   # scale_y_continuous(limits = c(0,NA), sec_axis(~. +0, name = "", breaks = dfKeyVolumes$Volume, labels = dfKeyVolumes$Volume)) +
#   #Secondary axis as percent
#   scale_y_continuous(limits = c(0,NA), sec.axis = sec_axis(~ . /nCapacityCombined*100, name = "Percent of Combined Capacity", breaks = seq(0,100,by=25), labels = sprintf("%d%%", seq(0,100,by=25)))) +
#
#   scale_fill_manual(values=c(pReds[3], pBlues[3], pBlues[4], pBlues[5], pBlues[6], pBlues[8])) +
#
#   #    scale_y_continuous(breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]),labels=c(0,5.98,9.6,12.2,dfMaxStor[2,2]),  sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]), labels = c(895,1025,1075,1105,1218.8))) +
#   #scale_x_discrete(breaks=cMonths, labels= cMonthsLabels) +
#   #scale_x_continuous(breaks=seq(1960,2020,by=10), labels= seq(1960,2020,by=10)) +
#
#
#   #scale_fill_manual(breaks=c(1:6),values = palBlues[2:7]) + #,labels = variable) +
#   theme_bw() +
#   #coord_fixed() +
#   labs(x="", y="Combined Active Storage\n(MAF)", color = "") +
#   theme(text = element_text(size=20), legend.title=element_blank(), legend.position ="none")
# #theme(text = element_text(size=20), legend.text=element_text(size=16)
###################################################
#### PLOT for MEAD Storage and Water Conservation Account Balances
###All the input data
## Read elevation-storage data in from Excel
sExcelFile <- 'MeadDroughtContingencyPlan.xlsx'
dfMeadElevStor <- read_excel(sExcelFile, sheet = "Mead-Elevation-Area",  range = "A4:D676")
## Read in ICS account balance data
sExcelFile <- 'IntentionallyCreatedSurplus-Summary.xlsx'
dfICSBalance <- read_excel(sExcelFile, sheet = "Sheet1",  range = "B6:G17")
nMaxYearICSData <- max(dfICSBalance$Year)
#Register the largest year. Right now one larger than ICS
nMaxYearResData <- nMaxYearICSData + 1
#Duplicate the largest year and set the year to largest value plus 1
dfICSBalance <- rbind(dfICSBalance, dfICSBalance %>% filter(Year == nMaxYearICSData) %>% mutate(Year = nMaxYearICSData+1))
#Order by decreasing year
dfICSBalance <- dfICSBalance[order(-dfICSBalance$Year),]
#Turn time into a index by month. Year 1 = 1, Year 2 = 13
dfICSBalance$MonthIndex <- 12*(dfICSBalance$Year - dfICSBalance$Year[nrow(dfICSBalance)]) + 12
#Turn the ICS year into monthly
dfICSmonths = expand.grid(Year = unique(dfICSBalance$Year), month = 1:12)
dfICSmonths$MonthIndex <- 12*(dfICSmonths$Year - dfICSmonths$Year[nrow(dfICSmonths)]) + dfICSmonths$month
#Filter off first year but keep last month
dfICSmonths <- dfICSmonths %>% filter(dfICSmonths$MonthIndex >= 12)
#Calculate a date
dfICSmonths$Date <- as.Date(sprintf("%d-%d-01",dfICSmonths$Year, dfICSmonths$month))
#Interpolate Lower Basin conservation account balances by Month
dfICSmonths$LowerBasinConserve <- interp1(xi = dfICSmonths$MonthIndex, x=dfICSBalance$MonthIndex, y = dfICSBalance$Total, method="linear" )
#Interpolate Mexico conservation account balance by Month
dfICSmonths$MexicoConserve <- interp1(xi = dfICSmonths$MonthIndex, x=dfICSBalance$MonthIndex, y = dfICSBalance$Mexico, method="linear" )
#Set values above the max ICS date to zero
dfICSmonths[dfICSmonths$Year > nMaxYearICSData, c("LowerBasinConserve", "MexicoConserve")] <- 0
## Data frame of key elevations
nMeadProtectElevation <- 1020
nProtectMead <- interpNA(xi = nMeadProtectElevation, x= dfMeadElevStor$`Elevation (ft)`, y=dfMeadElevStor$`Live Storage (ac-ft)`) / 1e6
nCapacityMead <- 25.9
dfKeyMeadVolumes <- data.frame(Volume = c(nProtectMead, nCapacityMead ), Label = c("Protect","Capacity"))
## Data frame of key dates
dfKeyDates <- data.frame(Date = as.Date(c("2007-01-01", "2026-01-01")), Label = c("Interim\nGuidelines", "Guidelines\nExpire"))
## Data frame of key Mead traces
dfKeyMeadTraceLabels <- data.frame(Label = c("Protect", "Public Pool", "Conservation\nAccounts", "Deficit Mindset"),
Volume = c(nProtectMead/2, 8.5, 12, 20), xPosition = rep(2007 + (nMaxYearResData - 2007)/2,4),
Size = c(6, 6, 5, 6))
#Adjust the position of the MX+LB conservation accounts
dfKeyMeadTraceLabels$xPosition[3] <- (2026 + nMaxYearResData + 0.825 )/2
## Powell Storage Data
dfPowellElevStor <- read_excel(sExcelFile, sheet = 'Powell-Elevation-Area',  range = "A4:D689")
sPowellHistoricalFile <- 'PowellDataUSBRMar2022-Try2.csv'
# Read in the historical Powell data
dfPowellHistorical <- read.csv(file=sPowellHistoricalFile,
header=TRUE,
stringsAsFactors=FALSE,
sep=",")
## Mead Storage data
sMeadHistoricalFile <- 'MeadLevelMar2022.xlsx'
# Read in the historical Mead data
dfMeadHistorical <- read_excel(sMeadHistoricalFile)
#Convert cross-tabulated Mead months into timeseries
dfMeadHist <- melt(dfMeadHistorical, id.vars = c("Year"))
dfMeadHist$BeginOfMonStr <- paste(dfMeadHist$Year,dfMeadHist$variable,"1",sep="-")
dfMeadHist$BeginOfMon <- as.Date(dfMeadHist$BeginOfMonStr, "%Y-%b-%d")
dfMeadHist$BeginNextMon <- dfMeadHist$BeginOfMon %m+% months(1)
#Filter out NAs
dfMeadHist <- dfMeadHist %>% filter(!is.na(dfMeadHist$value))
#Convert the text values to numerics
dfMeadHist$value <- as.numeric(dfMeadHist$value)
#Filter out low storages below min
dfMeadHist <- dfMeadHist %>% filter(dfMeadHist$value > min(dfMeadElevStor$`Elevation (ft)`))
dfMeadHist$Stor <- interp1(xi = dfMeadHist$value,y=dfMeadElevStor$`Live Storage (ac-ft)`,x=dfMeadElevStor$`Elevation (ft)`, method="linear")
#Interpolate Powell storage from level to check
dtStart <- as.Date("1963-12-22")
dfPowellHist <- dfPowellHistorical[15:714,] #%>% filter(dfPowellHistorical$Date >= dtStart) # I don't like this hard coding but don't know a way around
#Convert date text to date value
dfPowellHist$DateAsValueError <- as.Date(dfPowellHist$Date,"%d-%b-%y")
#Apparently R breaks the century at an odd place
#Coerce the years after 2030 (really 1930) to be in prior century (as.Date conversion error)
dfPowellHist$Year <- as.numeric(format(dfPowellHist$DateAsValueError,"%Y"))
dfPowellHist$DateAsValue <- dfPowellHist$DateAsValueError
#dfPowellHist$DateAsValue[dfPowellHist$Year > 2030] <- dfPowellHist$DateAsValue[dfPowellHist$Year > 2030] %m-% months(12*100)
#dfPowellHist$StorCheck <- interp1(xi = dfPowellHist$Elevation..feet.,y=dfPowellElevStor$`Live Storage (ac-ft)`,x=dfPowellElevStor$`Elevation (ft)`, method="linear")
#dfPowellHist$StorDiff <- dfPowellHist$Storage..af. - dfPowellHist$StorCheck
#Merge the Mead and Powell Storage Time series
dfJointStorage <- dfMeadHist
#Rename columns so they are easier to distinquish
#dfJointStorage$PowellStorage <- dfJointStorage$Storage..af./1000000
#dfJointStorage$PowellRelease <- dfJointStorage$Total.Release..cfs.
dfJointStorage$MeadStorage <- dfJointStorage$Stor/1000000
#dfJointStorage <- merge(dfPowellHist[,c("DateAsValue","Storage..af.","Total.Release..cfs.")],dfMeadHist[,c("BeginNextMon","Stor")],by.x = "DateAsValue", by.y="BeginNextMon", all.x = TRUE, sort=TRUE)
dfJointStorage$Date <- dfJointStorage$BeginOfMon
dfJointStorage$DateAsValue <- as.Date(dfJointStorage$Date,"%d-%b-%y")
#Remove the old columns
#dfJointStorage <- dfJointStorage[, !names(dfJointStorage) %in% c("Storage..af.","Total.Release..cfs.","Stor")]
#Add a column for decade
dfJointStorage$decade <- round_any(as.numeric(format(dfJointStorage$DateAsValue,"%Y")),10,f=floor)
#dfJointStorage$DecadeAsClass <- dfJointStorage %>% mutate(category=cut(decade, breaks=seq(1960,2020,by=10), labels=seq(1960,2020,by=10)))
#Calculate the annual volume drop from each October 1
#Calculate month
dfJointStorage$month <- month(dfJointStorage$DateAsValue)
#Left join the ICS data to the joint storage data to get the entire date range
dfJointStorage <- left_join(dfJointStorage, dfICSmonths, by=c("DateAsValue" = "Date"))
#Convert NAs to zeros
dfJointStorage$Year <- year(dfJointStorage$DateAsValue)
#dfJointStorageClean <- dfJointStorage[,2:ncol(dfJointStorage)] %>% filter(Year <= nMaxYearICSData)
#Allow to go one more year
#dfJointStorageClean <- dfJointStorage[,2:ncol(dfJointStorage)] %>% filter(Year <= nMaxYearResData)
dfJointStorageClean <- dfJointStorage %>% filter(Year <= nMaxYearResData)
dfJointStorageClean[is.na(dfJointStorageClean)] <- 0
dfTemp <- dfJointStorage %>% filter(Year <= nMaxYearResData) %>% select(DateAsValue)
dfJointStorageClean$DateAsValue <- dfTemp$DateAsValue
#Add rows for years 2022 to 2030 with all zeros
dfYearsAdd <- data.frame(Year = seq(nMaxYearResData+1, nMaxYearICSData + 10, by = 1))
#dfJointStorageZeros <- dfJointStorageClean[1,1:(ncol(dfJointStorageClean)-1)]
dfJointStorageZeros <- dfJointStorageClean[1, ]
#dfJointStorageZeros <- 0
dfJointStorageZeros$MeadStorage <- 0
dfJointStorageZeros$Stor <- 0
dfJointStorageZeros <- as.data.frame(lapply(dfJointStorageZeros,  rep, nrow(dfYearsAdd)))
dfJointStorageZeros$Year <- dfYearsAdd$Year
#Calculate a date
dfJointStorageZeros$DateAsValue <- as.Date(sprintf("%.0f-01-01", dfJointStorageZeros$Year))
#Bind to the Clean data frame
dfJointStorageClean <- rbind(dfJointStorageClean, dfJointStorageZeros)
## Data for the stacked plot
#New data frame for area
dfMeadStorageStack <- dfJointStorageClean
dfMeadStorageStack$Protect <- nProtectMead
dfMeadStorageStack$LowerBasin <- ifelse(dfMeadStorageStack$Year <= nMaxYearResData, dfMeadStorageStack$LowerBasinConserve/1e6, 0)
dfMeadStorageStack$Mexico <- ifelse(dfMeadStorageStack$Year <= nMaxYearResData, dfMeadStorageStack$MexicoConserve/1e6, 0)
dfMeadStorageStack$AvailableWater <- ifelse(dfMeadStorageStack$Year <= nMaxYearResData, dfMeadStorageStack$MeadStorage - dfMeadStorageStack$Protect - dfMeadStorageStack$LowerBasin - dfMeadStorageStack$Mexico, 0)
dfMeadStorageStack$Capacity <- ifelse(dfMeadStorageStack$Year <= nMaxYearResData, nCapacityMead - dfMeadStorageStack$AvailableWater - dfMeadStorageStack$Protect - dfMeadStorageStack$LowerBasin - dfMeadStorageStack$Mexico, 0)
#Melt the data
dfMeadStorageStackMelt <- melt(dfMeadStorageStack, id.vars = c("DateAsValue"), measure.vars = c("Protect","LowerBasin", "Mexico", "AvailableWater", "Capacity"))
#Specify the order of the variables
dfMeadStorageStackMelt$variable <- factor(dfMeadStorageStackMelt$variable, levels=c("Capacity","AvailableWater", "Mexico", "LowerBasin", "Protect"))
#Read in the levels from CSV
dfMeadPoolsPlot2 <- read.csv("dfMeadPoolsPlot2.csv",header=TRUE)
#Get the color palettes
#Get the blue color bar
pBlues <- brewer.pal(9,"Blues")
pReds <- brewer.pal(9,"Reds")
ggplot() +
#Lake Mead Storage and Water Conservation Account balances as stacked area plot
#As area
geom_area(data=dfMeadStorageStackMelt, aes(x=DateAsValue, y=value, fill=variable, group=variable)) +
#As line
geom_line(data=dfMeadStorageStack %>% filter(Year < nMaxYearResData + 1),aes(x=DateAsValue,y=MeadStorage, color="Combined"), size=2, color = "Black") +
#geom_area(data=dfPlotData,aes(x=month,y=stor_maf, fill = variable), position='stack') +
#lines for max capacity and protect elevation
geom_hline(data=dfKeyMeadVolumes, aes(yintercept = Volume), linetype="longdash", size=1) +
#lines for Interim Guidelines and Expiry
geom_vline(data=dfKeyDates, aes(xintercept = Date), linetype = "dashed", size=1, color = pReds[9]) +
#Labels for the areas
geom_text(data=dfKeyMeadTraceLabels %>% filter(Label != dfKeyMeadTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), y=Volume, label=as.character(Label)), size = 6, fontface="bold") +
geom_text(data=dfKeyMeadTraceLabels %>% filter(Label == dfKeyMeadTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), y=Volume, label=as.character(Label)), size = 5, fontface="bold", color = pBlues[5]) +
#Arrow Lake Mead conservation account label
#geom_curve(data = dfKeyTraceLabels %>% filter(Label == dfKeyTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), xend = as.Date(sprintf("%.0f-02-01",nMaxYearResData+1)), y=10.5, yend = 7), curvature = -0.5, color = pBlues[5], size = 1.0, arrow = arrow(length = unit(0.03, "npc"))) +
#Label what is next
#geom_text(data = dfEndArrows %>% filter(Label == "Recover?"), aes(x= MidDate, y = Ystart, label = "Recover?\nStabilize?\nDraw down?"), size = 5, color = "Black") +
#Label the arrows
#geom_text(data = dfEndArrows, aes(x = Xstart, y = (Ystart+Yend)/2 + Yoffset, label = Label, angle = Angle), size = 5, color = "Black", hjust = 0) +
#geom_segment(aes(x=as.Date("2022-01-01"), xend=as.Date("2025-01-01"), y=12, yend = 14, colour = palBlues[7], arrow = arrow())) +
#Scales
scale_x_date(limits= c(as.Date("2000-01-01"), as.Date("2026-01-01")), sec.axis = sec_axis(~. +0, name = "", breaks = dfKeyDates$Date, labels = as.character(dfKeyDates$Label))) +
#scale_y_continuous(limits = c(0,NA)) +
# secondary axis is not working
# scale_y_continuous(limits = c(0,NA), sec_axis(~. +0, name = "", breaks = dfKeyVolumes$Volume, labels = dfKeyVolumes$Volume)) +
#Secondary axis as percent
#scale_y_continuous(limits = c(0,NA), sec.axis = sec_axis(~ . /nCapacityMead*100, name = "Percent of Capacity", breaks = seq(0,100,by=25), labels = sprintf("%d%%", seq(0,100,by=25)))) +
#Secondary axis as Mead level
scale_y_continuous(limits = c(0, NA),  sec.axis = sec_axis(~. +0, name = "Elevation (feet)", breaks = dfMeadPoolsPlot2$stor_maf, labels = dfMeadPoolsPlot2$label)) +
scale_fill_manual(values=c(pReds[3], pBlues[3], pBlues[5], pBlues[5], pBlues[7])) +
#    scale_y_continuous(breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]),labels=c(0,5.98,9.6,12.2,dfMaxStor[2,2]),  sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]), labels = c(895,1025,1075,1105,1218.8))) +
#scale_x_discrete(breaks=cMonths, labels= cMonthsLabels) +
#scale_x_continuous(breaks=seq(1960,2020,by=10), labels= seq(1960,2020,by=10)) +
#scale_fill_manual(breaks=c(1:6),values = palBlues[2:7]) + #,labels = variable) +
theme_bw() +
#coord_fixed() +
labs(x="", y="Active Storage\n(MAF)", color = "") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.position ="none")
#theme(text = element_text(size=20), legend.text=element_text(size=16)
# LakeMeadStorageICS.R
#
# Plots that show Lake Mead Storage and Water Conservation Account (ICS) Balances.
#
# 1. Import the reservoir elevation-volume curves
# 2. Import historical reservoir storage data
# 3. Import the conservation account data for Lake Mead
#
# This is a beginning R-programming effort! There could be lurking bugs or basic coding errors that I am not even aware of.
# Please report bugs/feedback to me (contact info below)
#
# David E. Rosenberg
# May 29, 2024
# Utah State University
# david.rosenberg@usu.edu
rm(list = ls())  #Clear history
# Load required libraies
if (!require(tidyverse)) {
install.packages("tidyverse", repos="http://cran.r-project.org")
library(tidyverse)
}
if (!require(readxl)) {
install.packages("readxl", repos="http://cran.r-project.org")
library(readxl)
}
if (!require(RColorBrewer)) {
install.packages("RColorBrewer",repos="http://cran.r-project.org")
library(RColorBrewer) #
}
if (!require(dplyr)) {
install.packages("dplyr",repos="http://cran.r-project.org")
library(dplyr) #
}
if (!require(expss)) {
install.packages("expss",repos="http://cran.r-project.org")
library(expss) #
}
if (!require(reshape2)) {
install.packages("reshape2", repos="http://cran.r-project.org")
library(reshape2)
}
if (!require(pracma)) {
install.packages("pracma", repos="http://cran.r-project.org")
library(pracma)
}
if (!require(lubridate)) {
install.packages("lubridate", repos="http://cran.r-project.org")
library(lubridate)
}
if (!require(directlabels)) {
install.packages("directlabels", repo="http://cran.r-project.org")
library(directlabels)
}
if (!require(plyr)) {
install.packages("plyr", repo="http://cran.r-project.org")
library(plyr)
}
if (!require(ggrepel)) {
devtools::install_github("slowkow/ggrepel")
library(ggrepel)
}
# New function interpNA to return NAs for values outside interpolation range (from https://stackoverflow.com/questions/47295879/using-interp1-in-r)
interpNA <- function(x, y, xi = x, ...) {
yi <- rep(NA, length(xi));
sel <- which(xi >= range(x)[1] & xi <= range(x)[2]);
yi[sel] <- interp1(x = x, y = y, xi = xi[sel], ...);
return(yi);
}
###################################################
#### PLOT for MEAD Storage and Water Conservation Account Balances
###All the input data
## Read elevation-storage data in from Excel
sExcelFile <- 'MeadDroughtContingencyPlan.xlsx'
dfMeadElevStor <- read_excel(sExcelFile, sheet = "Mead-Elevation-Area",  range = "A4:D676")
## Read in ICS account balance data
sExcelFile <- 'IntentionallyCreatedSurplus-Summary.xlsx'
dfICSBalance <- read_excel(sExcelFile, sheet = "Sheet1",  range = "B6:G17")
nMaxYearICSData <- max(dfICSBalance$Year)
#Register the largest year. Right now one larger than ICS
nMaxYearResData <- nMaxYearICSData + 1
#Duplicate the largest year and set the year to largest value plus 1
dfICSBalance <- rbind(dfICSBalance, dfICSBalance %>% filter(Year == nMaxYearICSData) %>% mutate(Year = nMaxYearICSData+1))
#Order by decreasing year
dfICSBalance <- dfICSBalance[order(-dfICSBalance$Year),]
#Turn time into a index by month. Year 1 = 1, Year 2 = 13
dfICSBalance$MonthIndex <- 12*(dfICSBalance$Year - dfICSBalance$Year[nrow(dfICSBalance)]) + 12
#Turn the ICS year into monthly
dfICSmonths = expand.grid(Year = unique(dfICSBalance$Year), month = 1:12)
dfICSmonths$MonthIndex <- 12*(dfICSmonths$Year - dfICSmonths$Year[nrow(dfICSmonths)]) + dfICSmonths$month
#Filter off first year but keep last month
dfICSmonths <- dfICSmonths %>% filter(dfICSmonths$MonthIndex >= 12)
#Calculate a date
dfICSmonths$Date <- as.Date(sprintf("%d-%d-01",dfICSmonths$Year, dfICSmonths$month))
#Interpolate Lower Basin conservation account balances by Month
dfICSmonths$LowerBasinConserve <- interp1(xi = dfICSmonths$MonthIndex, x=dfICSBalance$MonthIndex, y = dfICSBalance$Total, method="linear" )
#Interpolate Mexico conservation account balance by Month
dfICSmonths$MexicoConserve <- interp1(xi = dfICSmonths$MonthIndex, x=dfICSBalance$MonthIndex, y = dfICSBalance$Mexico, method="linear" )
#Set values above the max ICS date to zero
dfICSmonths[dfICSmonths$Year > nMaxYearICSData, c("LowerBasinConserve", "MexicoConserve")] <- 0
## Data frame of key elevations
nMeadProtectElevation <- 1020
nProtectMead <- interpNA(xi = nMeadProtectElevation, x= dfMeadElevStor$`Elevation (ft)`, y=dfMeadElevStor$`Live Storage (ac-ft)`) / 1e6
nCapacityMead <- 25.9
dfKeyMeadVolumes <- data.frame(Volume = c(nProtectMead, nCapacityMead ), Label = c("Protect","Capacity"))
## Data frame of key dates
dfKeyDates <- data.frame(Date = as.Date(c("2007-01-01", "2026-01-01")), Label = c("Interim\nGuidelines", "Guidelines\nExpire"))
## Data frame of key Mead traces
dfKeyMeadTraceLabels <- data.frame(Label = c("Protect", "Public Pool", "Conservation\nAccounts", "Deficit Mindset"),
Volume = c(nProtectMead/2, 8.5, 12, 20), xPosition = rep(2007 + (nMaxYearResData - 2007)/2,4),
Size = c(6, 6, 5, 6))
#Adjust the position of the MX+LB conservation accounts
dfKeyMeadTraceLabels$xPosition[3] <- (2026 + nMaxYearResData + 0.825 )/2
## Powell Storage Data
dfPowellElevStor <- read_excel(sExcelFile, sheet = 'Powell-Elevation-Area',  range = "A4:D689")
sPowellHistoricalFile <- 'PowellDataUSBRMar2022-Try2.csv'
# Read in the historical Powell data
dfPowellHistorical <- read.csv(file=sPowellHistoricalFile,
header=TRUE,
stringsAsFactors=FALSE,
sep=",")
## Mead Storage data
sMeadHistoricalFile <- 'MeadLevelMar2022.xlsx'
# Read in the historical Mead data
dfMeadHistorical <- read_excel(sMeadHistoricalFile)
#Convert cross-tabulated Mead months into timeseries
dfMeadHist <- melt(dfMeadHistorical, id.vars = c("Year"))
dfMeadHist$BeginOfMonStr <- paste(dfMeadHist$Year,dfMeadHist$variable,"1",sep="-")
dfMeadHist$BeginOfMon <- as.Date(dfMeadHist$BeginOfMonStr, "%Y-%b-%d")
dfMeadHist$BeginNextMon <- dfMeadHist$BeginOfMon %m+% months(1)
#Filter out NAs
dfMeadHist <- dfMeadHist %>% filter(!is.na(dfMeadHist$value))
#Convert the text values to numerics
dfMeadHist$value <- as.numeric(dfMeadHist$value)
#Filter out low storages below min
dfMeadHist <- dfMeadHist %>% filter(dfMeadHist$value > min(dfMeadElevStor$`Elevation (ft)`))
dfMeadHist$Stor <- interp1(xi = dfMeadHist$value,y=dfMeadElevStor$`Live Storage (ac-ft)`,x=dfMeadElevStor$`Elevation (ft)`, method="linear")
#Interpolate Powell storage from level to check
dtStart <- as.Date("1963-12-22")
dfPowellHist <- dfPowellHistorical[15:714,] #%>% filter(dfPowellHistorical$Date >= dtStart) # I don't like this hard coding but don't know a way around
#Convert date text to date value
dfPowellHist$DateAsValueError <- as.Date(dfPowellHist$Date,"%d-%b-%y")
#Apparently R breaks the century at an odd place
#Coerce the years after 2030 (really 1930) to be in prior century (as.Date conversion error)
dfPowellHist$Year <- as.numeric(format(dfPowellHist$DateAsValueError,"%Y"))
dfPowellHist$DateAsValue <- dfPowellHist$DateAsValueError
#dfPowellHist$DateAsValue[dfPowellHist$Year > 2030] <- dfPowellHist$DateAsValue[dfPowellHist$Year > 2030] %m-% months(12*100)
#dfPowellHist$StorCheck <- interp1(xi = dfPowellHist$Elevation..feet.,y=dfPowellElevStor$`Live Storage (ac-ft)`,x=dfPowellElevStor$`Elevation (ft)`, method="linear")
#dfPowellHist$StorDiff <- dfPowellHist$Storage..af. - dfPowellHist$StorCheck
#Merge the Mead and Powell Storage Time series
dfJointStorage <- dfMeadHist
#Rename columns so they are easier to distinquish
#dfJointStorage$PowellStorage <- dfJointStorage$Storage..af./1000000
#dfJointStorage$PowellRelease <- dfJointStorage$Total.Release..cfs.
dfJointStorage$MeadStorage <- dfJointStorage$Stor/1000000
#dfJointStorage <- merge(dfPowellHist[,c("DateAsValue","Storage..af.","Total.Release..cfs.")],dfMeadHist[,c("BeginNextMon","Stor")],by.x = "DateAsValue", by.y="BeginNextMon", all.x = TRUE, sort=TRUE)
dfJointStorage$Date <- dfJointStorage$BeginOfMon
dfJointStorage$DateAsValue <- as.Date(dfJointStorage$Date,"%d-%b-%y")
#Remove the old columns
#dfJointStorage <- dfJointStorage[, !names(dfJointStorage) %in% c("Storage..af.","Total.Release..cfs.","Stor")]
#Add a column for decade
dfJointStorage$decade <- round_any(as.numeric(format(dfJointStorage$DateAsValue,"%Y")),10,f=floor)
#dfJointStorage$DecadeAsClass <- dfJointStorage %>% mutate(category=cut(decade, breaks=seq(1960,2020,by=10), labels=seq(1960,2020,by=10)))
#Calculate the annual volume drop from each October 1
#Calculate month
dfJointStorage$month <- month(dfJointStorage$DateAsValue)
#Left join the ICS data to the joint storage data to get the entire date range
dfJointStorage <- left_join(dfJointStorage, dfICSmonths, by=c("DateAsValue" = "Date"))
#Convert NAs to zeros
dfJointStorage$Year <- year(dfJointStorage$DateAsValue)
#dfJointStorageClean <- dfJointStorage[,2:ncol(dfJointStorage)] %>% filter(Year <= nMaxYearICSData)
#Allow to go one more year
#dfJointStorageClean <- dfJointStorage[,2:ncol(dfJointStorage)] %>% filter(Year <= nMaxYearResData)
dfJointStorageClean <- dfJointStorage %>% filter(Year <= nMaxYearResData)
dfJointStorageClean[is.na(dfJointStorageClean)] <- 0
dfTemp <- dfJointStorage %>% filter(Year <= nMaxYearResData) %>% select(DateAsValue)
dfJointStorageClean$DateAsValue <- dfTemp$DateAsValue
#Add rows for years 2022 to 2030 with all zeros
dfYearsAdd <- data.frame(Year = seq(nMaxYearResData+1, nMaxYearICSData + 10, by = 1))
#dfJointStorageZeros <- dfJointStorageClean[1,1:(ncol(dfJointStorageClean)-1)]
dfJointStorageZeros <- dfJointStorageClean[1, ]
#dfJointStorageZeros <- 0
dfJointStorageZeros$MeadStorage <- 0
dfJointStorageZeros$Stor <- 0
dfJointStorageZeros <- as.data.frame(lapply(dfJointStorageZeros,  rep, nrow(dfYearsAdd)))
dfJointStorageZeros$Year <- dfYearsAdd$Year
#Calculate a date
dfJointStorageZeros$DateAsValue <- as.Date(sprintf("%.0f-01-01", dfJointStorageZeros$Year))
#Bind to the Clean data frame
dfJointStorageClean <- rbind(dfJointStorageClean, dfJointStorageZeros)
## Data for the stacked plot
#New data frame for area
dfMeadStorageStack <- dfJointStorageClean
dfMeadStorageStack$Protect <- nProtectMead
dfMeadStorageStack$LowerBasin <- ifelse(dfMeadStorageStack$Year <= nMaxYearResData, dfMeadStorageStack$LowerBasinConserve/1e6, 0)
dfMeadStorageStack$Mexico <- ifelse(dfMeadStorageStack$Year <= nMaxYearResData, dfMeadStorageStack$MexicoConserve/1e6, 0)
dfMeadStorageStack$AvailableWater <- ifelse(dfMeadStorageStack$Year <= nMaxYearResData, dfMeadStorageStack$MeadStorage - dfMeadStorageStack$Protect - dfMeadStorageStack$LowerBasin - dfMeadStorageStack$Mexico, 0)
dfMeadStorageStack$Capacity <- ifelse(dfMeadStorageStack$Year <= nMaxYearResData, nCapacityMead - dfMeadStorageStack$AvailableWater - dfMeadStorageStack$Protect - dfMeadStorageStack$LowerBasin - dfMeadStorageStack$Mexico, 0)
#Melt the data
dfMeadStorageStackMelt <- melt(dfMeadStorageStack, id.vars = c("DateAsValue"), measure.vars = c("Protect","LowerBasin", "Mexico", "AvailableWater", "Capacity"))
#Specify the order of the variables
dfMeadStorageStackMelt$variable <- factor(dfMeadStorageStackMelt$variable, levels=c("Capacity","AvailableWater", "Mexico", "LowerBasin", "Protect"))
#Read in the levels from CSV
dfMeadPoolsPlot2 <- read.csv("dfMeadPoolsPlot2.csv",header=TRUE)
#Get the color palettes
#Get the blue color bar
pBlues <- brewer.pal(9,"Blues")
pReds <- brewer.pal(9,"Reds")
ggplot() +
#Lake Mead Storage and Water Conservation Account balances as stacked area plot
#As area
geom_area(data=dfMeadStorageStackMelt, aes(x=DateAsValue, y=value, fill=variable, group=variable)) +
#As line
geom_line(data=dfMeadStorageStack %>% filter(Year < nMaxYearResData + 1),aes(x=DateAsValue,y=MeadStorage, color="Combined"), size=2, color = "Black") +
#geom_area(data=dfPlotData,aes(x=month,y=stor_maf, fill = variable), position='stack') +
#lines for max capacity and protect elevation
geom_hline(data=dfKeyMeadVolumes, aes(yintercept = Volume), linetype="longdash", size=1) +
#lines for Interim Guidelines and Expiry
geom_vline(data=dfKeyDates, aes(xintercept = Date), linetype = "dashed", size=1, color = pReds[9]) +
#Labels for the areas
geom_text(data=dfKeyMeadTraceLabels %>% filter(Label != dfKeyMeadTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), y=Volume, label=as.character(Label)), size = 6, fontface="bold") +
geom_text(data=dfKeyMeadTraceLabels %>% filter(Label == dfKeyMeadTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), y=Volume, label=as.character(Label)), size = 5, fontface="bold", color = pBlues[5]) +
#Arrow Lake Mead conservation account label
#geom_curve(data = dfKeyTraceLabels %>% filter(Label == dfKeyTraceLabels$Label[3]), aes(x=as.Date(sprintf("%.0f-01-01",xPosition)), xend = as.Date(sprintf("%.0f-02-01",nMaxYearResData+1)), y=10.5, yend = 7), curvature = -0.5, color = pBlues[5], size = 1.0, arrow = arrow(length = unit(0.03, "npc"))) +
#Label what is next
#geom_text(data = dfEndArrows %>% filter(Label == "Recover?"), aes(x= MidDate, y = Ystart, label = "Recover?\nStabilize?\nDraw down?"), size = 5, color = "Black") +
#Label the arrows
#geom_text(data = dfEndArrows, aes(x = Xstart, y = (Ystart+Yend)/2 + Yoffset, label = Label, angle = Angle), size = 5, color = "Black", hjust = 0) +
#geom_segment(aes(x=as.Date("2022-01-01"), xend=as.Date("2025-01-01"), y=12, yend = 14, colour = palBlues[7], arrow = arrow())) +
#Scales
scale_x_date(limits= c(as.Date("2000-01-01"), as.Date("2026-01-01")), sec.axis = sec_axis(~. +0, name = "", breaks = dfKeyDates$Date, labels = as.character(dfKeyDates$Label))) +
#scale_y_continuous(limits = c(0,NA)) +
# secondary axis is not working
# scale_y_continuous(limits = c(0,NA), sec_axis(~. +0, name = "", breaks = dfKeyVolumes$Volume, labels = dfKeyVolumes$Volume)) +
#Secondary axis as percent
#scale_y_continuous(limits = c(0,NA), sec.axis = sec_axis(~ . /nCapacityMead*100, name = "Percent of Capacity", breaks = seq(0,100,by=25), labels = sprintf("%d%%", seq(0,100,by=25)))) +
#Secondary axis as Mead level
scale_y_continuous(limits = c(0, NA),  sec.axis = sec_axis(~. +0, name = "Elevation (feet)", breaks = dfMeadPoolsPlot2$stor_maf, labels = dfMeadPoolsPlot2$label)) +
scale_fill_manual(values=c(pReds[3], pBlues[3], pBlues[5], pBlues[5], pBlues[7])) +
#    scale_y_continuous(breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]),labels=c(0,5.98,9.6,12.2,dfMaxStor[2,2]),  sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = c(0,5.98,9.6,12.2,dfMaxStor[2,2]), labels = c(895,1025,1075,1105,1218.8))) +
#scale_x_discrete(breaks=cMonths, labels= cMonthsLabels) +
#scale_x_continuous(breaks=seq(1960,2020,by=10), labels= seq(1960,2020,by=10)) +
#scale_fill_manual(breaks=c(1:6),values = palBlues[2:7]) + #,labels = variable) +
theme_bw() +
#coord_fixed() +
labs(x="", y="Active Storage\n(MAF)", color = "") +
theme(text = element_text(size=20), legend.title=element_blank(), legend.position ="none")
#theme(text = element_text(size=20), legend.text=element_text(size=16)

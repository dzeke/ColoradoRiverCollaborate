View(dfTable)
View(dfTable)
dfTable <- as.Data.frame(tables[1])
dfTable <- as.data.frame(tables[1])
View(dfTable)
View(dfTable)
write.csv(dfTable, "LakePowellReleases.csv")
cColNames <- cnames(dfTable)
cColNames[2:4] <- c("PowerRelease", "TotalRelease", "BypassRelease", "SpillwayRelease")
cnames(dfTable) <- cColNames
cColNames <- colnames(dfTable)
cColNames[2:4] <- c("PowerRelease", "TotalRelease", "BypassRelease", "SpillwayRelease")
colnames(dfTable) <- cColNames
dfTable <- as.data.frame(tables[1])
#Turn to meaningful column names
cColNames <- colnames(dfTable)
cColNames[2:5] <- c("PowerRelease", "TotalRelease", "BypassRelease", "SpillwayRelease")
colnames(dfTable) <- cColNames
rm(list=ls())
cPackages <- c("versions", "googlesheets4", "dygraphs", "tidyquant", "xts", "tidyverse", "tidyquant","lubridate", "stringr", "rvest" )
# Install packages not yet installed
installed_packages <- cPackages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(cPackages[!installed_packages])
}
# Packages loading
invisible(lapply(cPackages, library, character.only = TRUE))
#Load the required library
#Load correct versions of libraries
install.versions('cli', '3.4.0')
# Read Reclamation API data data into R
# Get Today's date as ending time
vDateToday = Sys.Date()
sStartDate = '2024-05-01' # May 1, 2025
sFormat = 'table'
# As CSV
sAPI_Request <- paste0('https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=',sStartDate,'T00:00&t2=',vDateToday,'T00:00&table=R&mrid=0&format=',sFormat)
sWebpage <- read_html(sAPI_Request)
tables <- sWebpage %>% html_table()
dfTable <- as.data.frame(tables[1])
#Turn to meaningful column names
cColNames <- colnames(dfTable)
cColNames[2:5] <- c("PowerRelease", "TotalRelease", "BypassRelease", "SpillwayRelease")
colnames(dfTable) <- cColNames
#Save to csv
write.csv(dfTable, "LakePowellReleases.csv")
dfTable$DateTimePos <- as.POSIXct(dfTable$DATETIME)
dfTable$DateTimePos <- as.POSIXct(dfTable$DATETIME, format = '%b-%d-%Y %H:%M')
dfTable$DateTimePos <- as.POSIXct(dfTable$DATETIME, format = '%b/%d/%Y %H:%M')
dfTable$DateTimePos <- as.POSIXct(as.char(dfTable$DATETIME), format = '%b/%d/%Y %H:%M')
dfTable$DateTimePos <- as.POSIXct(as.character(dfTable$DATETIME), format = '%b/%d/%Y %H:%M')
dfTable$DateTimePos <- as.POSIXct(as.character(dfTable$DATETIME), format = "%m/%d/%Y %H:%M")
dfXts <- xts(cbind(dfTable$PowerRelease, dfTable$BypassRelease, dfTable$SpillwayRelease, dfTable$TotalRelease), order.by=dfTable$DateTimePos)
vDateToday = Sys.Date() - 1
sStartDate = '2024-05-01' # May 1, 2025
sFormat = 'table'
# As CSV
sAPI_Request <- paste0('https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=',sStartDate,'T00:00&t2=',vDateToday,'T00:00&table=R&mrid=0&format=',sFormat)
sWebpage <- read_html(sAPI_Request)
tables <- sWebpage %>% html_table()
dfTable <- as.data.frame(tables[1])
vDateToday = Sys.Date()
sStartDate = '2024-05-01' # May 1, 2025
sFormat = 'table'
# As CSV
sAPI_Request <- paste0('https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=',sStartDate,'T00:00&t2=',vDateToday,'T00:00&table=R&mrid=0&format=',sFormat)
sWebpage <- read_html(sAPI_Request)
tables <- sWebpage %>% html_table()
dfTable <- as.data.frame(tables[1])
View(sWebpage)
View(sWebpage)
cColNames <- colnames(dfTable)
cColNames[2:5] <- c("PowerRelease", "TotalRelease", "BypassRelease", "SpillwayRelease")
colnames(dfTable) <- cColNames
# Replace NaNs with NA in all columns
dfTable <- dfTable %>%
mutate(across(everything(), ~ifelse(is.nan(.), NA, .)))
#Save to csv
write.csv(dfTable, "LakePowellReleases.csv")
# Convert API Date Time to POSIXct
dfTable$DateTimePos <- as.POSIXct(as.character(dfTable$DATETIME), format = "%m/%d/%Y %H:%M")
#Convert to xts
dfXts <- xts(cbind(dfTable$PowerRelease, dfTable$BypassRelease, dfTable$SpillwayRelease, dfTable$TotalRelease), order.by=dfTable$DateTimePos)
dfTable <- na.omit(dfTable)
#Convert to xts
dfXts <- xts(cbind(dfTable$PowerRelease, dfTable$BypassRelease, dfTable$SpillwayRelease, dfTable$TotalRelease), order.by=dfTable$DateTimePos)
dygraph(dfXts) %>% dyRangeSelector() %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease") %>%
#  dySeries("V5", label = "Outside") %>%
dyLimit(32, color = "red")
dfTemp <- read.csv(file = "Data\gcmrc20250709125927.csv")
dfTemp <- read.csv(file = "Data/gcmrc20250709125927.csv")
dfTemp <- read.csv(file = "/Data/gcmrc20250709125927.csv")
dfTemp <- read.csv(file = "Data/gcmrc20250709125927.tsv")
View(dfTemp)
dfTemp <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = " ")
dfTemp <- dfTemp %>% separate_wider_delim(X.MST..Water, delim = " ", names = c("Hour", "Temperature"))
dfTemp <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = " ")
dfTemp <- as.character(dfTemp$X.MST..Water)
dfTemp <- dfTemp %>% separate_wider_delim(X.MST..Water, delim = " ", names = c("Day","Temperature"))
dfTemp <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = " ")
dfTemp$DateTemp <- as.character(dfTemp$X.MST..Water)
dfTemp <- dfTemp %>% separate_wider_delim(DateTemp, delim = " ", names = c("Date","Temperature"))
dfTemp <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = " ")
dfTemp
dfTemp <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t ")
dfTemp <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
rm(list=ls())
cPackages <- c("versions", "googlesheets4", "dygraphs", "tidyquant", "xts", "tidyverse", "tidyquant","lubridate", "stringr", "rvest" )
# Install packages not yet installed
installed_packages <- cPackages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(cPackages[!installed_packages])
}
# Packages loading
invisible(lapply(cPackages, library, character.only = TRUE))
#Load the required library
#Load correct versions of libraries
install.versions('cli', '3.4.0')
# Read Reclamation API data data into R
# Get Today's date as ending time
vDateToday = Sys.Date()
sStartDate = '2024-05-01' # May 1, 2025
sFormat = 'table'
# As CSV
sAPI_Request <- paste0('https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=',sStartDate,'T00:00&t2=',vDateToday,'T00:00&table=R&mrid=0&format=',sFormat)
sWebpage <- read_html(sAPI_Request)
tables <- sWebpage %>% html_table()
dfReleases <- as.data.frame(tables[1])
#Turn to meaningful column names
cColNames <- colnames(dfReleases)
cColNames[2:5] <- c("PowerRelease", "TotalRelease", "BypassRelease", "SpillwayRelease")
colnames(dfReleases) <- cColNames
#Save to csv
write.csv(dfReleases, "LakePowellReleases.csv")
# Read in Temperature data from Grand Canyon Monitoring and Research Center
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
cTempColNames <- colnames(dfTemperature)
cTempColNames <- c("DateTime", "TemperatureC")
colnames(dfTemperature) <- cTempColNames
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
cTempColNames <- colnames(dfTemperature)
View(dfTemperature)
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%d-%m %H:%M:%S")
View(dfReleases)
# Convert API Date Time to POSIXct
dfReleases$DateTimePos <- as.POSIXct(as.character(dfReleases$DATETIME), format = "%m/%d/%Y %H:%M")
dfReleasesTemp <- left_join(dfReleases, dfTemperature, by = c("DateTimePos" = "DateTimePos"))
View(dfReleasesTemp)
dfReleasesTemp <- na.omit(dfReleasesTemp)
# Remove everything
rm(list=ls())
cPackages <- c("versions", "googlesheets4", "dygraphs", "tidyquant", "xts", "tidyverse", "tidyquant","lubridate", "stringr", "rvest" )
# Install packages not yet installed
installed_packages <- cPackages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(cPackages[!installed_packages])
}
# Packages loading
invisible(lapply(cPackages, library, character.only = TRUE))
#Load the required library
#Load correct versions of libraries
install.versions('cli', '3.4.0')
# Read Reclamation API data data into R
# Get Today's date as ending time
vDateToday = Sys.Date()
sStartDate = '2024-05-01' # May 1, 2025
sFormat = 'table'
# As CSV
sAPI_Request <- paste0('https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=',sStartDate,'T00:00&t2=',vDateToday,'T00:00&table=R&mrid=0&format=',sFormat)
sWebpage <- read_html(sAPI_Request)
tables <- sWebpage %>% html_table()
dfReleases <- as.data.frame(tables[1])
#Turn to meaningful column names
cColNames <- colnames(dfReleases)
cColNames[2:5] <- c("PowerRelease", "TotalRelease", "BypassRelease", "SpillwayRelease")
colnames(dfReleases) <- cColNames
#Save to csv
write.csv(dfReleases, "LakePowellReleases.csv")
# Convert API Date Time to POSIXct
dfReleases$DateTimePos <- as.POSIXct(as.character(dfReleases$DATETIME), format = "%m/%d/%Y %H:%M")
# Read in Temperature data from Grand Canyon Monitoring and Research Center
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
# Convert Date Time to POSIXct
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%d-%m %H:%M:%S")
#Left Join the Temperature data to the release data
dfReleasesTemp <- left_join(dfReleases, dfTemperature, by = c("DateTimePos" = "DateTimePos"))
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%d-%m %H:%M:%S")
## Powell Outlet Releases and plot in dygraphs
## We also load Glen Canyon Dam release temperature
#
# This script does two things:
#   1. Download Glen Canyon Dam Turbine, River Outlet, and Total Releases from Reclamation's Data Portal and plot as an interactive Time-Series (DyGraph)
#   2. Plot Release Temperature Data from Grand Canyon Monitoring and Research Center Website
#
# More details on the Data Sources
#   1. Glen Canyon Dam Release Water Temperature near Page AZ - gcmrc20250709125927.tsv (csv file). Grand Canyon Monitoring and Research Center https://www.gcmrc.gov/discharge_qw_sediment/station/GCDAMP/09379901#.
#   2. Glen Canyon Dam hourly release data. Reclamation HDB Online Data Query Tool
#You can manually query data using the following page and entering the following info: https://www.usbr.gov/lc/region/g4000/riverops/_HdbWebQuery.html
#   A.	Upper Colorado Regional Office
#   B.	1862, 1872, 4167, 4166  (copy and paste these ID's;  power release, total release, bypass release, spillway release)
#		C.	Hourly
#		D.	2024-07-01 00:00 and 2024-12-01 00:00 (cool mix period)
#		E.	Observed
#		F.	CSV
#		Then click "build request" and click on the url.
#
#   URL Build Request with online interactive plot on Reclamation's Website:
#     https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=2024-05-01T00:00&t2=2025-07-10T00:00&table=R&mrid=0&format=graph
#
#   URL Build Request as CSV:
#     https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=2024-05-01T00:00&t2=2025-07-10T00:00&table=R&mrid=0&format=csv
#
# David Rosenberg
# July 10, 2025
#Versions to use
#R version 4.1.1. Download from https://cran.r-project.org/.
#R Studio 2021.09.0. Build 351 - Download from https://www.rstudio.com/.
# Remove everything
rm(list=ls())
cPackages <- c("versions", "googlesheets4", "dygraphs", "tidyquant", "xts", "tidyverse", "tidyquant","lubridate", "stringr", "rvest" )
# Install packages not yet installed
installed_packages <- cPackages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(cPackages[!installed_packages])
}
# Packages loading
invisible(lapply(cPackages, library, character.only = TRUE))
#Load the required library
#Load correct versions of libraries
install.versions('cli', '3.4.0')
# Read Reclamation API data data into R
# Get Today's date as ending time
vDateToday = Sys.Date()
sStartDate = '2024-05-01' # May 1, 2025
sFormat = 'table'
# As CSV
sAPI_Request <- paste0('https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=',sStartDate,'T00:00&t2=',vDateToday,'T00:00&table=R&mrid=0&format=',sFormat)
sWebpage <- read_html(sAPI_Request)
tables <- sWebpage %>% html_table()
dfReleases <- as.data.frame(tables[1])
#Turn to meaningful column names
cColNames <- colnames(dfReleases)
cColNames[2:5] <- c("PowerRelease", "TotalRelease", "BypassRelease", "SpillwayRelease")
colnames(dfReleases) <- cColNames
#Save to csv
write.csv(dfReleases, "LakePowellReleases.csv")
# Convert API Date Time to POSIXct
dfReleases$DateTimePos <- as.POSIXct(as.character(dfReleases$DATETIME), format = "%m/%d/%Y %H:%M")
# Read in Temperature data from Grand Canyon Monitoring and Research Center
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
#Convert -999 to NA
# Convert Date Time to POSIXct
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%d-%m %H:%M:%S")
#Left Join the Temperature data to the release data so only have hourly data.
dfReleasesTemp <- left_join(dfReleases, dfTemperature, by = c("DateTimePos" = "DateTimePos"))
# Replace NaNs with NA in all columns
dfReleasesTemp <- na.omit(dfReleasesTemp)
#Convert to xts
dfXts <- xts(cbind(dfReleases$PowerRelease, dfReleases$BypassRelease, dfReleases$SpillwayRelease, dfReleases$TotalRelease), order.by=dfReleases$DateTimePos)
dfXts <- xts(cbind(dfReleasesTemp$PowerRelease, dfReleasesTemp$BypassRelease, dfReleasesTemp$SpillwayRelease, dfReleasesTemp$TotalRelease), order.by=dfReleasesTemp$DateTimePos)
dygraph(dfXts) %>% dyRangeSelector() %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")
dfTemperature$Hour <- hour(dfTemperature$DateTime)
dfTemperature$Minute <- Minute(dfTemperature$DateTime)
dfTemperature$Minute <- minute(dfTemperature$DateTime)
dfTemperature <- dfTemperature %>% filter(Minute == 0)
dfReleases <- na.omit(dfReleases)
dfXts <- xts(cbind(dfReleasesp$PowerRelease, dfReleases$BypassRelease, dfReleases$SpillwayRelease, dfReleases$TotalRelease), order.by=dfReleases$DateTimePos)
dfXts <- xts(cbind(dfReleases$PowerRelease, dfReleases$BypassRelease, dfReleases$SpillwayRelease, dfReleases$TotalRelease), order.by=dfReleases$DateTimePos)
dygraph(dfXts) %>% dyRangeSelector() %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease") # %>%
#  dySeries("V5", label = "Outside") %>%
dyLimit(32, color = "red")
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
dfTemperature <- na_if_in(dfTemperature$TemperatureC == -999)
dfTemperature <- na_if_in(dfTemperature, -999)
dfTemperature <- dplyr::na_if_in(dfTemperature, -999)
dfTemperature <- na_if(dfTemperature, -999)
dfTemperature$TemperatureC <- na_if(dfTemperature$TemperatureC, -999)
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
# Convert Date Time to POSIXct
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%d-%m %H:%M:%S")
# Filter for top of the hour (00:00)
dfTemperature$Minute <- minute(dfTemperature$DateTime)
dfTemperature <- dfTemperature %>% filter(Minute == 0)
dfTemperature$TemperatureC <- if_in(dfTemperature$TemperatureC, -999)
dfReleases <- na.omit(dfReleases)
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
# Filter for top of the hour (00:00)
dfTemperature$Minute <- minute(dfTemperature$DateTime)
dfTemperature <- dfTemperature %>% filter(Minute == 0)
dfTemperature$TemperatureC <- if_in(dfTemperature$TemperatureC, -999)
dfReleases <- na.omit(dfReleases)
dfTemperature$TemperatureC <- na_if(dfTemperature$TemperatureC, -999)
dfReleases <- na.omit(dfReleases)
# Convert Date Time to POSIXct
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%d-%m %H:%M:%S")
dfXtsTemperature <- xts(cbind(dfTemperature$TemperatureC), order.by=dfTemperature$DateTimePos)
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
# Filter for top of the hour (00:00)
dfTemperature$Minute <- minute(dfTemperature$DateTime)
dfTemperature <- dfTemperature %>% filter(Minute == 0)
dfTemperature$TemperatureC <- na_if(dfTemperature$TemperatureC, -999)
dfTemperature <- na.omit(dfTemperature)
#Convert DateTime to POSIXct
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%d-%m %H:%M:%S")
dfXtsTemperature <- xts(cbind(dfTemperature$TemperatureC), order.by=dfTemperature$DateTimePos)
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%d-%m %H:%M:%S", tz="GMT")
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%m-%d %H:%M:%S")
#Convert to xts
dfXtsTemperature <- xts(cbind(dfTemperature$TemperatureC), order.by=dfTemperature$DateTimePos)
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
# Filter for top of the hour (00:00)
dfTemperature$Minute <- minute(dfTemperature$DateTime)
dfTemperature <- dfTemperature %>% filter(Minute == 0)
dfTemperature$TemperatureC <- na_if(dfTemperature$TemperatureC, -999)
dfTemperature <- na.omit(dfTemperature)
#Convert DateTime to POSIXct
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%m-%d %H:%M:%S")
dfXtsTemperature <- xts(cbind(dfTemperature$TemperatureC), order.by=dfTemperature$DateTimePos)
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
# Filter for top of the hour (00:00)
dfTemperature$Minute <- minute(dfTemperature$DateTime)
dfTemperature <- dfTemperature %>% filter(Minute == 0)
dfTemperature$TemperatureC <- na_if(dfTemperature$TemperatureC, -999)
#Convert DateTime to POSIXct
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%m-%d %H:%M:%S")
dfTemperature <- na.omit(dfTemperature)
dfXtsTemperature <- xts(cbind(dfTemperature$TemperatureC), order.by=dfTemperature$DateTimePos)
dygraph(dfXtsRelease) %>% dyRangeSelector() %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease") # %>%
sWebpage <- read_html(sAPI_Request)
tables <- sWebpage %>% html_table()
dfReleases <- as.data.frame(tables[1])
#Turn to meaningful column names
cColNames <- colnames(dfReleases)
cColNames[2:5] <- c("PowerRelease", "TotalRelease", "BypassRelease", "SpillwayRelease")
colnames(dfReleases) <- cColNames
#Save to csv
write.csv(dfReleases, "LakePowellReleases.csv")
# Convert API Date Time to POSIXct
dfReleases$DateTimePos <- as.POSIXct(as.character(dfReleases$DATETIME), format = "%m/%d/%Y %H:%M")
#Left Join the Temperature data to the release data so only have hourly data.
#dfReleasesTemp <- left_join(dfReleases, dfTemperature, by = c("DateTimePos" = "DateTimePos"))
# Replace NaNs with NA in all columns
dfReleases <- na.omit(dfReleases)
#Convert to xts
dfXtsRelease <- xts(cbind(dfReleases$PowerRelease, dfReleases$BypassRelease, dfReleases$SpillwayRelease, dfReleases$TotalRelease), order.by=dfReleases$DateTimePos)
dygraph(dfXtsRelease) %>% dyRangeSelector() %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease") # %>%
dygraph(dfXtsTemperaturee) %>% dyRangeSelector() %>%
dySeries("V1", label = "Temperature") #%>%
dygraph(dfXtsTemperature) %>% dyRangeSelector() %>%
dySeries("V1", label = "Temperature") #%>%
dygraph(dfXtsTemperature, ylab = "Temperature (oC)") %>% dyRangeSelector() %>%
dySeries("V1", label = "Temperature") #%>%
dfReleasesTemp <- left_join(dfReleases, dfTemperature, by = c("DateTimePos" = "DateTimePos"))
dfReleasesTemperature <- left_join(dfReleases, dfTemperature, by = c("DateTimePos" = "DateTimePos"))
dfReleasesTemperature <- na.omit(dfReleasesTemperature)
dfXtsReleasesTemperature <- xts(cbind(dfReleasesTemperature$PowerRelease, dfReleasesTemperature$BypassRelease, dfReleasesTemperature$SpillwayRelease, dfReleasesTemperature$TotalRelease, dfReleasesTemperature$TemperatureC), order.by = dfReleasesTemperature$DateTimePos)
dygraph(dfXtsReleasesTemperature, ylab = "Release (cfs)") %>% dyRangeSelector() %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2")
dygraph(dfXtsReleasesTemperature, ylab = "Release (cfs)") %>% dyRangeSelector() %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3)
dygraph(dfXtsReleasesTemperature, ylab = "Release (cfs)", y2label = "Temperature (oC)") %>% dyRangeSelector() %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3)
dygraph(dfXtsReleasesTemperature, ylab = "Release (cfs)") %>% dyRangeSelector() %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3, y2label = "Temperature (oC)")
dygraph(dfXtsReleasesTemperature, ylab = "Release (cfs)", y2lab = "Temperature (oC)") %>% dyRangeSelector() %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3)
ygraph(dfXtsReleasesTemperature, ylab = "Release (cfs)") %>% dyRangeSelector() %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3) %>%
dyAxis("y2", label = "Temperature (oC)")
dygraph(dfXtsReleasesTemperature) %>% dyRangeSelector() %>%
dyAxis("y", label = "Release (cfs)") %>%
dyAxis("y2", label = "Temperature (oC)") %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3)
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
# Filter for top of the hour (00:00)
dfTemperature$Minute <- minute(dfTemperature$DateTime)
dfTemperature <- dfTemperature %>% filter(Minute == 0)
dfTemperature$TemperatureC <- round(dfTemperature$TemperatureC, 1)
dfTemperature$TemperatureC <- na_if(dfTemperature$TemperatureC, -999)
#Convert DateTime to POSIXct
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%m-%d %H:%M:%S")
dfTemperature <- na.omit(dfTemperature)
#Convert to xts
dfXtsTemperature <- xts(cbind(dfTemperature$TemperatureC), order.by=dfTemperature$DateTimePos)
dygraph(dfXtsTemperature, ylab = "Temperature (oC)") %>% dyRangeSelector() %>%
dySeries("V1", label = "Temperature")
#Left Join the Temperature data to the release data so only have hourly data.
dfReleasesTemperature <- left_join(dfReleases, dfTemperature, by = c("DateTimePos" = "DateTimePos"))
dfReleasesTemperature <- na.omit(dfReleasesTemperature)
#Convert to xts
dfXtsReleasesTemperature <- xts(cbind(dfReleasesTemperature$PowerRelease, dfReleasesTemperature$BypassRelease, dfReleasesTemperature$SpillwayRelease, dfReleasesTemperature$TotalRelease, dfReleasesTemperature$TemperatureC), order.by = dfReleasesTemperature$DateTimePos)
#Plot the Release dygraph
dygraph(dfXtsReleasesTemperature) %>% dyRangeSelector() %>%
dyAxis("y", label = "Release (cfs)") %>%
dyAxis("y2", label = "Temperature (oC)") %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3)
dygraph(dfXtsReleasesTemperature) %>% dyRangeSelector() %>%
dyAxis("y", label = "Release (cfs)") %>%
dyAxis("y2", label = "Temperature (oC)", digitsAfterDecimal = 1) %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3)
dygraph(dfXtsReleasesTemperature) %>% dyRangeSelector() %>%
dyAxis("y", label = "Release (cfs)") %>%
dyAxis("y2", label = "Temperature (oC)", independentTicks = TRUE, axisLabelFormatter = htmlwidgets::JS("function(value) {return value.toFixed(1);")) %>% ## Round to 1 decimal places for y2-axis) %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3)
dygraph(dfXtsReleasesTemperature) %>% dyRangeSelector() %>%
dyAxis("y", label = "Release (cfs)") %>%
#dyAxis("y2", label = "Temperature (oC)", independentTicks = TRUE, axisLabelFormatter = htmlwidgets::JS("function(value) {return value.toFixed(1);")) %>% ## Round to 1 decimal places for y2-axis) %>%
dyAxis("y2", label = "Temperature (oC)", independentTicks = TRUE) %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3)
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
# Filter for top of the hour (00:00)
dfTemperature$Minute <- minute(dfTemperature$DateTime)
dfTemperature <- dfTemperature %>% filter(Minute == 0)
#dfTemperature$TemperatureC <- round(dfTemperature$TemperatureC, 1)
dfTemperature$TemperatureC <- na_if(dfTemperature$TemperatureC, -999)
#Convert DateTime to POSIXct
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%m-%d %H:%M:%S")
dfTemperature <- na.omit(dfTemperature)
#Convert to xts
dfXtsTemperature <- xts(cbind(dfTemperature$TemperatureC), order.by=dfTemperature$DateTimePos)
dfReleasesTemperature <- left_join(dfReleases, dfTemperature, by = c("DateTimePos" = "DateTimePos"))
dfReleasesTemperature <- na.omit(dfReleasesTemperature)
#Convert to xts
dfXtsReleasesTemperature <- xts(cbind(dfReleasesTemperature$PowerRelease, dfReleasesTemperature$BypassRelease, dfReleasesTemperature$SpillwayRelease, dfReleasesTemperature$TotalRelease, dfReleasesTemperature$TemperatureC), order.by = dfReleasesTemperature$DateTimePos)
#Plot the Release dygraph
dygraph(dfXtsReleasesTemperature) %>% dyRangeSelector() %>%
dyAxis("y", label = "Release (cfs)") %>%
#dyAxis("y2", label = "Temperature (oC)", independentTicks = TRUE, axisLabelFormatter = htmlwidgets::JS("function(value) {return value.toFixed(1);")) %>% ## Round to 1 decimal places for y2-axis) %>%
dyAxis("y2", label = "Temperature (oC)", independentTicks = TRUE) %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3)

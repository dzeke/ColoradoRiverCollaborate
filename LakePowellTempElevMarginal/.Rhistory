#		C.	Hourly
#		D.	2024-07-01 00:00 and 2024-12-01 00:00 (cool mix period)
#		E.	Observed
#		F.	CSV
#		Then click "build request" and click on the url.
#
#   URL Build Request with online interactive plot on Reclamation's Website:
#     https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=2024-05-01T00:00&t2=2025-07-10T00:00&table=R&mrid=0&format=graph
#
#   URL Build Request as CSV:
#     https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=2024-05-01T00:00&t2=2025-07-10T00:00&table=R&mrid=0&format=csv
#
# David Rosenberg
# July 22, 2025
#Versions to use
#R version 4.1.1. Download from https://cran.r-project.org/.
#R Studio 2021.09.0. Build 351 - Download from https://www.rstudio.com/.
# Remove everything
rm(list=ls())
cPackages <- c("versions", "googlesheets4", "dygraphs", "tidyquant", "xts", "tidyverse", "tidyquant","lubridate", "stringr", "rvest" )
# Install packages not yet installed
installed_packages <- cPackages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(cPackages[!installed_packages])
}
# Packages loading
invisible(lapply(cPackages, library, character.only = TRUE))
#Load the required library
#Load correct versions of libraries
install.versions('cli', '3.4.0')
#######
###Read Reclamation API Release data data into R
# Get Today's date as ending time
vDateToday = Sys.Date()
sStartDate = '2024-05-01' # May 1, 2025
sFormat = 'table'
# As CSV
sAPI_Request <- paste0('https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=',sStartDate,'T00:00&t2=',vDateToday,'T00:00&table=R&mrid=0&format=',sFormat)
sWebpage <- read_html(sAPI_Request)
tables <- sWebpage %>% html_table()
dfReleases <- as.data.frame(tables[1])
#Turn to meaningful column names
cColNames <- colnames(dfReleases)
cColNames[2:5] <- c("PowerRelease", "TotalRelease", "BypassRelease", "SpillwayRelease")
colnames(dfReleases) <- cColNames
#Save to csv
write.csv(dfReleases, "LakePowellReleases.csv")
# Convert API Date Time to POSIXct
dfReleases$DateTimePos <- as.POSIXct(as.character(dfReleases$DATETIME), format = "%m/%d/%Y %H:%M")
# Replace NaNs with NA in all columns
dfReleases <- na.omit(dfReleases)
#Convert to xts
dfXtsRelease <- xts(cbind(dfReleases$PowerRelease, dfReleases$BypassRelease, dfReleases$SpillwayRelease, dfReleases$TotalRelease), order.by=dfReleases$DateTimePos)
#Plot the Release dygraph
dygraph(dfXtsRelease, ylab = "Release (cfs)") %>% dyRangeSelector() %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease") # %>%
#  dySeries("V5", label = "Outside") %>%
#dyLimit(32, color = "red")
###### Read in Temperature data from Grand Canyon Monitoring and Research Center
####
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
# Filter for top of the hour (00:00)
dfTemperature$Minute <- minute(dfTemperature$DateTime)
dfTemperature <- dfTemperature %>% filter(Minute == 0)
dfTemperature$TemperatureCRound <- round(dfTemperature$TemperatureC, 1)
dfTemperature$TemperatureC <- na_if(dfTemperature$TemperatureC, -999)
#Convert DateTime to POSIXct
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%m-%d %H:%M:%S")
dfTemperature <- na.omit(dfTemperature)
#Convert to xts
dfXtsTemperature <- xts(cbind(dfTemperature$TemperatureC), order.by=dfTemperature$DateTimePos)
dygraph(dfXtsTemperature, ylab = "Temperature (oC)") %>% dyRangeSelector() %>%
dySeries("V1", label = "Temperature") #%>%
###### Do a combined Release-Temperature plot
#Left Join the Temperature data to the release data so only have hourly data.
dfReleasesTemperature <- left_join(dfReleases, dfTemperature, by = c("DateTimePos" = "DateTimePos"))
dfReleasesTemperature <- na.omit(dfReleasesTemperature)
#Convert to xts
dfXtsReleasesTemperature <- xts(cbind(dfReleasesTemperature$PowerRelease, dfReleasesTemperature$BypassRelease, dfReleasesTemperature$SpillwayRelease, dfReleasesTemperature$TotalRelease, dfReleasesTemperature$TemperatureC), order.by = dfReleasesTemperature$DateTimePos)
#Plot the Release dygraph
dygraph(dfXtsReleasesTemperature) %>% dyRangeSelector() %>%
dyAxis("y", label = "Release (cfs)") %>%
#dyAxis("y2", label = "Temperature (oC)", independentTicks = TRUE, axisLabelFormatter = htmlwidgets::JS("function(value) {return value.toFixed(1);")) %>% ## Round to 1 decimal places for y2-axis) %>%
dyAxis("y2", label = "Temperature (oC)", independentTicks = TRUE) %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3)
#### Build a histogram of daily change in temperature when bypass releases are happening.
dfReleasesTemperature$Day <- day(dfReleasesTemperature$DateTime)
dfReleasesTemperature$Month <- month(dfReleasesTemperature$DateTime)
dfReleasesTemperature$Year <- year(dfReleasesTemperature$DateTime)
#Calculate average temperature when bypass release is active
dfDailyBypassTemperature <- dfReleasesTemperature %>% filter(dfReleasesTemperature$BypassRelease > 2000) %>%
group_by(Year, Month, Day) %>% summarise (AverageBypassTemp = mean(TemperatureC))
#Calculate average temperature when bypass release is not active (turbine only release)
dfDailyTurbineTemperature <- dfReleasesTemperature %>% filter(dfReleasesTemperature$BypassRelease == 0) %>%
group_by(Year, Month, Day) %>% summarise (AverageTurbineTemp = mean(TemperatureC))
#Right join so we get daily Bypass Temperature and Turbine temperature on the same day
dfDailyTemp <- left_join(dfDailyBypassTemperature, dfDailyTurbineTemperature, by = c("Day"="Day", "Month" = "Month", "Year" = "Year"))
dfDailyTemp$Difference <- dfDailyTemp$AverageTurbineTemp - dfDailyTemp$AverageBypassTemp
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5)
ggplot(dfDailyTemp, aes(x = Diffewrence)) +
geom_histogram(binwidth = 0.5) +
facet_wrap( ~ Month)
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5) +
facet_wrap( ~ Month)
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5) +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(-0.5, 3, breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Day-Night Difference (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5) +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(-0.5, 3, breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5) +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(-0.5, 3, breaks = seq(-0.5,3,0.5), labs = "Difference between Day and Night temperatures (oC)") +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5) +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_discrete(-0.5, 3, breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5) +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_discrete(-0.5, 3, breaks = seq(-0.5,3,0.5), labels = seq(-0.5,3,0.5) ) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_discrete(-0.5, 3, breaks = seq(-0.5,3,0.5), labels = seq(-0.5,3,0.5) ) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
#scale_x_discrete(-0.5, 3, breaks = seq(-0.5,3,0.5), labels = seq(-0.5,3,0.5) ) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, fill = "azure1", color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
cPackages <- c("versions", "googlesheets4", "dygraphs", "tidyquant", "xts", "tidyverse", "tidyquant","lubridate", "stringr", "rvest", "RColorBrewer" )
# Install packages not yet installed
installed_packages <- cPackages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(cPackages[!installed_packages])
}
palBlues <- brewer.pal(9, "Blues")
palReds <- brewer.pal(9, "Reds")
palGreys <- brewer.pal(9, "Greys")
cPackages <- c("versions", "googlesheets4", "dygraphs", "tidyquant", "xts", "tidyverse", "tidyquant","lubridate", "stringr", "rvest", "RColorBrewer" )
# Install packages not yet installed
installed_packages <- cPackages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(cPackages[!installed_packages])
}
# Packages loading
invisible(lapply(cPackages, library, character.only = TRUE))
palBlues <- brewer.pal(9, "Blues")
palReds <- brewer.pal(9, "Reds")
palGreys <- brewer.pal(9, "Greys")
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, fill = palGreys[1], color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, fill = palGreys[3], color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, fill = palGreys[3], color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
facet_wrap( ~ Month) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
dfReleasesTemperature$MonthName <- month.name(dfReleasesTemperature$Month)
dfReleasesTemperature$MonthName <- month.name[dfReleasesTemperature$Month]
dfDailyBypassTemperature <- dfReleasesTemperature %>% filter(dfReleasesTemperature$BypassRelease > 2000) %>%
group_by(Year, Month, Day) %>% summarise (AverageBypassTemp = mean(TemperatureC))
#Calculate average temperature when bypass release is not active (turbine only release)
dfDailyTurbineTemperature <- dfReleasesTemperature %>% filter(dfReleasesTemperature$BypassRelease == 0) %>%
group_by(Year, Month, Day) %>% summarise (AverageTurbineTemp = mean(TemperatureC))
dfReleasesTemperature$Day <- day(dfReleasesTemperature$DateTime)
dfReleasesTemperature$Month <- month(dfReleasesTemperature$DateTime)
dfReleasesTemperature$Year <- year(dfReleasesTemperature$DateTime)
dfReleasesTemperature$MonthName <- month.name[dfReleasesTemperature$Month]
#Calculate average temperature when bypass release is active
dfDailyBypassTemperature <- dfReleasesTemperature %>% filter(dfReleasesTemperature$BypassRelease > 2000) %>%
group_by(Year, Month, MonthName, Day) %>% summarise (AverageBypassTemp = mean(TemperatureC))
#Calculate average temperature when bypass release is not active (turbine only release)
dfDailyTurbineTemperature <- dfReleasesTemperature %>% filter(dfReleasesTemperature$BypassRelease == 0) %>%
group_by(Year, Month, MonthName, Day) %>% summarise (AverageTurbineTemp = mean(TemperatureC))
#Right join so we get daily Bypass Temperature and Turbine temperature on the same day
dfDailyTemp <- left_join(dfDailyBypassTemperature, dfDailyTurbineTemperature, by = c("Day"="Day", "Month" = "Month", "Year" = "Year"))
dfDailyTemp$Difference <- dfDailyTemp$AverageTurbineTemp - dfDailyTemp$AverageBypassTemp
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, fill = palGreys[3], color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, fill = palGreys[3], color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
facet_wrap( ~ MonthName) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, fill = palGreys[3], color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
facet_wrap( ~ MonthName.x) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, fill = palGreys[3], color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
facet_wrap( ~ month.name[dfDailyTemp$Month]) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, fill = palGreys[3], color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
facet_wrap( ~ factor(dfDailyTemp$MonthName.x)) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, fill = palGreys[3], color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
facet_wrap( ~ factor(dfDailyTemp$Month, levels = dfDailyTemp$MonthName.x )) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, fill = palGreys[3], color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
facet_wrap( ~ factor(dfDailyTemp$MonthName.x, levels = month.name )) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
ggplot(dfDailyTemp, aes(x = Difference)) +
geom_histogram(binwidth = 0.5, fill = palGreys[3], color = "black") +
#scale_color_manual(values = cColorsToPlot) +
#scale_linetype_manual(values = c("solid","longdash")) +
scale_x_continuous(breaks = seq(-0.5,3,0.5)) +
#Make one combined legend
#guides(color = guide_legend(""), linetype = guide_legend("")) +
facet_wrap( ~ factor(dfDailyTemp$MonthName.x, levels = month.name ), ncol = 1) +
theme_bw() +
labs(x="Difference between Day and Night temperatures (oC)", y="Number of Days") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20)) #, legend.title = element_text("Annual Release\nMAF"), legend.text=element_text(size=14), axis.text.x = element_text(size=12))
## Powell Outlet Releases and Temperature plot in dygraphs
##
#
# This script does two things:
#   1. Download Glen Canyon Dam Turbine, River Outlet, and Total Releases from Reclamation's Data Portal and plot as an interactive Time-Series (DyGraph)
#   2. Download Release Temperature Data from Grand Canyon Monitoring and Research Center Website
#
#   Then Plot:
#     A. Combined DyGraph (interactive timeseries plot) with Releases on left axis and Temperature on the second right axis.
#     B. Histogram of daily temperature differences
#     C. Histogram of daily temperature differences broken out by month (facet)
# More details on the Data Sources
#   1. Glen Canyon Dam Release Water Temperature near Page AZ - gcmrc20250709125927.tsv (csv file). Grand Canyon Monitoring and Research Center https://www.gcmrc.gov/discharge_qw_sediment/station/GCDAMP/09379901#.
#   2. Glen Canyon Dam hourly release data. Reclamation HDB Online Data Query Tool
#You can manually query data using the following page and entering the following info: https://www.usbr.gov/lc/region/g4000/riverops/_HdbWebQuery.html
#   A.	Upper Colorado Regional Office
#   B.	1862, 1872, 4167, 4166  (copy and paste these ID's;  power release, total release, bypass release, spillway release)
#		C.	Hourly
#		D.	2024-07-01 00:00 and 2024-12-01 00:00 (cool mix period)
#		E.	Observed
#		F.	CSV
#		Then click "build request" and click on the url.
#
#   URL Build Request with online interactive plot on Reclamation's Website:
#     https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=2024-05-01T00:00&t2=2025-07-10T00:00&table=R&mrid=0&format=graph
#
#   URL Build Request as CSV:
#     https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=2024-05-01T00:00&t2=2025-07-10T00:00&table=R&mrid=0&format=csv
#
# David Rosenberg
# July 28, 2025
#Versions to use
#R version 4.1.1. Download from https://cran.r-project.org/.
#R Studio 2021.09.0. Build 351 - Download from https://www.rstudio.com/.
# Remove everything
rm(list=ls())
cPackages <- c("versions", "googlesheets4", "dygraphs", "tidyquant", "xts", "tidyverse", "tidyquant","lubridate", "stringr", "rvest", "RColorBrewer" )
# Install packages not yet installed
installed_packages <- cPackages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(cPackages[!installed_packages])
}
# Packages loading
invisible(lapply(cPackages, library, character.only = TRUE))
#Load the required library
#Load correct versions of libraries
install.versions('cli', '3.4.0')
#######
###Read Reclamation API Release data data into R
# Get Today's date as ending time
vDateToday = Sys.Date()
sStartDate = '2024-05-01' # May 1, 2025
sFormat = 'table'
# As CSV
sAPI_Request <- paste0('https://www.usbr.gov/pn-bin/hdb/hdb.pl?svr=uchdb2&sdi=1862%2C1872%2C4167%2C4166&tstp=HR&t1=',sStartDate,'T00:00&t2=',vDateToday,'T00:00&table=R&mrid=0&format=',sFormat)
sWebpage <- read_html(sAPI_Request)
tables <- sWebpage %>% html_table()
dfReleases <- as.data.frame(tables[1])
#Turn to meaningful column names
cColNames <- colnames(dfReleases)
cColNames[2:5] <- c("PowerRelease", "TotalRelease", "BypassRelease", "SpillwayRelease")
colnames(dfReleases) <- cColNames
#Save to csv
write.csv(dfReleases, "LakePowellReleases.csv")
# Convert API Date Time to POSIXct
dfReleases$DateTimePos <- as.POSIXct(as.character(dfReleases$DATETIME), format = "%m/%d/%Y %H:%M")
# Replace NaNs with NA in all columns
dfReleases <- na.omit(dfReleases)
#Convert to xts
dfXtsRelease <- xts(cbind(dfReleases$PowerRelease, dfReleases$BypassRelease, dfReleases$SpillwayRelease, dfReleases$TotalRelease), order.by=dfReleases$DateTimePos)
# #Plot the Release dygraph
# dygraph(dfXtsRelease, ylab = "Release (cfs)") %>% dyRangeSelector() %>%
#   dySeries("V1", label = "PowerRelease") %>%
#   dySeries("V2", label = "BypassRelease") %>%
#   dySeries("V3", label = "SpillwayRelease") %>%
#   dySeries("V4", label = "TotalRelease") # %>%
# #  dySeries("V5", label = "Outside") %>%
#dyLimit(32, color = "red")
###### Read in Temperature data from Grand Canyon Monitoring and Research Center
####
dfTemperature <- read.csv(file = "Data/gcmrc20250709125927.tsv", sep = "\t")
colnames(dfTemperature) <- c("DateTime", "TemperatureC")
# Filter for top of the hour (00:00)
dfTemperature$Minute <- minute(dfTemperature$DateTime)
dfTemperature <- dfTemperature %>% filter(Minute == 0)
dfTemperature$TemperatureCRound <- round(dfTemperature$TemperatureC, 1)
dfTemperature$TemperatureC <- na_if(dfTemperature$TemperatureC, -999)
#Convert DateTime to POSIXct
dfTemperature$DateTimePos <- as.POSIXct(as.character(dfTemperature$DateTime), format = "%Y-%m-%d %H:%M:%S")
dfTemperature <- na.omit(dfTemperature)
#Convert to xts
dfXtsTemperature <- xts(cbind(dfTemperature$TemperatureC), order.by=dfTemperature$DateTimePos)
# dygraph(dfXtsTemperature, ylab = "Temperature (oC)") %>% dyRangeSelector() %>%
#   dySeries("V1", label = "Temperature") #%>%
###### Do a combined Release-Temperature plot
#Left Join the Temperature data to the release data so only have hourly data.
dfReleasesTemperature <- left_join(dfReleases, dfTemperature, by = c("DateTimePos" = "DateTimePos"))
dfReleasesTemperature <- na.omit(dfReleasesTemperature)
#Convert to xts
dfXtsReleasesTemperature <- xts(cbind(dfReleasesTemperature$PowerRelease, dfReleasesTemperature$BypassRelease, dfReleasesTemperature$SpillwayRelease, dfReleasesTemperature$TotalRelease, dfReleasesTemperature$TemperatureC), order.by = dfReleasesTemperature$DateTimePos)
#Plot the Release - Temperature dygraph
dygraph(dfXtsReleasesTemperature) %>% dyRangeSelector() %>%
dyAxis("y", label = "Release (cfs)") %>%
#dyAxis("y2", label = "Temperature (oC)", independentTicks = TRUE, axisLabelFormatter = htmlwidgets::JS("function(value) {return value.toFixed(1);")) %>% ## Round to 1 decimal places for y2-axis) %>%
dyAxis("y2", label = "Temperature (oC)", independentTicks = TRUE) %>%
dySeries("V1", label = "PowerRelease") %>%
dySeries("V2", label = "BypassRelease") %>%
dySeries("V3", label = "SpillwayRelease") %>%
dySeries("V4", label = "TotalRelease")  %>%
dySeries("V5", label = "Temperature", axis = "y2", strokeWidth = 3)
